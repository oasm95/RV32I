/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module RISCV32I(CLK, IRQ, IMEM_DATA, DMEM_DATA_L, IMEM_ADDR, DMEM_ADDR, DMEM_DATA_S, DMEM_WEN);
  wire [31:0] _0_;
  wire [31:0] _1_;
  wire [31:0] _2_;
  input CLK;
  output [31:0] DMEM_ADDR;
  input [31:0] DMEM_DATA_L;
  output [31:0] DMEM_DATA_S;
  output DMEM_WEN;
  output [31:0] IMEM_ADDR;
  input [31:0] IMEM_DATA;
  input IRQ;
  wire [2:0] alufunct3;
  wire [3:0] alufunct7;
  wire [6:0] aluopcode;
  wire [3:0] alusel;
  wire [1:0] asel;
  wire [1:0] bsel;
  wire csrwen;
  wire ebreak;
  wire ecall;
  wire [2:0] idfunct3;
  wire [3:0] idfunct7;
  wire [6:0] idopcode;
  wire illop;
  wire [2:0] immsel;
  wire [2:0] memfunct3;
  wire [3:0] memfunct7;
  wire [6:0] memopcode;
  wire memwen;
  wire mret;
  wire [1:0] pcsel;
  wire regfilewen;
  wire trap;
  wire trapwen;
  wire [2:0] wbfunct3;
  wire [6:0] wbopcode;
  wire [1:0] wbsel;
  wire wbtrap;
  controlunit controlunit (
    .a_sel(asel),
    .alu_funct3(alufunct3),
    .alu_funct7(alufunct7),
    .alu_opcode(aluopcode),
    .alu_sel(alusel),
    .b_sel(bsel),
    .csrfile_trap_wen(trapwen),
    .csrfile_wen(csrwen),
    .dmem_wen(memwen),
    .ebreak(ebreak),
    .ecall(ecall),
    .id_funct3(idfunct3),
    .id_funct7(idfunct7),
    .id_opcode(idopcode),
    .ill_op(illop),
    .imm_sel(immsel),
    .mem_funct3(memfunct3),
    .mem_funct7(memfunct7),
    .mem_opcode(memopcode),
    .mret(mret),
    .pc_sel(pcsel),
    .regfile_wen(regfilewen),
    .trap(trap),
    .wb_funct3(wbfunct3),
    .wb_opcode(wbopcode),
    .wb_sel(wbsel),
    .wbtrap(wbtrap)
  );
  datapath_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa datapath (
    .a_sel(asel),
    .alu_funct3(alufunct3),
    .alu_funct7(alufunct7),
    .alu_opcode(aluopcode),
    .alu_sel(alusel),
    .b_sel(bsel),
    .clk(CLK),
    .csrfile_trap_wen(trapwen),
    .csrfile_wen(csrwen),
    .dmem_addr(_1_),
    .dmem_dataload(DMEM_DATA_L),
    .dmem_datastore(_2_),
    .ebreak(ebreak),
    .ecall(ecall),
    .extern_irq(IRQ),
    .id_funct3(idfunct3),
    .id_funct7(idfunct7),
    .id_opcode(idopcode),
    .ill_op(illop),
    .imem_addr(_0_),
    .imem_instruction(IMEM_DATA),
    .imm_sel(immsel),
    .mem_funct3(memfunct3),
    .mem_funct7(memfunct7),
    .mem_opcode(memopcode),
    .mret(mret),
    .pc_sel(pcsel),
    .regfile_wen(regfilewen),
    .stall(1'h0),
    .trap(trap),
    .wb_funct3(wbfunct3),
    .wb_opcode(wbopcode),
    .wb_sel(wbsel),
    .wbtrap(wbtrap)
  );
  assign IMEM_ADDR = _0_;
  assign DMEM_ADDR = _1_;
  assign DMEM_DATA_S = _2_;
  assign DMEM_WEN = memwen;
endmodule

module alu_32(a, b, funsel, c, z, condtrue);
  wire [31:0] _00_;
  wire _01_;
  wire [31:0] _02_;
  wire _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [31:0] _16_;
  wire _17_;
  wire [31:0] _18_;
  wire _19_;
  wire [31:0] _20_;
  wire _21_;
  wire [31:0] _22_;
  wire _23_;
  wire [31:0] _24_;
  wire _25_;
  wire [31:0] _26_;
  wire [31:0] _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [31:0] _31_;
  wire _32_;
  wire _33_;
  input [31:0] a;
  input [31:0] b;
  output [31:0] c;
  output condtrue;
  input [3:0] funsel;
  output z;
  assign _00_ = a + b;
  assign _01_ = funsel == 4'h0;
  assign _02_ = a - b;
  assign _03_ = funsel == 4'h8;
  assign _04_ = a << { 26'h0000000, b[4:0] };
  assign _05_ = funsel == 4'h1;
  assign _06_ = $signed(a) < $signed(b);
  assign _07_ = _06_ ? 1'h1 : 1'h0;
  assign _08_ = funsel == 4'h2;
  assign _09_ = funsel == 4'ha;
  assign _10_ = _08_ | _09_;
  assign _11_ = a < b;
  assign _12_ = _11_ ? 1'h1 : 1'h0;
  assign _13_ = funsel == 4'h3;
  assign _14_ = funsel == 4'hb;
  assign _15_ = _13_ | _14_;
  assign _16_ = a ^ b;
  assign _17_ = funsel == 4'h4;
  assign _18_ = a >> { 26'h0000000, b[4:0] };
  assign _19_ = funsel == 4'h5;
  assign _20_ = $signed(a) >>> { 26'h0000000, b[4:0] };
  assign _21_ = funsel == 4'hd;
  assign _22_ = a | b;
  assign _23_ = funsel == 4'h6;
  assign _24_ = a & b;
  assign _25_ = funsel == 4'h7;
  assign _26_ = ~ a;
  assign _27_ = _26_ & b;
  assign _28_ = funsel == 4'hf;
  assign _29_ = funsel == 4'he;
  assign _30_ = funsel == 4'hc;
  function [31:0] \1255 ;
    input [31:0] a;
    input [415:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \1255  = b[31:0];
      13'b???????????1?:
        \1255  = b[63:32];
      13'b??????????1??:
        \1255  = b[95:64];
      13'b?????????1???:
        \1255  = b[127:96];
      13'b????????1????:
        \1255  = b[159:128];
      13'b???????1?????:
        \1255  = b[191:160];
      13'b??????1??????:
        \1255  = b[223:192];
      13'b?????1???????:
        \1255  = b[255:224];
      13'b????1????????:
        \1255  = b[287:256];
      13'b???1?????????:
        \1255  = b[319:288];
      13'b??1??????????:
        \1255  = b[351:320];
      13'b?1???????????:
        \1255  = b[383:352];
      13'b1????????????:
        \1255  = b[415:384];
      default:
        \1255  = a;
    endcase
  endfunction
  assign _31_ = \1255 (32'hxxxxxxxx, { a, b, _27_, _24_, _22_, _20_, _18_, _16_, 31'h00000000, _12_, 31'h00000000, _07_, _04_, _02_, _00_ }, { _30_, _29_, _28_, _25_, _23_, _21_, _19_, _17_, _15_, _10_, _05_, _03_, _01_ });
  assign _32_ = _31_ == 32'd0;
  assign _33_ = _32_ ? 1'h1 : 1'h0;
  assign c = _31_;
  assign z = _33_;
  assign condtrue = _31_[0];
endmodule

module controlunit(trap, wbtrap, id_opcode, id_funct3, id_funct7, alu_opcode, alu_funct3, alu_funct7, mem_opcode, mem_funct3, mem_funct7, wb_opcode, wb_funct3, pc_sel, a_sel, b_sel, wb_sel, imm_sel, alu_sel, regfile_wen, dmem_wen, csrfile_wen, csrfile_trap_wen, mret, ecall, ebreak, ill_op);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire [1:0] _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire [1:0] _38_;
  wire [1:0] _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire [1:0] _51_;
  wire [1:0] _52_;
  wire [2:0] _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire [3:0] _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire [3:0] _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire [3:0] _73_;
  wire _74_;
  wire [1:0] _75_;
  wire [3:0] _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  wire _88_;
  wire _89_;
  wire _90_;
  wire _91_;
  wire _92_;
  wire _93_;
  output [1:0] a_sel;
  input [2:0] alu_funct3;
  input [3:0] alu_funct7;
  input [6:0] alu_opcode;
  output [3:0] alu_sel;
  output [1:0] b_sel;
  output csrfile_trap_wen;
  output csrfile_wen;
  output dmem_wen;
  output ebreak;
  output ecall;
  input [2:0] id_funct3;
  input [3:0] id_funct7;
  input [6:0] id_opcode;
  output ill_op;
  output [2:0] imm_sel;
  input [2:0] mem_funct3;
  input [3:0] mem_funct7;
  input [6:0] mem_opcode;
  output mret;
  output [1:0] pc_sel;
  output regfile_wen;
  input trap;
  input [2:0] wb_funct3;
  input [6:0] wb_opcode;
  output [1:0] wb_sel;
  input wbtrap;
  function [0:0] \103 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \103  = b[0:0];
      3'b?1?:
        \103  = b[1:1];
      3'b1??:
        \103  = b[2:2];
      default:
        \103  = a;
    endcase
  endfunction
  assign _44_ = \103 (1'h0, 3'h1, { _43_, _42_, _41_ });
  function [0:0] \106 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \106  = b[0:0];
      3'b?1?:
        \106  = b[1:1];
      3'b1??:
        \106  = b[2:2];
      default:
        \106  = a;
    endcase
  endfunction
  assign _45_ = \106 (1'h0, 3'h2, { _43_, _42_, _41_ });
  function [0:0] \110 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \110  = b[0:0];
      3'b?1?:
        \110  = b[1:1];
      3'b1??:
        \110  = b[2:2];
      default:
        \110  = a;
    endcase
  endfunction
  assign _46_ = \110 (1'h1, 3'h0, { _43_, _42_, _41_ });
  assign _47_ = _40_ ? _44_ : 1'h0;
  assign _48_ = _40_ ? _45_ : 1'h0;
  assign _49_ = _40_ ? _46_ : 1'h0;
  assign _50_ = id_opcode == 7'h73;
  function [1:0] \134 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \134  = b[1:0];
      11'b?????????1?:
        \134  = b[3:2];
      11'b????????1??:
        \134  = b[5:4];
      11'b???????1???:
        \134  = b[7:6];
      11'b??????1????:
        \134  = b[9:8];
      11'b?????1?????:
        \134  = b[11:10];
      11'b????1??????:
        \134  = b[13:12];
      11'b???1???????:
        \134  = b[15:14];
      11'b??1????????:
        \134  = b[17:16];
      11'b?1?????????:
        \134  = b[19:18];
      11'b1??????????:
        \134  = b[21:20];
      default:
        \134  = a;
    endcase
  endfunction
  assign _51_ = \134 (2'hx, { _38_, 20'bxx000000000000xx01xx }, { _50_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_ });
  function [1:0] \146 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \146  = b[1:0];
      11'b?????????1?:
        \146  = b[3:2];
      11'b????????1??:
        \146  = b[5:4];
      11'b???????1???:
        \146  = b[7:6];
      11'b??????1????:
        \146  = b[9:8];
      11'b?????1?????:
        \146  = b[11:10];
      11'b????1??????:
        \146  = b[13:12];
      11'b???1???????:
        \146  = b[15:14];
      11'b??1????????:
        \146  = b[17:16];
      11'b?1?????????:
        \146  = b[19:18];
      11'b1??????????:
        \146  = b[21:20];
      default:
        \146  = a;
    endcase
  endfunction
  assign _52_ = \146 (2'hx, { _39_, 20'bxx000101010001xx0101 }, { _50_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_ });
  function [2:0] \159 ;
    input [2:0] a;
    input [32:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \159  = b[2:0];
      11'b?????????1?:
        \159  = b[5:3];
      11'b????????1??:
        \159  = b[8:6];
      11'b???????1???:
        \159  = b[11:9];
      11'b??????1????:
        \159  = b[14:12];
      11'b?????1?????:
        \159  = b[17:15];
      11'b????1??????:
        \159  = b[20:18];
      11'b???1???????:
        \159  = b[23:21];
      11'b??1????????:
        \159  = b[26:24];
      11'b?1?????????:
        \159  = b[29:27];
      11'b1??????????:
        \159  = b[32:30];
      default:
        \159  = a;
    endcase
  endfunction
  assign _53_ = \159 (3'hx, 33'b101xxxxxx000001000010000100011011, { _50_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_ });
  function [0:0] \171 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \171  = b[0:0];
      11'b?????????1?:
        \171  = b[1:1];
      11'b????????1??:
        \171  = b[2:2];
      11'b???????1???:
        \171  = b[3:3];
      11'b??????1????:
        \171  = b[4:4];
      11'b?????1?????:
        \171  = b[5:5];
      11'b????1??????:
        \171  = b[6:6];
      11'b???1???????:
        \171  = b[7:7];
      11'b??1????????:
        \171  = b[8:8];
      11'b?1?????????:
        \171  = b[9:9];
      11'b1??????????:
        \171  = b[10:10];
      default:
        \171  = a;
    endcase
  endfunction
  assign _54_ = \171 (1'h0, { _47_, 10'h000 }, { _50_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_ });
  function [0:0] \183 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \183  = b[0:0];
      11'b?????????1?:
        \183  = b[1:1];
      11'b????????1??:
        \183  = b[2:2];
      11'b???????1???:
        \183  = b[3:3];
      11'b??????1????:
        \183  = b[4:4];
      11'b?????1?????:
        \183  = b[5:5];
      11'b????1??????:
        \183  = b[6:6];
      11'b???1???????:
        \183  = b[7:7];
      11'b??1????????:
        \183  = b[8:8];
      11'b?1?????????:
        \183  = b[9:9];
      11'b1??????????:
        \183  = b[10:10];
      default:
        \183  = a;
    endcase
  endfunction
  assign _55_ = \183 (1'h0, { _48_, 10'h000 }, { _50_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_ });
  function [0:0] \195 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \195  = b[0:0];
      11'b?????????1?:
        \195  = b[1:1];
      11'b????????1??:
        \195  = b[2:2];
      11'b???????1???:
        \195  = b[3:3];
      11'b??????1????:
        \195  = b[4:4];
      11'b?????1?????:
        \195  = b[5:5];
      11'b????1??????:
        \195  = b[6:6];
      11'b???1???????:
        \195  = b[7:7];
      11'b??1????????:
        \195  = b[8:8];
      11'b?1?????????:
        \195  = b[9:9];
      11'b1??????????:
        \195  = b[10:10];
      default:
        \195  = a;
    endcase
  endfunction
  assign _56_ = \195 (1'h1, { _49_, 10'h000 }, { _50_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_ });
  assign _57_ = alu_opcode == 7'h37;
  assign _58_ = alu_opcode == 7'h17;
  assign _59_ = alu_opcode == 7'h6f;
  assign _60_ = alu_opcode == 7'h67;
  assign _61_ = alu_opcode == 7'h63;
  assign _62_ = alu_opcode == 7'h03;
  assign _63_ = alu_opcode == 7'h23;
  assign _64_ = alu_funct3 == 3'h5;
  assign _65_ = _64_ ? { alu_funct7[3], alu_funct3 } : { 1'h0, alu_funct3 };
  assign _66_ = alu_opcode == 7'h13;
  assign _67_ = alu_opcode == 7'h33;
  assign _68_ = alu_opcode == 7'h0f;
  assign _69_ = 4'hc | { 2'h0, alu_funct3[2], 1'h0 };
  assign _70_ = alu_funct3[1:0] == 2'h1;
  assign _71_ = alu_funct3[1:0] == 2'h2;
  assign _72_ = alu_funct3[1:0] == 2'h3;
  function [3:0] \248 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \248  = b[3:0];
      3'b?1?:
        \248  = b[7:4];
      3'b1??:
        \248  = b[11:8];
      default:
        \248  = a;
    endcase
  endfunction
  assign _73_ = \248 (4'hx, { 8'hf6, _69_ }, { _72_, _71_, _70_ });
  assign _74_ = alu_opcode == 7'h73;
  function [1:0] \264 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \264  = b[1:0];
      11'b?????????1?:
        \264  = b[3:2];
      11'b????????1??:
        \264  = b[5:4];
      11'b???????1???:
        \264  = b[7:6];
      11'b??????1????:
        \264  = b[9:8];
      11'b?????1?????:
        \264  = b[11:10];
      11'b????1??????:
        \264  = b[13:12];
      11'b???1???????:
        \264  = b[15:14];
      11'b??1????????:
        \264  = b[17:16];
      11'b?1?????????:
        \264  = b[19:18];
      11'b1??????????:
        \264  = b[21:20];
      default:
        \264  = a;
    endcase
  endfunction
  assign _75_ = \264 (2'h0, 22'h000090, { _74_, _68_, _67_, _66_, _63_, _62_, _61_, _60_, _59_, _58_, _57_ });
  function [3:0] \273 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \273  = b[3:0];
      11'b?????????1?:
        \273  = b[7:4];
      11'b????????1??:
        \273  = b[11:8];
      11'b???????1???:
        \273  = b[15:12];
      11'b??????1????:
        \273  = b[19:16];
      11'b?????1?????:
        \273  = b[23:20];
      11'b????1??????:
        \273  = b[27:24];
      11'b???1???????:
        \273  = b[31:28];
      11'b??1????????:
        \273  = b[35:32];
      11'b?1?????????:
        \273  = b[39:36];
      11'b1??????????:
        \273  = b[43:40];
      default:
        \273  = a;
    endcase
  endfunction
  assign _76_ = \273 (4'hx, { _73_, 4'hx, alu_funct7[3], alu_funct3, _65_, 10'h002, alu_funct3[2:1], 16'h0x0e }, { _74_, _68_, _67_, _66_, _63_, _62_, _61_, _60_, _59_, _58_, _57_ });
  assign _77_ = 1'h0 | mem_funct3[2];
  assign _78_ = _77_ | mem_funct3[1];
  assign _79_ = _78_ | mem_funct3[0];
  assign _80_ = mem_opcode == 7'h37;
  assign _81_ = mem_opcode == 7'h17;
  assign _82_ = mem_opcode == 7'h6f;
  assign _83_ = mem_opcode == 7'h67;
  assign _84_ = mem_opcode == 7'h63;
  assign _85_ = mem_opcode == 7'h03;
  assign _86_ = mem_opcode == 7'h23;
  assign _87_ = mem_opcode == 7'h13;
  assign _88_ = mem_opcode == 7'h33;
  assign _89_ = mem_opcode == 7'h0f;
  assign _90_ = ~ _79_;
  assign _91_ = mem_funct7[2:0] == 3'h6;
  assign _92_ = _90_ & _91_;
  assign _93_ = _92_ ? 1'h1 : 1'h0;
  assign _00_ = mem_opcode == 7'h73;
  function [0:0] \335 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \335  = b[0:0];
      11'b?????????1?:
        \335  = b[1:1];
      11'b????????1??:
        \335  = b[2:2];
      11'b???????1???:
        \335  = b[3:3];
      11'b??????1????:
        \335  = b[4:4];
      11'b?????1?????:
        \335  = b[5:5];
      11'b????1??????:
        \335  = b[6:6];
      11'b???1???????:
        \335  = b[7:7];
      11'b??1????????:
        \335  = b[8:8];
      11'b?1?????????:
        \335  = b[9:9];
      11'b1??????????:
        \335  = b[10:10];
      default:
        \335  = a;
    endcase
  endfunction
  assign _01_ = \335 (1'h0, 11'h040, { _00_, _89_, _88_, _87_, _86_, _85_, _84_, _83_, _82_, _81_, _80_ });
  function [0:0] \347 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \347  = b[0:0];
      11'b?????????1?:
        \347  = b[1:1];
      11'b????????1??:
        \347  = b[2:2];
      11'b???????1???:
        \347  = b[3:3];
      11'b??????1????:
        \347  = b[4:4];
      11'b?????1?????:
        \347  = b[5:5];
      11'b????1??????:
        \347  = b[6:6];
      11'b???1???????:
        \347  = b[7:7];
      11'b??1????????:
        \347  = b[8:8];
      11'b?1?????????:
        \347  = b[9:9];
      11'b1??????????:
        \347  = b[10:10];
      default:
        \347  = a;
    endcase
  endfunction
  assign _02_ = \347 (1'h0, { _79_, 10'h000 }, { _00_, _89_, _88_, _87_, _86_, _85_, _84_, _83_, _82_, _81_, _80_ });
  function [0:0] \359 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \359  = b[0:0];
      11'b?????????1?:
        \359  = b[1:1];
      11'b????????1??:
        \359  = b[2:2];
      11'b???????1???:
        \359  = b[3:3];
      11'b??????1????:
        \359  = b[4:4];
      11'b?????1?????:
        \359  = b[5:5];
      11'b????1??????:
        \359  = b[6:6];
      11'b???1???????:
        \359  = b[7:7];
      11'b??1????????:
        \359  = b[8:8];
      11'b?1?????????:
        \359  = b[9:9];
      11'b1??????????:
        \359  = b[10:10];
      default:
        \359  = a;
    endcase
  endfunction
  assign _03_ = \359 (1'h0, { _93_, 10'h000 }, { _00_, _89_, _88_, _87_, _86_, _85_, _84_, _83_, _82_, _81_, _80_ });
  assign _04_ = trap ? 1'h0 : _01_;
  assign _05_ = trap ? 1'h0 : _02_;
  assign _06_ = trap ? 1'h1 : 1'h0;
  assign _07_ = trap ? 1'h0 : _03_;
  assign _08_ = 1'h0 | wb_funct3[2];
  assign _09_ = _08_ | wb_funct3[1];
  assign _10_ = _09_ | wb_funct3[0];
  assign _11_ = wb_opcode == 7'h37;
  assign _12_ = wb_opcode == 7'h17;
  assign _13_ = wb_opcode == 7'h6f;
  assign _14_ = wb_opcode == 7'h67;
  assign _15_ = wb_opcode == 7'h63;
  assign _16_ = wb_opcode == 7'h03;
  assign _17_ = wb_opcode == 7'h23;
  assign _18_ = wb_opcode == 7'h13;
  assign _19_ = wb_opcode == 7'h33;
  assign _20_ = wb_opcode == 7'h0f;
  assign _21_ = wb_opcode == 7'h73;
  function [1:0] \422 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \422  = b[1:0];
      11'b?????????1?:
        \422  = b[3:2];
      11'b????????1??:
        \422  = b[5:4];
      11'b???????1???:
        \422  = b[7:6];
      11'b??????1????:
        \422  = b[9:8];
      11'b?????1?????:
        \422  = b[11:10];
      11'b????1??????:
        \422  = b[13:12];
      11'b???1???????:
        \422  = b[15:14];
      11'b??1????????:
        \422  = b[17:16];
      11'b?1?????????:
        \422  = b[19:18];
      11'b1??????????:
        \422  = b[21:20];
      default:
        \422  = a;
    endcase
  endfunction
  assign _22_ = \422 (2'hx, 22'b11xx0000xx01xx10100000, { _21_, _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_ });
  function [0:0] \434 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \434  = b[0:0];
      11'b?????????1?:
        \434  = b[1:1];
      11'b????????1??:
        \434  = b[2:2];
      11'b???????1???:
        \434  = b[3:3];
      11'b??????1????:
        \434  = b[4:4];
      11'b?????1?????:
        \434  = b[5:5];
      11'b????1??????:
        \434  = b[6:6];
      11'b???1???????:
        \434  = b[7:7];
      11'b??1????????:
        \434  = b[8:8];
      11'b?1?????????:
        \434  = b[9:9];
      11'b1??????????:
        \434  = b[10:10];
      default:
        \434  = a;
    endcase
  endfunction
  assign _23_ = \434 (1'h0, { _10_, 10'h1af }, { _21_, _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_ });
  assign _24_ = wbtrap ? 1'h0 : _23_;
  assign _25_ = 1'h0 | id_funct3[2];
  assign _26_ = _25_ | id_funct3[1];
  assign _27_ = _26_ | id_funct3[0];
  assign _28_ = id_opcode == 7'h37;
  assign _29_ = id_opcode == 7'h17;
  assign _30_ = id_opcode == 7'h6f;
  assign _31_ = id_opcode == 7'h67;
  assign _32_ = id_opcode == 7'h63;
  assign _33_ = id_opcode == 7'h03;
  assign _34_ = id_opcode == 7'h23;
  assign _35_ = id_opcode == 7'h13;
  assign _36_ = id_opcode == 7'h33;
  assign _37_ = id_opcode == 7'h0f;
  assign _38_ = id_funct3[2] ? 2'h2 : 2'h0;
  assign _39_ = id_funct3[2] ? 2'h1 : 2'h2;
  assign _40_ = ~ _27_;
  assign _41_ = id_funct7[2:0] == 3'h0;
  assign _42_ = id_funct7[2:0] == 3'h1;
  assign _43_ = id_funct7[2:0] == 3'h6;
  assign pc_sel = _75_;
  assign a_sel = _51_;
  assign b_sel = _52_;
  assign wb_sel = _22_;
  assign imm_sel = _53_;
  assign alu_sel = _76_;
  assign regfile_wen = _24_;
  assign dmem_wen = _04_;
  assign csrfile_wen = _05_;
  assign csrfile_trap_wen = _06_;
  assign mret = _07_;
  assign ecall = _54_;
  assign ebreak = _55_;
  assign ill_op = _56_;
endmodule

module csrfile_32(clk, extern_irq, csr_mepc, csr_wdata, csr_mcause, csr_raddr, csr_waddr, csr_wen, csr_wen_traps, csr_ret, csr_irq, csr_pcaddr, csr_data);
  wire _00_;
  wire _01_;
  wire _02_;
  wire [31:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [29:0] _25_;
  wire [29:0] _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [31:0] _31_;
  wire [31:0] _32_;
  wire _33_;
  wire _34_;
  wire [1:0] _35_;
  wire [1:0] _36_;
  wire [1:0] _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire [31:0] _45_;
  input clk;
  output [31:0] csr_data;
  output csr_irq;
  input [3:0] csr_mcause;
  input [31:0] csr_mepc;
  output [31:0] csr_pcaddr;
  input [11:0] csr_raddr;
  input csr_ret;
  input [11:0] csr_waddr;
  input [31:0] csr_wdata;
  input csr_wen;
  input csr_wen_traps;
  input extern_irq;
  wire irq;
  reg [31:0] mcause;
  reg [29:0] mepc;
  reg meta_irq = 1'h0;
  reg mie = 1'h0;
  reg mip = 1'h0;
  reg [1:0] mstatus = 2'h0;
  reg [31:0] mvect;
  wire [31:0] \trap_addr.mvect_out ;
  wire [31:0] \trap_addr.pcaddr ;
  assign _00_ = mstatus[0] & mip;
  assign irq = _00_ & mie;
  assign _01_ = irq & mvect[0];
  assign _02_ = _01_ == 1'h0;
  assign _03_ = { mvect[31:2], 2'h0 } + 32'd44;
  assign _04_ = _01_ == 1'h1;
  function [31:0] \1042 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1042  = b[31:0];
      2'b1?:
        \1042  = b[63:32];
      default:
        \1042  = a;
    endcase
  endfunction
  assign \trap_addr.mvect_out  = \1042 (\trap_addr.mvect_out , { _03_, mvect[31:2], 2'h0 }, { _04_, _02_ });
  assign _05_ = csr_ret == 1'h1;
  assign _06_ = csr_ret == 1'h0;
  function [31:0] \1050 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1050  = b[31:0];
      2'b1?:
        \1050  = b[63:32];
      default:
        \1050  = a;
    endcase
  endfunction
  assign \trap_addr.pcaddr  = \1050 (\trap_addr.pcaddr , { \trap_addr.mvect_out , mepc, 2'h0 }, { _06_, _05_ });
  assign _07_ = csr_waddr == 12'h305;
  assign _08_ = csr_wen & _07_;
  assign _09_ = csr_ret != 1'h1;
  assign _10_ = _08_ & _09_;
  assign _11_ = csr_wen_traps != 1'h1;
  assign _12_ = _10_ & _11_;
  assign _13_ = _12_ ? csr_wdata : mvect;
  always @(posedge clk)
    mvect <= _13_;
  assign _14_ = csr_waddr == 12'h304;
  assign _15_ = csr_wen & _14_;
  assign _16_ = csr_ret != 1'h1;
  assign _17_ = _15_ & _16_;
  assign _18_ = csr_wen_traps != 1'h1;
  assign _19_ = _17_ & _18_;
  assign _20_ = _19_ ? csr_wdata[11] : mie;
  always @(posedge clk)
    mie <= _20_;
  always @(posedge clk)
    mip <= meta_irq;
  always @(posedge clk)
    meta_irq <= extern_irq;
  assign _21_ = csr_waddr == 12'h341;
  assign _22_ = csr_wen & _21_;
  assign _23_ = csr_ret != 1'h1;
  assign _24_ = _22_ & _23_;
  assign _25_ = _24_ ? csr_wdata[31:2] : mepc;
  assign _26_ = csr_wen_traps ? csr_mepc[31:2] : _25_;
  always @(posedge clk)
    mepc <= _26_;
  assign _27_ = csr_waddr == 12'h342;
  assign _28_ = csr_wen & _27_;
  assign _29_ = csr_ret != 1'h1;
  assign _30_ = _28_ & _29_;
  assign _31_ = _30_ ? { 1'h0, csr_wdata[30:0] } : mcause;
  assign _32_ = csr_wen_traps ? { irq, 27'h0000000, csr_mcause } : _31_;
  always @(posedge clk)
    mcause <= _32_;
  assign _33_ = csr_waddr == 12'h300;
  assign _34_ = csr_wen & _33_;
  assign _35_ = _34_ ? { csr_wdata[7], csr_wdata[3] } : mstatus;
  assign _36_ = csr_ret ? { 1'h1, mstatus[1] } : _35_;
  assign _37_ = csr_wen_traps ? { mstatus[0], 1'h0 } : _36_;
  always @(posedge clk)
    mstatus <= _37_;
  assign _38_ = csr_raddr == 12'h342;
  assign _39_ = csr_raddr == 12'h300;
  assign _40_ = csr_raddr == 12'h305;
  assign _41_ = csr_raddr == 12'h301;
  assign _42_ = csr_raddr == 12'h341;
  assign _43_ = csr_raddr == 12'h304;
  assign _44_ = csr_raddr == 12'h344;
  function [31:0] \1184 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \1184  = b[31:0];
      7'b?????1?:
        \1184  = b[63:32];
      7'b????1??:
        \1184  = b[95:64];
      7'b???1???:
        \1184  = b[127:96];
      7'b??1????:
        \1184  = b[159:128];
      7'b?1?????:
        \1184  = b[191:160];
      7'b1??????:
        \1184  = b[223:192];
      default:
        \1184  = a;
    endcase
  endfunction
  assign _45_ = \1184 (32'd0, { 20'h00000, mip, 31'h00000000, mie, 11'h000, mepc, 34'h040000100, mvect, 24'h000018, mstatus[1], 3'h0, mstatus[0], 3'h0, mcause }, { _44_, _43_, _42_, _41_, _40_, _39_, _38_ });
  assign csr_irq = irq;
  assign csr_pcaddr = \trap_addr.pcaddr ;
  assign csr_data = _45_;
endmodule

module datapath_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa(clk, stall, extern_irq, imem_instruction, dmem_dataload, pc_sel, a_sel, b_sel, wb_sel, imm_sel, alu_sel, regfile_wen, csrfile_wen, csrfile_trap_wen, mret, ecall, ebreak, ill_op, imem_addr, dmem_addr, dmem_datastore, trap, wbtrap, id_opcode, id_funct3, id_funct7, alu_opcode, alu_funct3, alu_funct7, mem_opcode, mem_funct3, mem_funct7, wb_opcode, wb_funct3);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire [31:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire [3:0] _58_;
  wire [3:0] _59_;
  wire [3:0] _60_;
  wire [3:0] _61_;
  wire [3:0] _62_;
  wire [3:0] _63_;
  input [1:0] a_sel;
  wire allowcsrwrite;
  output [2:0] alu_funct3;
  output [3:0] alu_funct7;
  output [6:0] alu_opcode;
  input [3:0] alu_sel;
  reg [2:0] aluexecptions = 3'h0;
  reg [31:0] aluinstr = 32'd19;
  reg [31:0] alupc;
  reg [31:0] alupc_4;
  wire [31:0] aluresult;
  wire any_except;
  input [1:0] b_sel;
  input clk;
  wire condt;
  wire [31:0] csrdata;
  input csrfile_trap_wen;
  input csrfile_wen;
  wire [31:0] csrpc;
  wire [31:0] currentpc;
  output [31:0] dmem_addr;
  input [31:0] dmem_dataload;
  output [31:0] dmem_datastore;
  input ebreak;
  input ecall;
  wire [3:0] excpt_cause;
  input extern_irq;
  output [2:0] id_funct3;
  output [3:0] id_funct7;
  output [6:0] id_opcode;
  reg [31:0] idinstr = 32'd19;
  reg [31:0] idpc;
  reg [31:0] idpc_4;
  input ill_op;
  output [31:0] imem_addr;
  input [31:0] imem_instruction;
  wire [31:0] imm;
  input [2:0] imm_sel;
  wire instrmisalig;
  wire irq;
  wire isbranch;
  wire [31:0] jumptarget;
  wire loadmisalig;
  output [2:0] mem_funct3;
  output [3:0] mem_funct7;
  output [6:0] mem_opcode;
  wire [31:0] memdataload;
  reg [2:0] memexecptions = 3'h0;
  reg [31:0] meminstr = 32'd19;
  reg [31:0] mempc;
  reg [31:0] mempc_4;
  input mret;
  wire [31:0] muxaval;
  wire [31:0] muxbval;
  wire [31:0] nextpc;
  input [1:0] pc_sel;
  wire [31:0] rd;
  reg [31:0] rega;
  reg [31:0] regb;
  reg [31:0] regcmem;
  reg [31:0] regcsralu;
  reg [31:0] regcsrmem;
  reg [31:0] regcsrwb;
  reg [31:0] regcwb;
  input regfile_wen;
  reg [31:0] regimmalu;
  reg regisbranch = 1'h0;
  reg [1:0] regjmpalign;
  reg [31:0] regloadwb;
  reg [31:0] regrs2alu;
  reg [31:0] regrs2mem;
  reg regtkbranch = 1'h0;
  reg regwbtrap = 1'h0;
  wire [31:0] rs1;
  wire [31:0] rs2;
  input stall;
  wire storemisalig;
  wire tkbranch;
  output trap;
  wire trap_wrap;
  output [2:0] wb_funct3;
  output [6:0] wb_opcode;
  input [1:0] wb_sel;
  reg [31:0] wbinstr = 32'd19;
  reg [31:0] wbpc_4;
  output wbtrap;
  wire zero;
  assign _02_ = ~ stall;
  assign _03_ = _02_ ? currentpc : idpc;
  always @(posedge clk)
    idpc <= _03_;
  assign _04_ = _02_ ? nextpc : idpc_4;
  always @(posedge clk)
    idpc_4 <= _04_;
  assign _05_ = _02_ ? imem_instruction : idinstr;
  always @(posedge clk)
    idinstr <= _05_;
  assign _06_ = a_sel == 2'h0;
  assign _07_ = a_sel == 2'h2;
  assign _08_ = a_sel == 2'h1;
  function [31:0] \508 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \508  = b[31:0];
      3'b?1?:
        \508  = b[63:32];
      3'b1??:
        \508  = b[95:64];
      default:
        \508  = a;
    endcase
  endfunction
  assign muxaval = \508 (32'hxxxxxxxx, { idpc, csrdata, rs1 }, { _08_, _07_, _06_ });
  assign _09_ = b_sel == 2'h0;
  assign _10_ = b_sel == 2'h2;
  assign _11_ = b_sel == 2'h1;
  function [31:0] \519 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \519  = b[31:0];
      3'b?1?:
        \519  = b[63:32];
      3'b1??:
        \519  = b[95:64];
      default:
        \519  = a;
    endcase
  endfunction
  assign muxbval = \519 (32'hxxxxxxxx, { imm, csrdata, rs2 }, { _11_, _10_, _09_ });
  always @(posedge clk)
    alupc <= idpc;
  always @(posedge clk)
    alupc_4 <= idpc_4;
  always @(posedge clk)
    aluinstr <= idinstr;
  always @(posedge clk)
    aluexecptions <= { ecall, ebreak, ill_op };
  always @(posedge clk)
    rega <= muxaval;
  always @(posedge clk)
    regb <= muxbval;
  always @(posedge clk)
    regrs2alu <= rs2;
  always @(posedge clk)
    regcsralu <= csrdata;
  always @(posedge clk)
    regimmalu <= imm;
  assign jumptarget = alupc + regimmalu;
  assign _12_ = aluinstr[6:0] == 7'h63;
  assign isbranch = _12_ ? 1'h1 : 1'h0;
  assign _13_ = { aluinstr[14], aluinstr[12] } == 2'h0;
  assign _14_ = ~ zero;
  assign _15_ = { aluinstr[14], aluinstr[12] } == 2'h1;
  assign _16_ = { aluinstr[14], aluinstr[12] } == 2'h2;
  assign _17_ = ~ condt;
  assign _18_ = { aluinstr[14], aluinstr[12] } == 2'h3;
  function [0:0] \576 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \576  = b[0:0];
      4'b??1?:
        \576  = b[1:1];
      4'b?1??:
        \576  = b[2:2];
      4'b1???:
        \576  = b[3:3];
      default:
        \576  = a;
    endcase
  endfunction
  assign tkbranch = \576 (tkbranch, { _17_, condt, _14_, zero }, { _18_, _16_, _15_, _13_ });
  always @(posedge clk)
    mempc <= alupc;
  always @(posedge clk)
    mempc_4 <= alupc_4;
  always @(posedge clk)
    meminstr <= aluinstr;
  always @(posedge clk)
    memexecptions <= aluexecptions;
  always @(posedge clk)
    regisbranch <= isbranch;
  always @(posedge clk)
    regtkbranch <= tkbranch;
  always @(posedge clk)
    regjmpalign <= jumptarget[1:0];
  always @(posedge clk)
    regcmem <= aluresult;
  always @(posedge clk)
    regrs2mem <= regrs2alu;
  always @(posedge clk)
    regcsrmem <= regcsralu;
  assign _19_ = 1'h0 | meminstr[19];
  assign _20_ = _19_ | meminstr[18];
  assign _21_ = _20_ | meminstr[17];
  assign _22_ = _21_ | meminstr[16];
  assign _23_ = _22_ | meminstr[15];
  assign _24_ = ~ _23_;
  assign _25_ = _24_ & meminstr[13];
  assign _26_ = ~ _25_;
  assign allowcsrwrite = csrfile_wen & _26_;
  always @(posedge clk)
    wbpc_4 <= mempc_4;
  always @(posedge clk)
    wbinstr <= meminstr;
  always @(posedge clk)
    regwbtrap <= trap_wrap;
  always @(posedge clk)
    regcwb <= regcmem;
  always @(posedge clk)
    regloadwb <= memdataload;
  always @(posedge clk)
    regcsrwb <= regcsrmem;
  assign _27_ = wb_sel == 2'h0;
  assign _28_ = wb_sel == 2'h1;
  assign _29_ = wb_sel == 2'h2;
  assign _30_ = wb_sel == 2'h3;
  function [31:0] \665 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \665  = b[31:0];
      4'b??1?:
        \665  = b[63:32];
      4'b?1??:
        \665  = b[95:64];
      4'b1???:
        \665  = b[127:96];
      default:
        \665  = a;
    endcase
  endfunction
  assign rd = \665 (rd, { regcsrwb, wbpc_4, regloadwb, regcwb }, { _30_, _29_, _28_, _27_ });
  assign _31_ = pc_sel[0] | trap_wrap;
  assign _32_ = isbranch & tkbranch;
  assign _33_ = _31_ | _32_;
  assign _34_ = _33_ | mret;
  assign _35_ = pc_sel[1] | trap_wrap;
  assign _36_ = _35_ | mret;
  assign _37_ = loadmisalig | storemisalig;
  assign any_except = _37_ | instrmisalig;
  assign _38_ = irq | any_except;
  assign _39_ = memexecptions[1] | memexecptions[2];
  assign _40_ = _39_ | memexecptions[0];
  assign trap_wrap = _38_ | _40_;
  assign _41_ = meminstr[6:0] == 7'h6f;
  assign _42_ = _41_ ? 1'h1 : 1'h0;
  assign _43_ = meminstr[6:0] == 7'h67;
  assign _44_ = _43_ ? 1'h1 : 1'h0;
  assign _45_ = regjmpalign[0] | regjmpalign[1];
  assign _46_ = _44_ & regcmem[1];
  assign _47_ = regisbranch & regtkbranch;
  assign _48_ = _47_ | _42_;
  assign _49_ = _45_ & _48_;
  assign instrmisalig = _46_ | _49_;
  assign _50_ = regcmem[1] | regcmem[0];
  assign _51_ = meminstr[6:0] == 7'h23;
  assign _52_ = _51_ ? 1'h1 : 1'h0;
  assign _53_ = meminstr[6:0] == 7'h03;
  assign _54_ = _53_ ? 1'h1 : 1'h0;
  assign _55_ = meminstr[13] & _50_;
  assign _56_ = meminstr[12] & regcmem[1];
  assign _57_ = _55_ | _56_;
  assign storemisalig = _52_ & _57_;
  assign loadmisalig = _54_ & _57_;
  assign _58_ = loadmisalig ? 4'h4 : 4'hx;
  assign _59_ = storemisalig ? 4'h6 : _58_;
  assign _60_ = memexecptions[2] ? 4'hb : _59_;
  assign _61_ = memexecptions[0] ? 4'h2 : _60_;
  assign _62_ = instrmisalig ? 4'h0 : _61_;
  assign _63_ = memexecptions[1] ? 4'h3 : _62_;
  assign excpt_cause = irq ? 4'hb : _63_;
  alu_32 alu (
    .a(rega),
    .b(regb),
    .c(aluresult),
    .condtrue(condt),
    .funsel(alu_sel),
    .z(zero)
  );
  csrfile_32 csr (
    .clk(clk),
    .csr_data(csrdata),
    .csr_irq(irq),
    .csr_mcause(excpt_cause),
    .csr_mepc(mempc),
    .csr_pcaddr(csrpc),
    .csr_raddr(idinstr[31:20]),
    .csr_ret(mret),
    .csr_waddr(meminstr[31:20]),
    .csr_wdata(regcsrmem),
    .csr_wen(allowcsrwrite),
    .csr_wen_traps(csrfile_trap_wen),
    .extern_irq(extern_irq)
  );
  immdecoder_32 immediatedecoder (
    .imm_sel(imm_sel),
    .immediate(imm),
    .instruction(idinstr[31:7])
  );
  meminterface_32 memoryinterface (
    .data_load(memdataload),
    .data_store(regrs2mem),
    .extern_data_load(dmem_dataload),
    .extern_data_store(_00_),
    .extern_mem_addr(_01_),
    .mem_addr(regcmem),
    .mem_size(meminstr[14:12])
  );
  programcounter_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa programcounter (
    .clk(clk),
    .current_addr(currentpc),
    .except_addr(csrpc),
    .jalr({ aluresult[31:1], 1'h0 }),
    .jumps(jumptarget),
    .next_addr(nextpc),
    .pc_sel({ _36_, _34_ }),
    .stall(stall)
  );
  registerfile_32 registers (
    .clk(clk),
    .rega_addr(idinstr[19:15]),
    .rega_data(rs1),
    .regb_addr(idinstr[24:20]),
    .regb_data(rs2),
    .w_addr(wbinstr[11:7]),
    .w_data(rd),
    .w_en(regfile_wen)
  );
  assign imem_addr = currentpc;
  assign dmem_addr = _01_;
  assign dmem_datastore = _00_;
  assign trap = trap_wrap;
  assign wbtrap = regwbtrap;
  assign id_opcode = idinstr[6:0];
  assign id_funct3 = idinstr[14:12];
  assign id_funct7 = { idinstr[30:29], idinstr[21:20] };
  assign alu_opcode = aluinstr[6:0];
  assign alu_funct3 = aluinstr[14:12];
  assign alu_funct7 = { aluinstr[30:29], aluinstr[21:20] };
  assign mem_opcode = meminstr[6:0];
  assign mem_funct3 = meminstr[14:12];
  assign mem_funct7 = { meminstr[30:29], meminstr[21:20] };
  assign wb_opcode = wbinstr[6:0];
  assign wb_funct3 = wbinstr[14:12];
endmodule

module immdecoder_32(instruction, imm_sel, immediate);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [3:0] _07_;
  wire [5:0] _08_;
  wire _09_;
  wire [7:0] _10_;
  wire [10:0] _11_;
  wire _12_;
  input [2:0] imm_sel;
  output [31:0] immediate;
  input [24:0] instruction;
  function [10:0] \1004 ;
    input [10:0] a;
    input [65:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1004  = b[10:0];
      6'b????1?:
        \1004  = b[21:11];
      6'b???1??:
        \1004  = b[32:22];
      6'b??1???:
        \1004  = b[43:33];
      6'b?1????:
        \1004  = b[54:44];
      6'b1?????:
        \1004  = b[65:55];
      default:
        \1004  = a;
    endcase
  endfunction
  assign _11_ = \1004 (11'hxxx, { 11'h000, instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24:13], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [0:0] \1011 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1011  = b[0:0];
      6'b????1?:
        \1011  = b[1:1];
      6'b???1??:
        \1011  = b[2:2];
      6'b??1???:
        \1011  = b[3:3];
      6'b?1????:
        \1011  = b[4:4];
      6'b1?????:
        \1011  = b[5:5];
      default:
        \1011  = a;
    endcase
  endfunction
  assign _12_ = \1011 (1'hx, { 1'h0, instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  assign _00_ = imm_sel == 3'h0;
  assign _01_ = imm_sel == 3'h1;
  assign _02_ = imm_sel == 3'h2;
  assign _03_ = imm_sel == 3'h3;
  assign _04_ = imm_sel == 3'h4;
  assign _05_ = imm_sel == 3'h5;
  function [0:0] \970 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \970  = b[0:0];
      6'b????1?:
        \970  = b[1:1];
      6'b???1??:
        \970  = b[2:2];
      6'b??1???:
        \970  = b[3:3];
      6'b?1????:
        \970  = b[4:4];
      6'b1?????:
        \970  = b[5:5];
      default:
        \970  = a;
    endcase
  endfunction
  assign _06_ = \970 (1'hx, { instruction[8], 3'h0, instruction[0], instruction[13] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [3:0] \977 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \977  = b[3:0];
      6'b????1?:
        \977  = b[7:4];
      6'b???1??:
        \977  = b[11:8];
      6'b??1???:
        \977  = b[15:12];
      6'b?1????:
        \977  = b[19:16];
      6'b1?????:
        \977  = b[23:20];
      default:
        \977  = a;
    endcase
  endfunction
  assign _07_ = \977 (4'hx, { instruction[12:9], instruction[17:14], 4'h0, instruction[4:1], instruction[4:1], instruction[17:14] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [5:0] \983 ;
    input [5:0] a;
    input [35:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \983  = b[5:0];
      6'b????1?:
        \983  = b[11:6];
      6'b???1??:
        \983  = b[17:12];
      6'b??1???:
        \983  = b[23:18];
      6'b?1????:
        \983  = b[29:24];
      6'b1?????:
        \983  = b[35:30];
      default:
        \983  = a;
    endcase
  endfunction
  assign _08_ = \983 (6'hxx, { 6'h00, instruction[23:18], 6'h00, instruction[23:18], instruction[23:18], instruction[23:18] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [0:0] \989 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \989  = b[0:0];
      6'b????1?:
        \989  = b[1:1];
      6'b???1??:
        \989  = b[2:2];
      6'b??1???:
        \989  = b[3:3];
      6'b?1????:
        \989  = b[4:4];
      6'b1?????:
        \989  = b[5:5];
      default:
        \989  = a;
    endcase
  endfunction
  assign _09_ = \989 (1'hx, { 1'h0, instruction[13], 1'h0, instruction[0], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [7:0] \996 ;
    input [7:0] a;
    input [47:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \996  = b[7:0];
      6'b????1?:
        \996  = b[15:8];
      6'b???1??:
        \996  = b[23:16];
      6'b??1???:
        \996  = b[31:24];
      6'b?1????:
        \996  = b[39:32];
      6'b1?????:
        \996  = b[47:40];
      default:
        \996  = a;
    endcase
  endfunction
  assign _10_ = \996 (8'hxx, { 8'h00, instruction[12:5], instruction[12:5], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  assign immediate = { _12_, _11_, _10_, _09_, _08_, _07_, _06_ };
endmodule

module meminterface_32(extern_data_load, data_store, mem_addr, mem_size, extern_data_store, extern_mem_addr, data_load);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire [31:0] _23_;
  wire [7:0] \byte_size_load.byteval ;
  wire [23:0] \byte_size_load.extension ;
  wire [31:0] \byte_size_store.storebyte ;
  output [31:0] data_load;
  input [31:0] data_store;
  input [31:0] extern_data_load;
  output [31:0] extern_data_store;
  output [31:0] extern_mem_addr;
  wire [15:0] \halfword_size_load.extension ;
  wire [15:0] \halfword_size_load.halfwordval ;
  wire [31:0] \halfword_size_store.storehalfw ;
  input [31:0] mem_addr;
  input [2:0] mem_size;
  assign _00_ = mem_addr[1:0] == 2'h0;
  assign _01_ = mem_addr[1:0] == 2'h1;
  assign _02_ = mem_addr[1:0] == 2'h2;
  assign _03_ = mem_addr[1:0] == 2'h3;
  function [7:0] \1285 ;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1285  = b[7:0];
      4'b??1?:
        \1285  = b[15:8];
      4'b?1??:
        \1285  = b[23:16];
      4'b1???:
        \1285  = b[31:24];
      default:
        \1285  = a;
    endcase
  endfunction
  assign \byte_size_load.byteval  = \1285 (\byte_size_load.byteval , extern_data_load, { _03_, _02_, _01_, _00_ });
  assign _04_ = mem_size[2] == 1'h0;
  assign _05_ = mem_size[2] == 1'h1;
  function [23:0] \1326 ;
    input [23:0] a;
    input [47:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1326  = b[23:0];
      2'b1?:
        \1326  = b[47:24];
      default:
        \1326  = a;
    endcase
  endfunction
  assign \byte_size_load.extension  = \1326 (\byte_size_load.extension , { 24'h000000, \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7] }, { _05_, _04_ });
  assign _06_ = mem_addr[1] == 1'h0;
  assign _07_ = mem_addr[1] == 1'h1;
  function [15:0] \1340 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1340  = b[15:0];
      2'b1?:
        \1340  = b[31:16];
      default:
        \1340  = a;
    endcase
  endfunction
  assign \halfword_size_load.halfwordval  = \1340 (\halfword_size_load.halfwordval , extern_data_load, { _07_, _06_ });
  assign _08_ = mem_size[2] == 1'h0;
  assign _09_ = mem_size[2] == 1'h1;
  function [15:0] \1369 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1369  = b[15:0];
      2'b1?:
        \1369  = b[31:16];
      default:
        \1369  = a;
    endcase
  endfunction
  assign \halfword_size_load.extension  = \1369 (\halfword_size_load.extension , { 16'h0000, \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15] }, { _09_, _08_ });
  assign _10_ = mem_size[1:0] == 2'h0;
  assign _11_ = mem_size[1:0] == 2'h1;
  assign _12_ = mem_size[1:0] == 2'h2;
  function [31:0] \1382 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \1382  = b[31:0];
      3'b?1?:
        \1382  = b[63:32];
      3'b1??:
        \1382  = b[95:64];
      default:
        \1382  = a;
    endcase
  endfunction
  assign _13_ = \1382 (32'hxxxxxxxx, { extern_data_load, \halfword_size_load.extension , \halfword_size_load.halfwordval , \byte_size_load.extension , \byte_size_load.byteval  }, { _12_, _11_, _10_ });
  assign _14_ = mem_addr[1:0] == 2'h0;
  assign _15_ = mem_addr[1:0] == 2'h1;
  assign _16_ = mem_addr[1:0] == 2'h2;
  assign _17_ = mem_addr[1:0] == 2'h3;
  function [31:0] \1412 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1412  = b[31:0];
      4'b??1?:
        \1412  = b[63:32];
      4'b?1??:
        \1412  = b[95:64];
      4'b1???:
        \1412  = b[127:96];
      default:
        \1412  = a;
    endcase
  endfunction
  assign \byte_size_store.storebyte  = \1412 (\byte_size_store.storebyte , { data_store[7:0], extern_data_load[23:0], extern_data_load[31:24], data_store[7:0], extern_data_load[15:0], extern_data_load[31:16], data_store[7:0], extern_data_load[7:0], extern_data_load[31:8], data_store[7:0] }, { _17_, _16_, _15_, _14_ });
  assign _18_ = mem_addr[1] == 1'h1;
  assign _19_ = mem_addr[1] == 1'h0;
  function [31:0] \1428 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1428  = b[31:0];
      2'b1?:
        \1428  = b[63:32];
      default:
        \1428  = a;
    endcase
  endfunction
  assign \halfword_size_store.storehalfw  = \1428 (\halfword_size_store.storehalfw , { extern_data_load[31:16], data_store[15:0], data_store[15:0], extern_data_load[15:0] }, { _19_, _18_ });
  assign _20_ = mem_size[1:0] == 2'h0;
  assign _21_ = mem_size[1:0] == 2'h1;
  assign _22_ = mem_size[1:0] == 2'h2;
  function [31:0] \1440 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \1440  = b[31:0];
      3'b?1?:
        \1440  = b[63:32];
      3'b1??:
        \1440  = b[95:64];
      default:
        \1440  = a;
    endcase
  endfunction
  assign _23_ = \1440 (32'hxxxxxxxx, { data_store, \halfword_size_store.storehalfw , \byte_size_store.storebyte  }, { _22_, _21_, _20_ });
  assign extern_data_store = _23_;
  assign extern_mem_addr = mem_addr;
  assign data_load = _13_;
endmodule

module programcounter_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa(clk, jumps, except_addr, jalr, pc_sel, stall, current_addr, next_addr);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input clk;
  output [31:0] current_addr;
  input [31:0] except_addr;
  input [31:0] jalr;
  input [31:0] jumps;
  output [31:0] next_addr;
  wire [31:0] next_instruction;
  reg [31:0] pc = 32'd32;
  wire [31:0] pc_mux;
  input [1:0] pc_sel;
  input stall;
  assign _0_ = stall != 1'h1;
  assign _1_ = _0_ ? pc_mux : pc;
  always @(posedge clk)
    pc <= _1_;
  assign _2_ = pc_sel == 2'h1;
  assign _3_ = pc_sel == 2'h3;
  assign _4_ = pc_sel == 2'h0;
  assign _5_ = pc_sel == 2'h2;
  function [31:0] \783 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \783  = b[31:0];
      4'b??1?:
        \783  = b[63:32];
      4'b?1??:
        \783  = b[95:64];
      4'b1???:
        \783  = b[127:96];
      default:
        \783  = a;
    endcase
  endfunction
  assign pc_mux = \783 (pc_mux, { jalr, next_instruction, except_addr, jumps }, { _5_, _4_, _3_, _2_ });
  assign next_instruction = pc + 32'd4;
  assign current_addr = pc;
  assign next_addr = next_instruction;
endmodule

module registerfile_32(clk, rega_addr, regb_addr, w_data, w_addr, w_en, rega_data, regb_data);
  wire _0_;
  wire _1_;
  wire _2_;
  wire [31:0] _3_;
  wire _4_;
  wire [31:0] _5_;
  wire [1023:0] _6_;
  wire [31:0] _7_;
  wire [1023:0] _8_;
  wire [31:0] _9_;
  input clk;
  input [4:0] rega_addr;
  output [31:0] rega_data;
  input [4:0] regb_addr;
  output [31:0] regb_data;
  input [4:0] w_addr;
  input [31:0] w_data;
  input w_en;
  reg [31:0] \$mem$\828  [31:0];
  assign _0_ = w_addr != 5'h00;
  assign _1_ = _0_ & w_en;
  assign _2_ = rega_addr == 5'h00;
  assign _3_ = _2_ ? 32'd0 : _9_;
  assign _4_ = regb_addr == 5'h00;
  assign _5_ = _4_ ? 32'd0 : _7_;
  reg [31:0] \828  [31:0];
  always @(posedge clk) begin
    if (_1_) \828 [w_addr] <= w_data;
  end
  assign _7_ = \828 [regb_addr];
  assign _9_ = \828 [rega_addr];
  assign rega_data = _3_;
  assign regb_data = _5_;
endmodule
