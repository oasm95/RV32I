/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module RISCV32I(CLK, IRQ, IMEM_DATA, DMEM_DATA_L, IMEM_ADDR, DMEM_ADDR, DMEM_DATA_S, DMEM_WEN);
  wire [31:0] _0_;
  wire [31:0] _1_;
  wire [31:0] _2_;
  input CLK;
  output [31:0] DMEM_ADDR;
  input [31:0] DMEM_DATA_L;
  output [31:0] DMEM_DATA_S;
  output DMEM_WEN;
  output [31:0] IMEM_ADDR;
  input [31:0] IMEM_DATA;
  input IRQ;
  wire [2:0] abpsel;
  wire [2:0] alufunct3;
  wire [3:0] alufunct7;
  wire [6:0] aluopcode;
  wire [3:0] alusel;
  wire [1:0] asel;
  wire [2:0] bbpsel;
  wire branch;
  wire [1:0] bsel;
  wire csrwen;
  wire ebreak;
  wire ecall;
  wire flushalu;
  wire flushid;
  wire flushmem;
  wire flushwb;
  wire [2:0] idfunct3;
  wire [3:0] idfunct7;
  wire [6:0] idopcode;
  wire illop;
  wire [2:0] immsel;
  wire [2:0] memfunct3;
  wire [3:0] memfunct7;
  wire [6:0] memopcode;
  wire memwen;
  wire mret;
  wire [1:0] pcsel;
  wire [4:0] ra_id;
  wire [4:0] rb_id;
  wire [4:0] rd_alu;
  wire [4:0] rd_mem;
  wire [4:0] rd_wb;
  wire regfilewen;
  wire [2:0] rs2bpsel;
  wire stall;
  wire trap;
  wire trapwen;
  wire [2:0] wbfunct3;
  wire wbmret;
  wire [6:0] wbopcode;
  wire [1:0] wbsel;
  wire wbtrap;
  bp_flush_unit bypassandflushunit (
    .a_bypass_sel(abpsel),
    .alu_opcode(aluopcode),
    .b_bypass_sel(bbpsel),
    .branch(branch),
    .flushalu(flushalu),
    .flushid(flushid),
    .flushmem(flushmem),
    .flushwb(flushwb),
    .id_funct3(idfunct3),
    .id_opcode(idopcode),
    .mem_opcode(memopcode),
    .ra_id(ra_id),
    .rb_id(rb_id),
    .rd_alu(rd_alu),
    .rd_mem(rd_mem),
    .rd_wb(rd_wb),
    .rs2_bypass_sel(rs2bpsel),
    .stall(stall),
    .wb_opcode(wbopcode),
    .wbmret(wbmret),
    .wbtrap(wbtrap)
  );
  controlunit controlunit (
    .a_sel(asel),
    .alu_funct3(alufunct3),
    .alu_funct7(alufunct7),
    .alu_opcode(aluopcode),
    .alu_sel(alusel),
    .b_sel(bsel),
    .csrfile_trap_wen(trapwen),
    .csrfile_wen(csrwen),
    .dmem_wen(memwen),
    .ebreak(ebreak),
    .ecall(ecall),
    .id_funct3(idfunct3),
    .id_funct7(idfunct7),
    .id_opcode(idopcode),
    .ill_op(illop),
    .imm_sel(immsel),
    .mem_funct3(memfunct3),
    .mem_funct7(memfunct7),
    .mem_opcode(memopcode),
    .mret(mret),
    .pc_sel(pcsel),
    .regfile_wen(regfilewen),
    .trap(trap),
    .wb_funct3(wbfunct3),
    .wb_opcode(wbopcode),
    .wb_sel(wbsel),
    .wbtrap(wbtrap)
  );
  datapath_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa datapath (
    .a_bypass_sel(abpsel),
    .a_sel(asel),
    .alu_funct3(alufunct3),
    .alu_funct7(alufunct7),
    .alu_opcode(aluopcode),
    .alu_sel(alusel),
    .b_bypass_sel(bbpsel),
    .b_sel(bsel),
    .branch(branch),
    .clk(CLK),
    .csrfile_trap_wen(trapwen),
    .csrfile_wen(csrwen),
    .dmem_addr(_1_),
    .dmem_dataload(DMEM_DATA_L),
    .dmem_datastore(_2_),
    .ebreak(ebreak),
    .ecall(ecall),
    .extern_irq(IRQ),
    .flushalu(flushalu),
    .flushid(flushid),
    .flushmem(flushmem),
    .flushwb(flushwb),
    .id_funct3(idfunct3),
    .id_funct7(idfunct7),
    .id_opcode(idopcode),
    .ill_op(illop),
    .imem_addr(_0_),
    .imem_instruction(IMEM_DATA),
    .imm_sel(immsel),
    .mem_funct3(memfunct3),
    .mem_funct7(memfunct7),
    .mem_opcode(memopcode),
    .mret(mret),
    .pc_sel(pcsel),
    .ra_id(ra_id),
    .rb_id(rb_id),
    .rd_alu(rd_alu),
    .rd_mem(rd_mem),
    .rd_wb(rd_wb),
    .regfile_wen(regfilewen),
    .rs2_bypass_sel(rs2bpsel),
    .stall(stall),
    .trap(trap),
    .wb_funct3(wbfunct3),
    .wb_opcode(wbopcode),
    .wb_sel(wbsel),
    .wbmret(wbmret),
    .wbtrap(wbtrap)
  );
  assign IMEM_ADDR = _0_;
  assign DMEM_ADDR = _1_;
  assign DMEM_DATA_S = _2_;
  assign DMEM_WEN = memwen;
endmodule

module alu_32(a, b, funsel, c, z, condtrue);
  wire [31:0] _00_;
  wire _01_;
  wire [31:0] _02_;
  wire _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [31:0] _16_;
  wire _17_;
  wire [31:0] _18_;
  wire _19_;
  wire [31:0] _20_;
  wire _21_;
  wire [31:0] _22_;
  wire _23_;
  wire [31:0] _24_;
  wire _25_;
  wire [31:0] _26_;
  wire [31:0] _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [31:0] _31_;
  wire _32_;
  wire _33_;
  input [31:0] a;
  input [31:0] b;
  output [31:0] c;
  output condtrue;
  input [3:0] funsel;
  output z;
  assign _00_ = a + b;
  assign _01_ = funsel == 4'h0;
  assign _02_ = a - b;
  assign _03_ = funsel == 4'h8;
  assign _04_ = a << { 26'h0000000, b[4:0] };
  assign _05_ = funsel == 4'h1;
  assign _06_ = $signed(a) < $signed(b);
  assign _07_ = _06_ ? 1'h1 : 1'h0;
  assign _08_ = funsel == 4'h2;
  assign _09_ = funsel == 4'ha;
  assign _10_ = _08_ | _09_;
  assign _11_ = a < b;
  assign _12_ = _11_ ? 1'h1 : 1'h0;
  assign _13_ = funsel == 4'h3;
  assign _14_ = funsel == 4'hb;
  assign _15_ = _13_ | _14_;
  assign _16_ = a ^ b;
  assign _17_ = funsel == 4'h4;
  assign _18_ = a >> { 26'h0000000, b[4:0] };
  assign _19_ = funsel == 4'h5;
  assign _20_ = $signed(a) >>> { 26'h0000000, b[4:0] };
  assign _21_ = funsel == 4'hd;
  assign _22_ = a | b;
  assign _23_ = funsel == 4'h6;
  assign _24_ = a & b;
  assign _25_ = funsel == 4'h7;
  assign _26_ = ~ a;
  assign _27_ = _26_ & b;
  assign _28_ = funsel == 4'hf;
  assign _29_ = funsel == 4'he;
  assign _30_ = funsel == 4'hc;
  function [31:0] \1875 ;
    input [31:0] a;
    input [415:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \1875  = b[31:0];
      13'b???????????1?:
        \1875  = b[63:32];
      13'b??????????1??:
        \1875  = b[95:64];
      13'b?????????1???:
        \1875  = b[127:96];
      13'b????????1????:
        \1875  = b[159:128];
      13'b???????1?????:
        \1875  = b[191:160];
      13'b??????1??????:
        \1875  = b[223:192];
      13'b?????1???????:
        \1875  = b[255:224];
      13'b????1????????:
        \1875  = b[287:256];
      13'b???1?????????:
        \1875  = b[319:288];
      13'b??1??????????:
        \1875  = b[351:320];
      13'b?1???????????:
        \1875  = b[383:352];
      13'b1????????????:
        \1875  = b[415:384];
      default:
        \1875  = a;
    endcase
  endfunction
  assign _31_ = \1875 (32'hxxxxxxxx, { a, b, _27_, _24_, _22_, _20_, _18_, _16_, 31'h00000000, _12_, 31'h00000000, _07_, _04_, _02_, _00_ }, { _30_, _29_, _28_, _25_, _23_, _21_, _19_, _17_, _15_, _10_, _05_, _03_, _01_ });
  assign _32_ = _31_ == 32'd0;
  assign _33_ = _32_ ? 1'h1 : 1'h0;
  assign c = _31_;
  assign z = _33_;
  assign condtrue = _31_[0];
endmodule

module bp_flush_unit(id_opcode, id_funct3, alu_opcode, mem_opcode, wb_opcode, ra_id, rb_id, rd_alu, rd_mem, rd_wb, wbtrap, wbmret, branch, stall, flushid, flushalu, flushmem, flushwb, a_bypass_sel, b_bypass_sel, rs2_bypass_sel);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire [2:0] _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire [2:0] _043_;
  wire _044_;
  wire _045_;
  wire [2:0] _046_;
  wire [2:0] _047_;
  wire _048_;
  wire [2:0] _049_;
  wire [2:0] _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire [2:0] _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire [2:0] _075_;
  wire _076_;
  wire _077_;
  wire [2:0] _078_;
  wire [2:0] _079_;
  wire _080_;
  wire [2:0] _081_;
  wire [2:0] _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire [2:0] _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire [2:0] _105_;
  wire _106_;
  wire _107_;
  wire [2:0] _108_;
  wire [2:0] _109_;
  wire _110_;
  wire [2:0] _111_;
  wire [2:0] _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  output [2:0] a_bypass_sel;
  input [6:0] alu_opcode;
  output [2:0] b_bypass_sel;
  input branch;
  wire csrstall;
  output flushalu;
  output flushid;
  wire flushjmp;
  output flushmem;
  wire flushsystem;
  output flushwb;
  input [2:0] id_funct3;
  input [6:0] id_opcode;
  wire iscsr;
  wire loadstall;
  wire loadstalla;
  wire loadstallb;
  wire loadstallrs2;
  input [6:0] mem_opcode;
  input [4:0] ra_id;
  input [4:0] rb_id;
  input [4:0] rd_alu;
  input [4:0] rd_mem;
  input [4:0] rd_wb;
  output [2:0] rs2_bypass_sel;
  output stall;
  input [6:0] wb_opcode;
  input wbmret;
  input wbtrap;
  assign flushsystem = wbmret | wbtrap;
  assign _000_ = _114_ | _116_;
  assign csrstall = _000_ | _118_;
  assign _001_ = loadstalla | loadstallb;
  assign loadstall = _001_ | loadstallrs2;
  assign _002_ = loadstall | csrstall;
  assign _003_ = flushsystem | flushjmp;
  assign _004_ = _003_ | branch;
  assign _005_ = loadstall | csrstall;
  assign _006_ = _005_ | flushsystem;
  assign _007_ = _006_ | flushjmp;
  assign _008_ = _007_ | branch;
  assign _009_ = flushsystem | flushjmp;
  assign _010_ = _009_ | branch;
  assign _011_ = id_opcode[6:2] == 5'h1c;
  assign _012_ = id_funct3 != 3'h0;
  assign _013_ = _011_ & _012_;
  assign iscsr = _013_ ? 1'h1 : 1'h0;
  assign _014_ = id_opcode[6:2] != 5'h1b;
  assign _015_ = id_opcode[6:2] != 5'h0d;
  assign _016_ = _014_ & _015_;
  assign _017_ = id_opcode[6:2] != 5'h05;
  assign _018_ = _016_ & _017_;
  assign _019_ = ~ id_funct3[2];
  assign _020_ = iscsr & _019_;
  assign _021_ = _018_ | _020_;
  assign _022_ = alu_opcode[6:2] != 5'h18;
  assign _023_ = alu_opcode[6:2] != 5'h08;
  assign _024_ = _022_ & _023_;
  assign _025_ = mem_opcode[6:2] != 5'h18;
  assign _026_ = mem_opcode[6:2] != 5'h08;
  assign _027_ = _025_ & _026_;
  assign _028_ = wb_opcode[6:2] != 5'h18;
  assign _029_ = wb_opcode[6:2] != 5'h08;
  assign _030_ = _028_ & _029_;
  assign _031_ = ra_id != 5'h00;
  assign _032_ = _031_ & _021_;
  assign _033_ = ra_id == rd_alu;
  assign _034_ = _033_ & _024_;
  assign _035_ = alu_opcode[6:2] == 5'h1b;
  function [2:0] \541 ;
    input [2:0] a;
    input [2:0] b;
    input [0:0] s;
    (* parallel_case *)
    casez (s)
      1'b1:
        \541  = b[2:0];
      default:
        \541  = a;
    endcase
  endfunction
  assign _036_ = \541 (3'h2, 3'h5, _035_);
  assign _037_ = alu_opcode[6:2] == 5'h00;
  assign _038_ = _037_ ? 1'h1 : 1'h0;
  assign _039_ = ra_id == rd_mem;
  assign _040_ = _039_ & _027_;
  assign _041_ = mem_opcode[6:2] == 5'h00;
  assign _042_ = mem_opcode[6:2] == 5'h1b;
  function [2:0] \559 ;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \559  = b[2:0];
      2'b1?:
        \559  = b[5:3];
      default:
        \559  = a;
    endcase
  endfunction
  assign _043_ = \559 (3'h3, 6'h34, { _042_, _041_ });
  assign _044_ = ra_id == rd_wb;
  assign _045_ = _044_ & _030_;
  assign _046_ = _045_ ? 3'h1 : 3'h0;
  assign _047_ = _040_ ? _043_ : _046_;
  assign _048_ = _034_ ? _038_ : 1'h0;
  assign _049_ = _034_ ? _036_ : _047_;
  assign loadstalla = _032_ ? _048_ : 1'h0;
  assign _050_ = _032_ ? _049_ : 3'h0;
  assign _051_ = id_opcode[6:2] == 5'h18;
  assign _052_ = id_opcode[6:2] == 5'h0c;
  assign _053_ = _051_ | _052_;
  assign _054_ = alu_opcode[6:2] != 5'h18;
  assign _055_ = alu_opcode[6:2] != 5'h08;
  assign _056_ = _054_ & _055_;
  assign _057_ = mem_opcode[6:2] != 5'h18;
  assign _058_ = mem_opcode[6:2] != 5'h08;
  assign _059_ = _057_ & _058_;
  assign _060_ = wb_opcode[6:2] != 5'h18;
  assign _061_ = wb_opcode[6:2] != 5'h08;
  assign _062_ = _060_ & _061_;
  assign _063_ = rb_id != 5'h00;
  assign _064_ = _063_ & _053_;
  assign _065_ = rb_id == rd_alu;
  assign _066_ = _065_ & _056_;
  assign _067_ = alu_opcode[6:2] == 5'h1b;
  function [2:0] \621 ;
    input [2:0] a;
    input [2:0] b;
    input [0:0] s;
    (* parallel_case *)
    casez (s)
      1'b1:
        \621  = b[2:0];
      default:
        \621  = a;
    endcase
  endfunction
  assign _068_ = \621 (3'h2, 3'h5, _067_);
  assign _069_ = alu_opcode[6:2] == 5'h00;
  assign _070_ = _069_ ? 1'h1 : 1'h0;
  assign _071_ = rb_id == rd_mem;
  assign _072_ = _071_ & _059_;
  assign _073_ = mem_opcode[6:2] == 5'h00;
  assign _074_ = mem_opcode[6:2] == 5'h1b;
  function [2:0] \639 ;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \639  = b[2:0];
      2'b1?:
        \639  = b[5:3];
      default:
        \639  = a;
    endcase
  endfunction
  assign _075_ = \639 (3'h3, 6'h34, { _074_, _073_ });
  assign _076_ = rb_id == rd_wb;
  assign _077_ = _076_ & _062_;
  assign _078_ = _077_ ? 3'h1 : 3'h0;
  assign _079_ = _072_ ? _075_ : _078_;
  assign _080_ = _066_ ? _070_ : 1'h0;
  assign _081_ = _066_ ? _068_ : _079_;
  assign loadstallb = _064_ ? _080_ : 1'h0;
  assign _082_ = _064_ ? _081_ : 3'h0;
  assign _083_ = id_opcode[6:2] == 5'h08;
  assign _084_ = alu_opcode[6:2] != 5'h18;
  assign _085_ = alu_opcode[6:2] != 5'h08;
  assign _086_ = _084_ & _085_;
  assign _087_ = mem_opcode[6:2] != 5'h18;
  assign _088_ = mem_opcode[6:2] != 5'h08;
  assign _089_ = _087_ & _088_;
  assign _090_ = wb_opcode[6:2] != 5'h18;
  assign _091_ = wb_opcode[6:2] != 5'h08;
  assign _092_ = _090_ & _091_;
  assign _093_ = rb_id != 5'h00;
  assign _094_ = _093_ & _083_;
  assign _095_ = rb_id == rd_alu;
  assign _096_ = _095_ & _086_;
  assign _097_ = alu_opcode[6:2] == 5'h1b;
  function [2:0] \697 ;
    input [2:0] a;
    input [2:0] b;
    input [0:0] s;
    (* parallel_case *)
    casez (s)
      1'b1:
        \697  = b[2:0];
      default:
        \697  = a;
    endcase
  endfunction
  assign _098_ = \697 (3'h2, 3'h5, _097_);
  assign _099_ = alu_opcode[6:2] == 5'h00;
  assign _100_ = _099_ ? 1'h1 : 1'h0;
  assign _101_ = rb_id == rd_mem;
  assign _102_ = _101_ & _089_;
  assign _103_ = mem_opcode[6:2] == 5'h00;
  assign _104_ = mem_opcode[6:2] == 5'h1b;
  function [2:0] \715 ;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \715  = b[2:0];
      2'b1?:
        \715  = b[5:3];
      default:
        \715  = a;
    endcase
  endfunction
  assign _105_ = \715 (3'h3, 6'h34, { _104_, _103_ });
  assign _106_ = rb_id == rd_wb;
  assign _107_ = _106_ & _092_;
  assign _108_ = _107_ ? 3'h1 : 3'h0;
  assign _109_ = _102_ ? _105_ : _108_;
  assign _110_ = _096_ ? _100_ : 1'h0;
  assign _111_ = _096_ ? _098_ : _109_;
  assign loadstallrs2 = _094_ ? _110_ : 1'h0;
  assign _112_ = _094_ ? _111_ : 3'h0;
  assign _113_ = alu_opcode[6:2] == 5'h1c;
  assign _114_ = _113_ ? 1'h1 : 1'h0;
  assign _115_ = mem_opcode[6:2] == 5'h1c;
  assign _116_ = _115_ ? 1'h1 : 1'h0;
  assign _117_ = wb_opcode[6:2] == 5'h1c;
  assign _118_ = _117_ ? 1'h1 : 1'h0;
  assign _119_ = mem_opcode[6:2] == 5'h19;
  assign flushjmp = _119_ ? 1'h1 : 1'h0;
  assign stall = _002_;
  assign flushid = _004_;
  assign flushalu = _008_;
  assign flushmem = _010_;
  assign flushwb = flushsystem;
  assign a_bypass_sel = _050_;
  assign b_bypass_sel = _082_;
  assign rs2_bypass_sel = _112_;
endmodule

module branchpredictor_8_32(clk, isjal, wen, takenjmp, wasmatch, pcr, pcw, wtarget, rtarget, prediction, match);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [1:0] _06_;
  wire _07_;
  wire [1:0] _08_;
  wire _09_;
  wire [1:0] _10_;
  wire _11_;
  wire [1:0] _12_;
  wire _13_;
  wire [1:0] _14_;
  wire [1:0] _15_;
  wire [7679:0] _16_;
  wire [29:0] _17_;
  wire [5631:0] _18_;
  wire [21:0] _19_;
  wire [511:0] _20_;
  wire [1:0] _21_;
  wire [511:0] _22_;
  wire [1:0] _23_;
  wire [255:0] _24_;
  wire _25_;
  input clk;
  input isjal;
  output match;
  wire [1:0] nextstate;
  input [31:0] pcr;
  input [31:0] pcw;
  wire \predictbranch.vprediction ;
  output prediction;
  output [29:0] rtarget;
  wire smatch;
  wire spredict;
  input takenjmp;
  input wasmatch;
  input wen;
  input [29:0] wtarget;
  reg [29:0] \$mem$\1400  [255:0];
  reg [21:0] \$mem$\1403  [255:0];
  reg [1:0] \$mem$\1407  [255:0];
  reg [0:0] \$mem$\1412  [255:0];
  assign _00_ = smatch & spredict;
  assign _01_ = pcr[31:10] == _19_;
  assign smatch = _01_ ? 1'h1 : 1'h0;
  assign _02_ = _23_ == 2'h0;
  assign _03_ = _23_ == 2'h1;
  assign _04_ = _23_ == 2'h2;
  assign _05_ = _23_ == 2'h3;
  function [0:0] \1337 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1337  = b[0:0];
      4'b??1?:
        \1337  = b[1:1];
      4'b?1??:
        \1337  = b[2:2];
      4'b1???:
        \1337  = b[3:3];
      default:
        \1337  = a;
    endcase
  endfunction
  assign \predictbranch.vprediction  = \1337 (\predictbranch.vprediction , 4'hc, { _05_, _04_, _03_, _02_ });
  assign spredict = \predictbranch.vprediction  | _25_;
  assign _06_ = takenjmp ? 2'h1 : 2'h0;
  assign _07_ = _21_ == 2'h0;
  assign _08_ = takenjmp ? 2'h2 : 2'h0;
  assign _09_ = _21_ == 2'h1;
  assign _10_ = takenjmp ? 2'h3 : 2'h1;
  assign _11_ = _21_ == 2'h2;
  assign _12_ = takenjmp ? 2'h3 : 2'h2;
  assign _13_ = _21_ == 2'h3;
  function [1:0] \1367 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1367  = b[1:0];
      4'b??1?:
        \1367  = b[3:2];
      4'b?1??:
        \1367  = b[5:4];
      4'b1???:
        \1367  = b[7:6];
      default:
        \1367  = a;
    endcase
  endfunction
  assign _14_ = \1367 (nextstate, { _12_, _10_, _08_, _06_ }, { _13_, _11_, _09_, _07_ });
  assign _15_ = takenjmp ? 2'h1 : 2'h0;
  assign nextstate = wasmatch ? _14_ : _15_;
  reg [29:0] \1400  [255:0];
  always @(posedge clk) begin
    if (wen) \1400 [pcw[9:2]] <= wtarget;
  end
  assign _17_ = \1400 [pcr[9:2]];
  reg [21:0] \1403  [255:0];
  always @(posedge clk) begin
    if (wen) \1403 [pcw[9:2]] <= pcw[31:10];
  end
  assign _19_ = \1403 [pcr[9:2]];
  reg [1:0] \1407  [255:0];
  initial begin
    \1407 [0] = 2'h0;
    \1407 [1] = 2'h0;
    \1407 [2] = 2'h0;
    \1407 [3] = 2'h0;
    \1407 [4] = 2'h0;
    \1407 [5] = 2'h0;
    \1407 [6] = 2'h0;
    \1407 [7] = 2'h0;
    \1407 [8] = 2'h0;
    \1407 [9] = 2'h0;
    \1407 [10] = 2'h0;
    \1407 [11] = 2'h0;
    \1407 [12] = 2'h0;
    \1407 [13] = 2'h0;
    \1407 [14] = 2'h0;
    \1407 [15] = 2'h0;
    \1407 [16] = 2'h0;
    \1407 [17] = 2'h0;
    \1407 [18] = 2'h0;
    \1407 [19] = 2'h0;
    \1407 [20] = 2'h0;
    \1407 [21] = 2'h0;
    \1407 [22] = 2'h0;
    \1407 [23] = 2'h0;
    \1407 [24] = 2'h0;
    \1407 [25] = 2'h0;
    \1407 [26] = 2'h0;
    \1407 [27] = 2'h0;
    \1407 [28] = 2'h0;
    \1407 [29] = 2'h0;
    \1407 [30] = 2'h0;
    \1407 [31] = 2'h0;
    \1407 [32] = 2'h0;
    \1407 [33] = 2'h0;
    \1407 [34] = 2'h0;
    \1407 [35] = 2'h0;
    \1407 [36] = 2'h0;
    \1407 [37] = 2'h0;
    \1407 [38] = 2'h0;
    \1407 [39] = 2'h0;
    \1407 [40] = 2'h0;
    \1407 [41] = 2'h0;
    \1407 [42] = 2'h0;
    \1407 [43] = 2'h0;
    \1407 [44] = 2'h0;
    \1407 [45] = 2'h0;
    \1407 [46] = 2'h0;
    \1407 [47] = 2'h0;
    \1407 [48] = 2'h0;
    \1407 [49] = 2'h0;
    \1407 [50] = 2'h0;
    \1407 [51] = 2'h0;
    \1407 [52] = 2'h0;
    \1407 [53] = 2'h0;
    \1407 [54] = 2'h0;
    \1407 [55] = 2'h0;
    \1407 [56] = 2'h0;
    \1407 [57] = 2'h0;
    \1407 [58] = 2'h0;
    \1407 [59] = 2'h0;
    \1407 [60] = 2'h0;
    \1407 [61] = 2'h0;
    \1407 [62] = 2'h0;
    \1407 [63] = 2'h0;
    \1407 [64] = 2'h0;
    \1407 [65] = 2'h0;
    \1407 [66] = 2'h0;
    \1407 [67] = 2'h0;
    \1407 [68] = 2'h0;
    \1407 [69] = 2'h0;
    \1407 [70] = 2'h0;
    \1407 [71] = 2'h0;
    \1407 [72] = 2'h0;
    \1407 [73] = 2'h0;
    \1407 [74] = 2'h0;
    \1407 [75] = 2'h0;
    \1407 [76] = 2'h0;
    \1407 [77] = 2'h0;
    \1407 [78] = 2'h0;
    \1407 [79] = 2'h0;
    \1407 [80] = 2'h0;
    \1407 [81] = 2'h0;
    \1407 [82] = 2'h0;
    \1407 [83] = 2'h0;
    \1407 [84] = 2'h0;
    \1407 [85] = 2'h0;
    \1407 [86] = 2'h0;
    \1407 [87] = 2'h0;
    \1407 [88] = 2'h0;
    \1407 [89] = 2'h0;
    \1407 [90] = 2'h0;
    \1407 [91] = 2'h0;
    \1407 [92] = 2'h0;
    \1407 [93] = 2'h0;
    \1407 [94] = 2'h0;
    \1407 [95] = 2'h0;
    \1407 [96] = 2'h0;
    \1407 [97] = 2'h0;
    \1407 [98] = 2'h0;
    \1407 [99] = 2'h0;
    \1407 [100] = 2'h0;
    \1407 [101] = 2'h0;
    \1407 [102] = 2'h0;
    \1407 [103] = 2'h0;
    \1407 [104] = 2'h0;
    \1407 [105] = 2'h0;
    \1407 [106] = 2'h0;
    \1407 [107] = 2'h0;
    \1407 [108] = 2'h0;
    \1407 [109] = 2'h0;
    \1407 [110] = 2'h0;
    \1407 [111] = 2'h0;
    \1407 [112] = 2'h0;
    \1407 [113] = 2'h0;
    \1407 [114] = 2'h0;
    \1407 [115] = 2'h0;
    \1407 [116] = 2'h0;
    \1407 [117] = 2'h0;
    \1407 [118] = 2'h0;
    \1407 [119] = 2'h0;
    \1407 [120] = 2'h0;
    \1407 [121] = 2'h0;
    \1407 [122] = 2'h0;
    \1407 [123] = 2'h0;
    \1407 [124] = 2'h0;
    \1407 [125] = 2'h0;
    \1407 [126] = 2'h0;
    \1407 [127] = 2'h0;
    \1407 [128] = 2'h0;
    \1407 [129] = 2'h0;
    \1407 [130] = 2'h0;
    \1407 [131] = 2'h0;
    \1407 [132] = 2'h0;
    \1407 [133] = 2'h0;
    \1407 [134] = 2'h0;
    \1407 [135] = 2'h0;
    \1407 [136] = 2'h0;
    \1407 [137] = 2'h0;
    \1407 [138] = 2'h0;
    \1407 [139] = 2'h0;
    \1407 [140] = 2'h0;
    \1407 [141] = 2'h0;
    \1407 [142] = 2'h0;
    \1407 [143] = 2'h0;
    \1407 [144] = 2'h0;
    \1407 [145] = 2'h0;
    \1407 [146] = 2'h0;
    \1407 [147] = 2'h0;
    \1407 [148] = 2'h0;
    \1407 [149] = 2'h0;
    \1407 [150] = 2'h0;
    \1407 [151] = 2'h0;
    \1407 [152] = 2'h0;
    \1407 [153] = 2'h0;
    \1407 [154] = 2'h0;
    \1407 [155] = 2'h0;
    \1407 [156] = 2'h0;
    \1407 [157] = 2'h0;
    \1407 [158] = 2'h0;
    \1407 [159] = 2'h0;
    \1407 [160] = 2'h0;
    \1407 [161] = 2'h0;
    \1407 [162] = 2'h0;
    \1407 [163] = 2'h0;
    \1407 [164] = 2'h0;
    \1407 [165] = 2'h0;
    \1407 [166] = 2'h0;
    \1407 [167] = 2'h0;
    \1407 [168] = 2'h0;
    \1407 [169] = 2'h0;
    \1407 [170] = 2'h0;
    \1407 [171] = 2'h0;
    \1407 [172] = 2'h0;
    \1407 [173] = 2'h0;
    \1407 [174] = 2'h0;
    \1407 [175] = 2'h0;
    \1407 [176] = 2'h0;
    \1407 [177] = 2'h0;
    \1407 [178] = 2'h0;
    \1407 [179] = 2'h0;
    \1407 [180] = 2'h0;
    \1407 [181] = 2'h0;
    \1407 [182] = 2'h0;
    \1407 [183] = 2'h0;
    \1407 [184] = 2'h0;
    \1407 [185] = 2'h0;
    \1407 [186] = 2'h0;
    \1407 [187] = 2'h0;
    \1407 [188] = 2'h0;
    \1407 [189] = 2'h0;
    \1407 [190] = 2'h0;
    \1407 [191] = 2'h0;
    \1407 [192] = 2'h0;
    \1407 [193] = 2'h0;
    \1407 [194] = 2'h0;
    \1407 [195] = 2'h0;
    \1407 [196] = 2'h0;
    \1407 [197] = 2'h0;
    \1407 [198] = 2'h0;
    \1407 [199] = 2'h0;
    \1407 [200] = 2'h0;
    \1407 [201] = 2'h0;
    \1407 [202] = 2'h0;
    \1407 [203] = 2'h0;
    \1407 [204] = 2'h0;
    \1407 [205] = 2'h0;
    \1407 [206] = 2'h0;
    \1407 [207] = 2'h0;
    \1407 [208] = 2'h0;
    \1407 [209] = 2'h0;
    \1407 [210] = 2'h0;
    \1407 [211] = 2'h0;
    \1407 [212] = 2'h0;
    \1407 [213] = 2'h0;
    \1407 [214] = 2'h0;
    \1407 [215] = 2'h0;
    \1407 [216] = 2'h0;
    \1407 [217] = 2'h0;
    \1407 [218] = 2'h0;
    \1407 [219] = 2'h0;
    \1407 [220] = 2'h0;
    \1407 [221] = 2'h0;
    \1407 [222] = 2'h0;
    \1407 [223] = 2'h0;
    \1407 [224] = 2'h0;
    \1407 [225] = 2'h0;
    \1407 [226] = 2'h0;
    \1407 [227] = 2'h0;
    \1407 [228] = 2'h0;
    \1407 [229] = 2'h0;
    \1407 [230] = 2'h0;
    \1407 [231] = 2'h0;
    \1407 [232] = 2'h0;
    \1407 [233] = 2'h0;
    \1407 [234] = 2'h0;
    \1407 [235] = 2'h0;
    \1407 [236] = 2'h0;
    \1407 [237] = 2'h0;
    \1407 [238] = 2'h0;
    \1407 [239] = 2'h0;
    \1407 [240] = 2'h0;
    \1407 [241] = 2'h0;
    \1407 [242] = 2'h0;
    \1407 [243] = 2'h0;
    \1407 [244] = 2'h0;
    \1407 [245] = 2'h0;
    \1407 [246] = 2'h0;
    \1407 [247] = 2'h0;
    \1407 [248] = 2'h0;
    \1407 [249] = 2'h0;
    \1407 [250] = 2'h0;
    \1407 [251] = 2'h0;
    \1407 [252] = 2'h0;
    \1407 [253] = 2'h0;
    \1407 [254] = 2'h0;
    \1407 [255] = 2'h0;
  end
  always @(posedge clk) begin
    if (wen) \1407 [pcw[9:2]] <= nextstate;
  end
  assign _21_ = \1407 [pcw[9:2]];
  assign _23_ = \1407 [pcr[9:2]];
  reg [0:0] \1412  [255:0];
  initial begin
    \1412 [0] = 1'h0;
    \1412 [1] = 1'h0;
    \1412 [2] = 1'h0;
    \1412 [3] = 1'h0;
    \1412 [4] = 1'h0;
    \1412 [5] = 1'h0;
    \1412 [6] = 1'h0;
    \1412 [7] = 1'h0;
    \1412 [8] = 1'h0;
    \1412 [9] = 1'h0;
    \1412 [10] = 1'h0;
    \1412 [11] = 1'h0;
    \1412 [12] = 1'h0;
    \1412 [13] = 1'h0;
    \1412 [14] = 1'h0;
    \1412 [15] = 1'h0;
    \1412 [16] = 1'h0;
    \1412 [17] = 1'h0;
    \1412 [18] = 1'h0;
    \1412 [19] = 1'h0;
    \1412 [20] = 1'h0;
    \1412 [21] = 1'h0;
    \1412 [22] = 1'h0;
    \1412 [23] = 1'h0;
    \1412 [24] = 1'h0;
    \1412 [25] = 1'h0;
    \1412 [26] = 1'h0;
    \1412 [27] = 1'h0;
    \1412 [28] = 1'h0;
    \1412 [29] = 1'h0;
    \1412 [30] = 1'h0;
    \1412 [31] = 1'h0;
    \1412 [32] = 1'h0;
    \1412 [33] = 1'h0;
    \1412 [34] = 1'h0;
    \1412 [35] = 1'h0;
    \1412 [36] = 1'h0;
    \1412 [37] = 1'h0;
    \1412 [38] = 1'h0;
    \1412 [39] = 1'h0;
    \1412 [40] = 1'h0;
    \1412 [41] = 1'h0;
    \1412 [42] = 1'h0;
    \1412 [43] = 1'h0;
    \1412 [44] = 1'h0;
    \1412 [45] = 1'h0;
    \1412 [46] = 1'h0;
    \1412 [47] = 1'h0;
    \1412 [48] = 1'h0;
    \1412 [49] = 1'h0;
    \1412 [50] = 1'h0;
    \1412 [51] = 1'h0;
    \1412 [52] = 1'h0;
    \1412 [53] = 1'h0;
    \1412 [54] = 1'h0;
    \1412 [55] = 1'h0;
    \1412 [56] = 1'h0;
    \1412 [57] = 1'h0;
    \1412 [58] = 1'h0;
    \1412 [59] = 1'h0;
    \1412 [60] = 1'h0;
    \1412 [61] = 1'h0;
    \1412 [62] = 1'h0;
    \1412 [63] = 1'h0;
    \1412 [64] = 1'h0;
    \1412 [65] = 1'h0;
    \1412 [66] = 1'h0;
    \1412 [67] = 1'h0;
    \1412 [68] = 1'h0;
    \1412 [69] = 1'h0;
    \1412 [70] = 1'h0;
    \1412 [71] = 1'h0;
    \1412 [72] = 1'h0;
    \1412 [73] = 1'h0;
    \1412 [74] = 1'h0;
    \1412 [75] = 1'h0;
    \1412 [76] = 1'h0;
    \1412 [77] = 1'h0;
    \1412 [78] = 1'h0;
    \1412 [79] = 1'h0;
    \1412 [80] = 1'h0;
    \1412 [81] = 1'h0;
    \1412 [82] = 1'h0;
    \1412 [83] = 1'h0;
    \1412 [84] = 1'h0;
    \1412 [85] = 1'h0;
    \1412 [86] = 1'h0;
    \1412 [87] = 1'h0;
    \1412 [88] = 1'h0;
    \1412 [89] = 1'h0;
    \1412 [90] = 1'h0;
    \1412 [91] = 1'h0;
    \1412 [92] = 1'h0;
    \1412 [93] = 1'h0;
    \1412 [94] = 1'h0;
    \1412 [95] = 1'h0;
    \1412 [96] = 1'h0;
    \1412 [97] = 1'h0;
    \1412 [98] = 1'h0;
    \1412 [99] = 1'h0;
    \1412 [100] = 1'h0;
    \1412 [101] = 1'h0;
    \1412 [102] = 1'h0;
    \1412 [103] = 1'h0;
    \1412 [104] = 1'h0;
    \1412 [105] = 1'h0;
    \1412 [106] = 1'h0;
    \1412 [107] = 1'h0;
    \1412 [108] = 1'h0;
    \1412 [109] = 1'h0;
    \1412 [110] = 1'h0;
    \1412 [111] = 1'h0;
    \1412 [112] = 1'h0;
    \1412 [113] = 1'h0;
    \1412 [114] = 1'h0;
    \1412 [115] = 1'h0;
    \1412 [116] = 1'h0;
    \1412 [117] = 1'h0;
    \1412 [118] = 1'h0;
    \1412 [119] = 1'h0;
    \1412 [120] = 1'h0;
    \1412 [121] = 1'h0;
    \1412 [122] = 1'h0;
    \1412 [123] = 1'h0;
    \1412 [124] = 1'h0;
    \1412 [125] = 1'h0;
    \1412 [126] = 1'h0;
    \1412 [127] = 1'h0;
    \1412 [128] = 1'h0;
    \1412 [129] = 1'h0;
    \1412 [130] = 1'h0;
    \1412 [131] = 1'h0;
    \1412 [132] = 1'h0;
    \1412 [133] = 1'h0;
    \1412 [134] = 1'h0;
    \1412 [135] = 1'h0;
    \1412 [136] = 1'h0;
    \1412 [137] = 1'h0;
    \1412 [138] = 1'h0;
    \1412 [139] = 1'h0;
    \1412 [140] = 1'h0;
    \1412 [141] = 1'h0;
    \1412 [142] = 1'h0;
    \1412 [143] = 1'h0;
    \1412 [144] = 1'h0;
    \1412 [145] = 1'h0;
    \1412 [146] = 1'h0;
    \1412 [147] = 1'h0;
    \1412 [148] = 1'h0;
    \1412 [149] = 1'h0;
    \1412 [150] = 1'h0;
    \1412 [151] = 1'h0;
    \1412 [152] = 1'h0;
    \1412 [153] = 1'h0;
    \1412 [154] = 1'h0;
    \1412 [155] = 1'h0;
    \1412 [156] = 1'h0;
    \1412 [157] = 1'h0;
    \1412 [158] = 1'h0;
    \1412 [159] = 1'h0;
    \1412 [160] = 1'h0;
    \1412 [161] = 1'h0;
    \1412 [162] = 1'h0;
    \1412 [163] = 1'h0;
    \1412 [164] = 1'h0;
    \1412 [165] = 1'h0;
    \1412 [166] = 1'h0;
    \1412 [167] = 1'h0;
    \1412 [168] = 1'h0;
    \1412 [169] = 1'h0;
    \1412 [170] = 1'h0;
    \1412 [171] = 1'h0;
    \1412 [172] = 1'h0;
    \1412 [173] = 1'h0;
    \1412 [174] = 1'h0;
    \1412 [175] = 1'h0;
    \1412 [176] = 1'h0;
    \1412 [177] = 1'h0;
    \1412 [178] = 1'h0;
    \1412 [179] = 1'h0;
    \1412 [180] = 1'h0;
    \1412 [181] = 1'h0;
    \1412 [182] = 1'h0;
    \1412 [183] = 1'h0;
    \1412 [184] = 1'h0;
    \1412 [185] = 1'h0;
    \1412 [186] = 1'h0;
    \1412 [187] = 1'h0;
    \1412 [188] = 1'h0;
    \1412 [189] = 1'h0;
    \1412 [190] = 1'h0;
    \1412 [191] = 1'h0;
    \1412 [192] = 1'h0;
    \1412 [193] = 1'h0;
    \1412 [194] = 1'h0;
    \1412 [195] = 1'h0;
    \1412 [196] = 1'h0;
    \1412 [197] = 1'h0;
    \1412 [198] = 1'h0;
    \1412 [199] = 1'h0;
    \1412 [200] = 1'h0;
    \1412 [201] = 1'h0;
    \1412 [202] = 1'h0;
    \1412 [203] = 1'h0;
    \1412 [204] = 1'h0;
    \1412 [205] = 1'h0;
    \1412 [206] = 1'h0;
    \1412 [207] = 1'h0;
    \1412 [208] = 1'h0;
    \1412 [209] = 1'h0;
    \1412 [210] = 1'h0;
    \1412 [211] = 1'h0;
    \1412 [212] = 1'h0;
    \1412 [213] = 1'h0;
    \1412 [214] = 1'h0;
    \1412 [215] = 1'h0;
    \1412 [216] = 1'h0;
    \1412 [217] = 1'h0;
    \1412 [218] = 1'h0;
    \1412 [219] = 1'h0;
    \1412 [220] = 1'h0;
    \1412 [221] = 1'h0;
    \1412 [222] = 1'h0;
    \1412 [223] = 1'h0;
    \1412 [224] = 1'h0;
    \1412 [225] = 1'h0;
    \1412 [226] = 1'h0;
    \1412 [227] = 1'h0;
    \1412 [228] = 1'h0;
    \1412 [229] = 1'h0;
    \1412 [230] = 1'h0;
    \1412 [231] = 1'h0;
    \1412 [232] = 1'h0;
    \1412 [233] = 1'h0;
    \1412 [234] = 1'h0;
    \1412 [235] = 1'h0;
    \1412 [236] = 1'h0;
    \1412 [237] = 1'h0;
    \1412 [238] = 1'h0;
    \1412 [239] = 1'h0;
    \1412 [240] = 1'h0;
    \1412 [241] = 1'h0;
    \1412 [242] = 1'h0;
    \1412 [243] = 1'h0;
    \1412 [244] = 1'h0;
    \1412 [245] = 1'h0;
    \1412 [246] = 1'h0;
    \1412 [247] = 1'h0;
    \1412 [248] = 1'h0;
    \1412 [249] = 1'h0;
    \1412 [250] = 1'h0;
    \1412 [251] = 1'h0;
    \1412 [252] = 1'h0;
    \1412 [253] = 1'h0;
    \1412 [254] = 1'h0;
    \1412 [255] = 1'h0;
  end
  always @(posedge clk) begin
    if (wen) \1412 [pcw[9:2]] <= isjal;
  end
  assign _25_ = \1412 [pcr[9:2]];
  assign rtarget = _17_;
  assign prediction = _00_;
  assign match = smatch;
endmodule

module controlunit(trap, wbtrap, id_opcode, id_funct3, id_funct7, alu_opcode, alu_funct3, alu_funct7, mem_opcode, mem_funct3, mem_funct7, wb_opcode, wb_funct3, pc_sel, a_sel, b_sel, wb_sel, imm_sel, alu_sel, regfile_wen, dmem_wen, csrfile_wen, csrfile_trap_wen, mret, ecall, ebreak, ill_op);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire [1:0] _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire [3:0] _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire [1:0] _55_;
  wire [1:0] _56_;
  wire [3:0] _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire [3:0] _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire [1:0] _73_;
  wire [1:0] _74_;
  wire [2:0] _75_;
  wire [3:0] _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  wire _88_;
  wire _89_;
  wire _90_;
  wire [1:0] _91_;
  wire _92_;
  wire _93_;
  output [1:0] a_sel;
  input [2:0] alu_funct3;
  input [3:0] alu_funct7;
  input [6:0] alu_opcode;
  output [3:0] alu_sel;
  output [1:0] b_sel;
  output csrfile_trap_wen;
  output csrfile_wen;
  output dmem_wen;
  output ebreak;
  output ecall;
  input [2:0] id_funct3;
  input [3:0] id_funct7;
  input [6:0] id_opcode;
  output ill_op;
  output [2:0] imm_sel;
  input [2:0] mem_funct3;
  input [3:0] mem_funct7;
  input [6:0] mem_opcode;
  output mret;
  output [1:0] pc_sel;
  output regfile_wen;
  input trap;
  input [2:0] wb_funct3;
  input [6:0] wb_opcode;
  output [1:0] wb_sel;
  input wbtrap;
  assign _51_ = _50_ ? { id_funct7[3], id_funct3 } : { 1'h0, id_funct3 };
  assign _52_ = id_opcode == 7'h13;
  assign _53_ = id_opcode == 7'h33;
  assign _54_ = id_opcode == 7'h0f;
  assign _55_ = id_funct3[2] ? 2'h2 : 2'h0;
  assign _56_ = id_funct3[2] ? 2'h1 : 2'h2;
  assign _57_ = 4'hc | { 2'h0, id_funct3[2], 1'h0 };
  assign _58_ = id_funct3[1:0] == 2'h1;
  assign _59_ = id_funct3[1:0] == 2'h2;
  assign _60_ = id_funct3[1:0] == 2'h3;
  function [3:0] \136 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \136  = b[3:0];
      3'b?1?:
        \136  = b[7:4];
      3'b1??:
        \136  = b[11:8];
      default:
        \136  = a;
    endcase
  endfunction
  assign _61_ = \136 (4'hx, { 8'hf6, _57_ }, { _60_, _59_, _58_ });
  assign _62_ = ~ _42_;
  assign _63_ = id_funct7[2:0] == 3'h0;
  assign _64_ = id_funct7[2:0] == 3'h1;
  assign _65_ = id_funct7[2:0] == 3'h6;
  function [0:0] \148 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \148  = b[0:0];
      3'b?1?:
        \148  = b[1:1];
      3'b1??:
        \148  = b[2:2];
      default:
        \148  = a;
    endcase
  endfunction
  assign _66_ = \148 (1'h0, 3'h1, { _65_, _64_, _63_ });
  function [0:0] \151 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \151  = b[0:0];
      3'b?1?:
        \151  = b[1:1];
      3'b1??:
        \151  = b[2:2];
      default:
        \151  = a;
    endcase
  endfunction
  assign _67_ = \151 (1'h0, 3'h2, { _65_, _64_, _63_ });
  function [0:0] \155 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \155  = b[0:0];
      3'b?1?:
        \155  = b[1:1];
      3'b1??:
        \155  = b[2:2];
      default:
        \155  = a;
    endcase
  endfunction
  assign _68_ = \155 (1'h1, 3'h0, { _65_, _64_, _63_ });
  assign _69_ = _62_ ? _66_ : 1'h0;
  assign _70_ = _62_ ? _67_ : 1'h0;
  assign _71_ = _62_ ? _68_ : 1'h0;
  assign _72_ = id_opcode == 7'h73;
  function [1:0] \179 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \179  = b[1:0];
      11'b?????????1?:
        \179  = b[3:2];
      11'b????????1??:
        \179  = b[5:4];
      11'b???????1???:
        \179  = b[7:6];
      11'b??????1????:
        \179  = b[9:8];
      11'b?????1?????:
        \179  = b[11:10];
      11'b????1??????:
        \179  = b[13:12];
      11'b???1???????:
        \179  = b[15:14];
      11'b??1????????:
        \179  = b[17:16];
      11'b?1?????????:
        \179  = b[19:18];
      11'b1??????????:
        \179  = b[21:20];
      default:
        \179  = a;
    endcase
  endfunction
  assign _73_ = \179 (2'hx, { _55_, 20'bxx000000000000xx01xx }, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  function [1:0] \191 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \191  = b[1:0];
      11'b?????????1?:
        \191  = b[3:2];
      11'b????????1??:
        \191  = b[5:4];
      11'b???????1???:
        \191  = b[7:6];
      11'b??????1????:
        \191  = b[9:8];
      11'b?????1?????:
        \191  = b[11:10];
      11'b????1??????:
        \191  = b[13:12];
      11'b???1???????:
        \191  = b[15:14];
      11'b??1????????:
        \191  = b[17:16];
      11'b?1?????????:
        \191  = b[19:18];
      11'b1??????????:
        \191  = b[21:20];
      default:
        \191  = a;
    endcase
  endfunction
  assign _74_ = \191 (2'hx, { _56_, 20'bxx000101010001xx0101 }, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  function [2:0] \204 ;
    input [2:0] a;
    input [32:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \204  = b[2:0];
      11'b?????????1?:
        \204  = b[5:3];
      11'b????????1??:
        \204  = b[8:6];
      11'b???????1???:
        \204  = b[11:9];
      11'b??????1????:
        \204  = b[14:12];
      11'b?????1?????:
        \204  = b[17:15];
      11'b????1??????:
        \204  = b[20:18];
      11'b???1???????:
        \204  = b[23:21];
      11'b??1????????:
        \204  = b[26:24];
      11'b?1?????????:
        \204  = b[29:27];
      11'b1??????????:
        \204  = b[32:30];
      default:
        \204  = a;
    endcase
  endfunction
  assign _75_ = \204 (3'hx, 33'b101xxxxxx000001000010000100011011, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  function [3:0] \213 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \213  = b[3:0];
      11'b?????????1?:
        \213  = b[7:4];
      11'b????????1??:
        \213  = b[11:8];
      11'b???????1???:
        \213  = b[15:12];
      11'b??????1????:
        \213  = b[19:16];
      11'b?????1?????:
        \213  = b[23:20];
      11'b????1??????:
        \213  = b[27:24];
      11'b???1???????:
        \213  = b[31:28];
      11'b??1????????:
        \213  = b[35:32];
      11'b?1?????????:
        \213  = b[39:36];
      11'b1??????????:
        \213  = b[43:40];
      default:
        \213  = a;
    endcase
  endfunction
  assign _76_ = \213 (4'hx, { _61_, 4'hx, id_funct7[3], id_funct3, _51_, 10'h002, id_funct3[2:1], 16'h0x0e }, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  function [0:0] \225 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \225  = b[0:0];
      11'b?????????1?:
        \225  = b[1:1];
      11'b????????1??:
        \225  = b[2:2];
      11'b???????1???:
        \225  = b[3:3];
      11'b??????1????:
        \225  = b[4:4];
      11'b?????1?????:
        \225  = b[5:5];
      11'b????1??????:
        \225  = b[6:6];
      11'b???1???????:
        \225  = b[7:7];
      11'b??1????????:
        \225  = b[8:8];
      11'b?1?????????:
        \225  = b[9:9];
      11'b1??????????:
        \225  = b[10:10];
      default:
        \225  = a;
    endcase
  endfunction
  assign _77_ = \225 (1'h0, { _69_, 10'h000 }, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  function [0:0] \237 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \237  = b[0:0];
      11'b?????????1?:
        \237  = b[1:1];
      11'b????????1??:
        \237  = b[2:2];
      11'b???????1???:
        \237  = b[3:3];
      11'b??????1????:
        \237  = b[4:4];
      11'b?????1?????:
        \237  = b[5:5];
      11'b????1??????:
        \237  = b[6:6];
      11'b???1???????:
        \237  = b[7:7];
      11'b??1????????:
        \237  = b[8:8];
      11'b?1?????????:
        \237  = b[9:9];
      11'b1??????????:
        \237  = b[10:10];
      default:
        \237  = a;
    endcase
  endfunction
  assign _78_ = \237 (1'h0, { _70_, 10'h000 }, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  function [0:0] \249 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \249  = b[0:0];
      11'b?????????1?:
        \249  = b[1:1];
      11'b????????1??:
        \249  = b[2:2];
      11'b???????1???:
        \249  = b[3:3];
      11'b??????1????:
        \249  = b[4:4];
      11'b?????1?????:
        \249  = b[5:5];
      11'b????1??????:
        \249  = b[6:6];
      11'b???1???????:
        \249  = b[7:7];
      11'b??1????????:
        \249  = b[8:8];
      11'b?1?????????:
        \249  = b[9:9];
      11'b1??????????:
        \249  = b[10:10];
      default:
        \249  = a;
    endcase
  endfunction
  assign _79_ = \249 (1'h1, { _71_, 10'h000 }, { _72_, _54_, _53_, _52_, _49_, _48_, _47_, _46_, _45_, _44_, _43_ });
  assign _80_ = alu_opcode == 7'h37;
  assign _81_ = alu_opcode == 7'h17;
  assign _82_ = alu_opcode == 7'h6f;
  assign _83_ = alu_opcode == 7'h67;
  assign _84_ = alu_opcode == 7'h63;
  assign _85_ = alu_opcode == 7'h03;
  assign _86_ = alu_opcode == 7'h23;
  assign _87_ = alu_opcode == 7'h13;
  assign _88_ = alu_opcode == 7'h33;
  assign _89_ = alu_opcode == 7'h0f;
  assign _90_ = alu_opcode == 7'h73;
  function [1:0] \287 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \287  = b[1:0];
      11'b?????????1?:
        \287  = b[3:2];
      11'b????????1??:
        \287  = b[5:4];
      11'b???????1???:
        \287  = b[7:6];
      11'b??????1????:
        \287  = b[9:8];
      11'b?????1?????:
        \287  = b[11:10];
      11'b????1??????:
        \287  = b[13:12];
      11'b???1???????:
        \287  = b[15:14];
      11'b??1????????:
        \287  = b[17:16];
      11'b?1?????????:
        \287  = b[19:18];
      11'b1??????????:
        \287  = b[21:20];
      default:
        \287  = a;
    endcase
  endfunction
  assign _91_ = \287 (2'h0, 22'h000080, { _90_, _89_, _88_, _87_, _86_, _85_, _84_, _83_, _82_, _81_, _80_ });
  assign _92_ = 1'h0 | mem_funct3[2];
  assign _93_ = _92_ | mem_funct3[1];
  assign _00_ = _93_ | mem_funct3[0];
  assign _01_ = mem_opcode == 7'h37;
  assign _02_ = mem_opcode == 7'h17;
  assign _03_ = mem_opcode == 7'h6f;
  assign _04_ = mem_opcode == 7'h67;
  assign _05_ = mem_opcode == 7'h63;
  assign _06_ = mem_opcode == 7'h03;
  assign _07_ = mem_opcode == 7'h23;
  assign _08_ = mem_opcode == 7'h13;
  assign _09_ = mem_opcode == 7'h33;
  assign _10_ = mem_opcode == 7'h0f;
  assign _11_ = ~ _00_;
  assign _12_ = mem_funct7[2:0] == 3'h6;
  assign _13_ = _11_ & _12_;
  assign _14_ = _13_ ? 1'h1 : 1'h0;
  assign _15_ = mem_opcode == 7'h73;
  function [0:0] \349 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \349  = b[0:0];
      11'b?????????1?:
        \349  = b[1:1];
      11'b????????1??:
        \349  = b[2:2];
      11'b???????1???:
        \349  = b[3:3];
      11'b??????1????:
        \349  = b[4:4];
      11'b?????1?????:
        \349  = b[5:5];
      11'b????1??????:
        \349  = b[6:6];
      11'b???1???????:
        \349  = b[7:7];
      11'b??1????????:
        \349  = b[8:8];
      11'b?1?????????:
        \349  = b[9:9];
      11'b1??????????:
        \349  = b[10:10];
      default:
        \349  = a;
    endcase
  endfunction
  assign _16_ = \349 (1'h0, 11'h040, { _15_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _03_, _02_, _01_ });
  function [0:0] \361 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \361  = b[0:0];
      11'b?????????1?:
        \361  = b[1:1];
      11'b????????1??:
        \361  = b[2:2];
      11'b???????1???:
        \361  = b[3:3];
      11'b??????1????:
        \361  = b[4:4];
      11'b?????1?????:
        \361  = b[5:5];
      11'b????1??????:
        \361  = b[6:6];
      11'b???1???????:
        \361  = b[7:7];
      11'b??1????????:
        \361  = b[8:8];
      11'b?1?????????:
        \361  = b[9:9];
      11'b1??????????:
        \361  = b[10:10];
      default:
        \361  = a;
    endcase
  endfunction
  assign _17_ = \361 (1'h0, { _00_, 10'h000 }, { _15_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _03_, _02_, _01_ });
  function [0:0] \373 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \373  = b[0:0];
      11'b?????????1?:
        \373  = b[1:1];
      11'b????????1??:
        \373  = b[2:2];
      11'b???????1???:
        \373  = b[3:3];
      11'b??????1????:
        \373  = b[4:4];
      11'b?????1?????:
        \373  = b[5:5];
      11'b????1??????:
        \373  = b[6:6];
      11'b???1???????:
        \373  = b[7:7];
      11'b??1????????:
        \373  = b[8:8];
      11'b?1?????????:
        \373  = b[9:9];
      11'b1??????????:
        \373  = b[10:10];
      default:
        \373  = a;
    endcase
  endfunction
  assign _18_ = \373 (1'h0, { _14_, 10'h000 }, { _15_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _03_, _02_, _01_ });
  assign _19_ = trap ? 1'h0 : _16_;
  assign _20_ = trap ? 1'h0 : _17_;
  assign _21_ = trap ? 1'h1 : 1'h0;
  assign _22_ = trap ? 1'h0 : _18_;
  assign _23_ = 1'h0 | wb_funct3[2];
  assign _24_ = _23_ | wb_funct3[1];
  assign _25_ = _24_ | wb_funct3[0];
  assign _26_ = wb_opcode == 7'h37;
  assign _27_ = wb_opcode == 7'h17;
  assign _28_ = wb_opcode == 7'h6f;
  assign _29_ = wb_opcode == 7'h67;
  assign _30_ = wb_opcode == 7'h63;
  assign _31_ = wb_opcode == 7'h03;
  assign _32_ = wb_opcode == 7'h23;
  assign _33_ = wb_opcode == 7'h13;
  assign _34_ = wb_opcode == 7'h33;
  assign _35_ = wb_opcode == 7'h0f;
  assign _36_ = wb_opcode == 7'h73;
  function [1:0] \436 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \436  = b[1:0];
      11'b?????????1?:
        \436  = b[3:2];
      11'b????????1??:
        \436  = b[5:4];
      11'b???????1???:
        \436  = b[7:6];
      11'b??????1????:
        \436  = b[9:8];
      11'b?????1?????:
        \436  = b[11:10];
      11'b????1??????:
        \436  = b[13:12];
      11'b???1???????:
        \436  = b[15:14];
      11'b??1????????:
        \436  = b[17:16];
      11'b?1?????????:
        \436  = b[19:18];
      11'b1??????????:
        \436  = b[21:20];
      default:
        \436  = a;
    endcase
  endfunction
  assign _37_ = \436 (2'hx, 22'b11xx0000xx01xx10100000, { _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_, _27_, _26_ });
  function [0:0] \448 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \448  = b[0:0];
      11'b?????????1?:
        \448  = b[1:1];
      11'b????????1??:
        \448  = b[2:2];
      11'b???????1???:
        \448  = b[3:3];
      11'b??????1????:
        \448  = b[4:4];
      11'b?????1?????:
        \448  = b[5:5];
      11'b????1??????:
        \448  = b[6:6];
      11'b???1???????:
        \448  = b[7:7];
      11'b??1????????:
        \448  = b[8:8];
      11'b?1?????????:
        \448  = b[9:9];
      11'b1??????????:
        \448  = b[10:10];
      default:
        \448  = a;
    endcase
  endfunction
  assign _38_ = \448 (1'h0, { _25_, 10'h1af }, { _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_, _27_, _26_ });
  assign _39_ = wbtrap ? 1'h0 : _38_;
  assign _40_ = 1'h0 | id_funct3[2];
  assign _41_ = _40_ | id_funct3[1];
  assign _42_ = _41_ | id_funct3[0];
  assign _43_ = id_opcode == 7'h37;
  assign _44_ = id_opcode == 7'h17;
  assign _45_ = id_opcode == 7'h6f;
  assign _46_ = id_opcode == 7'h67;
  assign _47_ = id_opcode == 7'h63;
  assign _48_ = id_opcode == 7'h03;
  assign _49_ = id_opcode == 7'h23;
  assign _50_ = id_funct3 == 3'h5;
  assign pc_sel = _91_;
  assign a_sel = _73_;
  assign b_sel = _74_;
  assign wb_sel = _37_;
  assign imm_sel = _75_;
  assign alu_sel = _76_;
  assign regfile_wen = _39_;
  assign dmem_wen = _19_;
  assign csrfile_wen = _20_;
  assign csrfile_trap_wen = _21_;
  assign mret = _22_;
  assign ecall = _77_;
  assign ebreak = _78_;
  assign ill_op = _79_;
endmodule

module csrfile_32(clk, extern_irq, csr_mepc, csr_wdata, csr_mcause, csr_raddr, csr_waddr, csr_wen, csr_wen_traps, csr_ret, csr_irq, csr_pcaddr, csr_data);
  wire _00_;
  wire _01_;
  wire _02_;
  wire [31:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [29:0] _25_;
  wire [29:0] _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [31:0] _31_;
  wire [31:0] _32_;
  wire _33_;
  wire _34_;
  wire [1:0] _35_;
  wire [1:0] _36_;
  wire [1:0] _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire [31:0] _45_;
  input clk;
  output [31:0] csr_data;
  output csr_irq;
  input [3:0] csr_mcause;
  input [31:0] csr_mepc;
  output [31:0] csr_pcaddr;
  input [11:0] csr_raddr;
  input csr_ret;
  input [11:0] csr_waddr;
  input [31:0] csr_wdata;
  input csr_wen;
  input csr_wen_traps;
  input extern_irq;
  wire irq;
  reg [31:0] mcause;
  reg [29:0] mepc;
  reg meta_irq = 1'h0;
  reg mie = 1'h0;
  reg mip = 1'h0;
  reg [1:0] mstatus = 2'h0;
  reg [31:0] mvect;
  wire [31:0] \trap_addr.mvect_out ;
  wire [31:0] \trap_addr.pcaddr ;
  assign _00_ = mstatus[0] & mip;
  assign irq = _00_ & mie;
  assign _01_ = irq & mvect[0];
  assign _02_ = _01_ == 1'h0;
  assign _03_ = { mvect[31:2], 2'h0 } + 32'd44;
  assign _04_ = _01_ == 1'h1;
  function [31:0] \1662 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1662  = b[31:0];
      2'b1?:
        \1662  = b[63:32];
      default:
        \1662  = a;
    endcase
  endfunction
  assign \trap_addr.mvect_out  = \1662 (\trap_addr.mvect_out , { _03_, mvect[31:2], 2'h0 }, { _04_, _02_ });
  assign _05_ = csr_ret == 1'h1;
  assign _06_ = csr_ret == 1'h0;
  function [31:0] \1670 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1670  = b[31:0];
      2'b1?:
        \1670  = b[63:32];
      default:
        \1670  = a;
    endcase
  endfunction
  assign \trap_addr.pcaddr  = \1670 (\trap_addr.pcaddr , { \trap_addr.mvect_out , mepc, 2'h0 }, { _06_, _05_ });
  assign _07_ = csr_waddr == 12'h305;
  assign _08_ = csr_wen & _07_;
  assign _09_ = csr_ret != 1'h1;
  assign _10_ = _08_ & _09_;
  assign _11_ = csr_wen_traps != 1'h1;
  assign _12_ = _10_ & _11_;
  assign _13_ = _12_ ? csr_wdata : mvect;
  always @(posedge clk)
    mvect <= _13_;
  assign _14_ = csr_waddr == 12'h304;
  assign _15_ = csr_wen & _14_;
  assign _16_ = csr_ret != 1'h1;
  assign _17_ = _15_ & _16_;
  assign _18_ = csr_wen_traps != 1'h1;
  assign _19_ = _17_ & _18_;
  assign _20_ = _19_ ? csr_wdata[11] : mie;
  always @(posedge clk)
    mie <= _20_;
  always @(posedge clk)
    mip <= meta_irq;
  always @(posedge clk)
    meta_irq <= extern_irq;
  assign _21_ = csr_waddr == 12'h341;
  assign _22_ = csr_wen & _21_;
  assign _23_ = csr_ret != 1'h1;
  assign _24_ = _22_ & _23_;
  assign _25_ = _24_ ? csr_wdata[31:2] : mepc;
  assign _26_ = csr_wen_traps ? csr_mepc[31:2] : _25_;
  always @(posedge clk)
    mepc <= _26_;
  assign _27_ = csr_waddr == 12'h342;
  assign _28_ = csr_wen & _27_;
  assign _29_ = csr_ret != 1'h1;
  assign _30_ = _28_ & _29_;
  assign _31_ = _30_ ? { 1'h0, csr_wdata[30:0] } : mcause;
  assign _32_ = csr_wen_traps ? { irq, 27'h0000000, csr_mcause } : _31_;
  always @(posedge clk)
    mcause <= _32_;
  assign _33_ = csr_waddr == 12'h300;
  assign _34_ = csr_wen & _33_;
  assign _35_ = _34_ ? { csr_wdata[7], csr_wdata[3] } : mstatus;
  assign _36_ = csr_ret ? { 1'h1, mstatus[1] } : _35_;
  assign _37_ = csr_wen_traps ? { mstatus[0], 1'h0 } : _36_;
  always @(posedge clk)
    mstatus <= _37_;
  assign _38_ = csr_raddr == 12'h342;
  assign _39_ = csr_raddr == 12'h300;
  assign _40_ = csr_raddr == 12'h305;
  assign _41_ = csr_raddr == 12'h301;
  assign _42_ = csr_raddr == 12'h341;
  assign _43_ = csr_raddr == 12'h304;
  assign _44_ = csr_raddr == 12'h344;
  function [31:0] \1804 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \1804  = b[31:0];
      7'b?????1?:
        \1804  = b[63:32];
      7'b????1??:
        \1804  = b[95:64];
      7'b???1???:
        \1804  = b[127:96];
      7'b??1????:
        \1804  = b[159:128];
      7'b?1?????:
        \1804  = b[191:160];
      7'b1??????:
        \1804  = b[223:192];
      default:
        \1804  = a;
    endcase
  endfunction
  assign _45_ = \1804 (32'd0, { 20'h00000, mip, 31'h00000000, mie, 11'h000, mepc, 34'h040000100, mvect, 24'h000018, mstatus[1], 3'h0, mstatus[0], 3'h0, mcause }, { _44_, _43_, _42_, _41_, _40_, _39_, _38_ });
  assign csr_irq = irq;
  assign csr_pcaddr = \trap_addr.pcaddr ;
  assign csr_data = _45_;
endmodule

module datapath_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa(clk, stall, flushid, flushalu, flushmem, flushwb, extern_irq, imem_instruction, dmem_dataload, pc_sel, a_sel, b_sel, wb_sel, imm_sel, alu_sel, regfile_wen, csrfile_wen, csrfile_trap_wen, mret, ecall, ebreak, ill_op, a_bypass_sel, b_bypass_sel, rs2_bypass_sel, imem_addr, dmem_addr, dmem_datastore, trap, wbtrap, wbmret, branch, id_opcode, id_funct3, id_funct7, alu_opcode, alu_funct3, alu_funct7, mem_opcode, mem_funct3, mem_funct7, wb_opcode, wb_funct3, ra_id, rb_id, rd_alu, rd_mem, rd_wb);
  wire [31:0] _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire [31:0] _036_;
  wire [2:0] _037_;
  wire _038_;
  wire _039_;
  wire [31:0] _040_;
  wire [2:0] _041_;
  wire [1:0] _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire [31:0] _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire [3:0] _109_;
  wire [3:0] _110_;
  wire [3:0] _111_;
  wire [3:0] _112_;
  wire [3:0] _113_;
  wire [3:0] _114_;
  input [2:0] a_bypass_sel;
  input [1:0] a_sel;
  wire [31:0] abypass;
  wire allowcsrwrite;
  output [2:0] alu_funct3;
  output [3:0] alu_funct7;
  output [6:0] alu_opcode;
  input [3:0] alu_sel;
  reg [2:0] aluexecptions = 3'h0;
  reg [31:0] aluinstr = 32'd19;
  wire aluisbranch;
  wire aluisjal;
  reg alumatch = 1'h0;
  reg [31:0] alupc;
  reg [31:0] alupc_4;
  reg aluprediction = 1'h0;
  wire [31:0] aluresult;
  wire any_except;
  input [2:0] b_bypass_sel;
  input [1:0] b_sel;
  wire [31:0] bbypass;
  wire bpwen;
  output branch;
  input clk;
  wire condt;
  wire correctjmp;
  wire correctpcsel;
  wire [31:0] csrdata;
  input csrfile_trap_wen;
  input csrfile_wen;
  wire [31:0] csrpc;
  wire [31:0] currentpc;
  output [31:0] dmem_addr;
  input [31:0] dmem_dataload;
  output [31:0] dmem_datastore;
  input ebreak;
  input ecall;
  wire [3:0] excpt_cause;
  input extern_irq;
  input flushalu;
  input flushid;
  input flushmem;
  input flushwb;
  output [2:0] id_funct3;
  output [3:0] id_funct7;
  output [6:0] id_opcode;
  reg [31:0] idinstr = 32'd19;
  reg idmatch = 1'h0;
  reg [31:0] idpc;
  reg [31:0] idpc_4;
  reg idprediction = 1'h0;
  input ill_op;
  output [31:0] imem_addr;
  input [31:0] imem_instruction;
  wire [31:0] imm;
  input [2:0] imm_sel;
  wire instrmisalig;
  wire irq;
  wire [31:0] jumptarget;
  wire loadmisalig;
  wire match;
  output [2:0] mem_funct3;
  output [3:0] mem_funct7;
  output [6:0] mem_opcode;
  wire [31:0] memdataload;
  reg [2:0] memexecptions = 3'h0;
  reg [31:0] meminstr = 32'd19;
  reg memisbranch = 1'h0;
  reg memisjal = 1'h0;
  reg memmatch = 1'h0;
  reg [31:0] mempc;
  reg [31:0] mempc_4;
  reg memprediction = 1'h0;
  input mret;
  wire [31:0] muxaval;
  wire [31:0] muxbval;
  wire [31:0] nextpc;
  input [1:0] pc_sel;
  wire pcstall;
  wire prediction;
  output [4:0] ra_id;
  output [4:0] rb_id;
  wire [31:0] rd;
  output [4:0] rd_alu;
  output [4:0] rd_mem;
  output [4:0] rd_wb;
  wire [31:0] realjmp;
  reg [31:0] rega;
  reg [3:0] regalusel;
  reg [31:0] regb;
  reg [3:0] regcause;
  reg [31:0] regcmem;
  reg regcondt;
  reg [31:0] regcsralu;
  reg [31:0] regcsrmem;
  reg regcsrtrap = 1'h0;
  reg [31:0] regcsrwb;
  reg [31:0] regcwb;
  input regfile_wen;
  reg [31:0] regimmalu;
  reg [31:0] regjmpalign;
  reg [31:0] regloadwb;
  reg regmret = 1'h0;
  reg [1:0] regpcsel = 2'h0;
  reg [31:0] regrs2alu;
  reg [31:0] regrs2mem;
  reg regwbtrap = 1'h0;
  reg regz;
  wire [31:0] rs1;
  wire [31:0] rs2;
  input [2:0] rs2_bypass_sel;
  wire [31:0] rs2bypass;
  wire [29:0] rtarget;
  wire [31:0] \selectcorrectpc.correctedpc ;
  input stall;
  wire storemisalig;
  wire tkbranch;
  output trap;
  wire trap_wrap;
  output [2:0] wb_funct3;
  output [6:0] wb_opcode;
  input [1:0] wb_sel;
  reg [31:0] wbinstr = 32'd19;
  output wbmret;
  reg [31:0] wbpc;
  reg [31:0] wbpc_4;
  output wbtrap;
  wire zero;
  always @(posedge clk)
    mempc <= alupc;
  always @(posedge clk)
    mempc_4 <= alupc_4;
  always @(posedge clk)
    meminstr <= _040_;
  always @(posedge clk)
    memexecptions <= _041_;
  always @(posedge clk)
    regz <= zero;
  always @(posedge clk)
    regcondt <= condt;
  always @(posedge clk)
    regpcsel <= _042_;
  always @(posedge clk)
    regjmpalign <= jumptarget;
  always @(posedge clk)
    regcmem <= aluresult;
  always @(posedge clk)
    regrs2mem <= regrs2alu;
  always @(posedge clk)
    regcsrmem <= regcsralu;
  always @(posedge clk)
    memmatch <= alumatch;
  always @(posedge clk)
    memprediction <= aluprediction;
  always @(posedge clk)
    memisjal <= _043_;
  always @(posedge clk)
    memisbranch <= _044_;
  assign _045_ = 1'h0 | meminstr[19];
  assign _046_ = _045_ | meminstr[18];
  assign _047_ = _046_ | meminstr[17];
  assign _048_ = _047_ | meminstr[16];
  assign _049_ = _048_ | meminstr[15];
  assign _050_ = ~ _049_;
  assign _051_ = _050_ & meminstr[13];
  assign _052_ = ~ _051_;
  assign allowcsrwrite = csrfile_wen & _052_;
  assign _053_ = { meminstr[14], meminstr[12] } == 2'h0;
  assign _054_ = ~ regz;
  assign _055_ = { meminstr[14], meminstr[12] } == 2'h1;
  assign _056_ = { meminstr[14], meminstr[12] } == 2'h2;
  assign _057_ = ~ regcondt;
  assign _058_ = { meminstr[14], meminstr[12] } == 2'h3;
  function [0:0] \1086 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1086  = b[0:0];
      4'b??1?:
        \1086  = b[1:1];
      4'b?1??:
        \1086  = b[2:2];
      4'b1???:
        \1086  = b[3:3];
      default:
        \1086  = a;
    endcase
  endfunction
  assign tkbranch = \1086 (tkbranch, { _057_, regcondt, _054_, regz }, { _058_, _056_, _055_, _053_ });
  assign _059_ = regpcsel[0] | regwbtrap;
  assign _060_ = _059_ | regmret;
  assign _061_ = _060_ | correctjmp;
  assign _062_ = ~ stall;
  assign _063_ = prediction & _062_;
  assign _064_ = ~ regpcsel[1];
  assign _065_ = _063_ & _064_;
  assign _066_ = _061_ | _065_;
  assign _067_ = regpcsel[1] | regwbtrap;
  assign _068_ = _067_ | regmret;
  assign _069_ = ~ _066_;
  assign _070_ = ~ _068_;
  assign _071_ = _069_ & _070_;
  assign pcstall = stall & _071_;
  assign _072_ = memisbranch & tkbranch;
  assign _073_ = memisjal | _072_;
  assign bpwen = _073_ | memmatch;
  assign _074_ = tkbranch | memisjal;
  assign _075_ = memprediction ^ _074_;
  assign _076_ = memisbranch | memisjal;
  assign correctjmp = _075_ & _076_;
  assign _077_ = ~ tkbranch;
  assign correctpcsel = memprediction & _077_;
  assign _078_ = correctpcsel == 1'h0;
  assign _079_ = correctpcsel == 1'h1;
  function [31:0] \1125 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1125  = b[31:0];
      2'b1?:
        \1125  = b[63:32];
      default:
        \1125  = a;
    endcase
  endfunction
  assign \selectcorrectpc.correctedpc  = \1125 (\selectcorrectpc.correctedpc , { mempc_4, regjmpalign }, { _079_, _078_ });
  assign _080_ = correctjmp == 1'h0;
  assign _081_ = correctjmp == 1'h1;
  function [31:0] \1133 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1133  = b[31:0];
      2'b1?:
        \1133  = b[63:32];
      default:
        \1133  = a;
    endcase
  endfunction
  assign realjmp = \1133 (realjmp, { \selectcorrectpc.correctedpc , rtarget, 2'h0 }, { _081_, _080_ });
  assign _082_ = flushwb ? 32'd19 : meminstr;
  assign _083_ = flushwb ? 1'h0 : csrfile_trap_wen;
  assign _084_ = flushwb ? 1'h0 : mret;
  assign _085_ = flushwb ? 1'h0 : trap_wrap;
  always @(posedge clk)
    wbpc <= mempc;
  always @(posedge clk)
    wbpc_4 <= mempc_4;
  always @(posedge clk)
    wbinstr <= _082_;
  always @(posedge clk)
    regcsrtrap <= _083_;
  always @(posedge clk)
    regmret <= _084_;
  always @(posedge clk)
    regcause <= excpt_cause;
  always @(posedge clk)
    regwbtrap <= _085_;
  always @(posedge clk)
    regcwb <= regcmem;
  always @(posedge clk)
    regloadwb <= memdataload;
  always @(posedge clk)
    regcsrwb <= regcsrmem;
  assign _086_ = wb_sel == 2'h0;
  assign _087_ = wb_sel == 2'h1;
  assign _088_ = wb_sel == 2'h2;
  assign _089_ = wb_sel == 2'h3;
  function [31:0] \1180 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1180  = b[31:0];
      4'b??1?:
        \1180  = b[63:32];
      4'b?1??:
        \1180  = b[95:64];
      4'b1???:
        \1180  = b[127:96];
      default:
        \1180  = a;
    endcase
  endfunction
  assign rd = \1180 (rd, { regcsrwb, wbpc_4, regloadwb, regcwb }, { _089_, _088_, _087_, _086_ });
  assign _090_ = loadmisalig | storemisalig;
  assign any_except = _090_ | instrmisalig;
  assign _091_ = irq | any_except;
  assign _092_ = memexecptions[1] | memexecptions[2];
  assign _093_ = _092_ | memexecptions[0];
  assign trap_wrap = _091_ | _093_;
  assign _094_ = meminstr[6:0] == 7'h67;
  assign _095_ = _094_ ? 1'h1 : 1'h0;
  assign _096_ = regjmpalign[0] | regjmpalign[1];
  assign _097_ = _095_ & regcmem[1];
  assign _098_ = memisbranch & tkbranch;
  assign _099_ = _098_ | memisjal;
  assign _100_ = _096_ & _099_;
  assign instrmisalig = _097_ | _100_;
  assign _101_ = regcmem[1] | regcmem[0];
  assign _102_ = meminstr[6:0] == 7'h23;
  assign _103_ = _102_ ? 1'h1 : 1'h0;
  assign _104_ = meminstr[6:0] == 7'h03;
  assign _105_ = _104_ ? 1'h1 : 1'h0;
  assign _106_ = meminstr[13] & _101_;
  assign _107_ = meminstr[12] & regcmem[0];
  assign _108_ = _106_ | _107_;
  assign storemisalig = _103_ & _108_;
  assign loadmisalig = _105_ & _108_;
  assign _109_ = loadmisalig ? 4'h4 : 4'hx;
  assign _110_ = storemisalig ? 4'h6 : _109_;
  assign _111_ = memexecptions[2] ? 4'hb : _110_;
  assign _112_ = memexecptions[0] ? 4'h2 : _111_;
  assign _113_ = instrmisalig ? 4'h0 : _112_;
  assign _114_ = memexecptions[1] ? 4'h3 : _113_;
  assign excpt_cause = irq ? 4'hb : _114_;
  assign _002_ = stall ? idinstr : imem_instruction;
  assign _003_ = flushid ? 32'd19 : _002_;
  assign _004_ = ~ stall;
  assign _005_ = stall | flushid;
  assign _006_ = _005_ ? 1'h0 : match;
  assign _007_ = _004_ ? currentpc : idpc;
  always @(posedge clk)
    idpc <= _007_;
  assign _008_ = _004_ ? nextpc : idpc_4;
  always @(posedge clk)
    idpc_4 <= _008_;
  always @(posedge clk)
    idinstr <= _003_;
  always @(posedge clk)
    idmatch <= _006_;
  always @(posedge clk)
    idprediction <= prediction;
  assign _009_ = a_sel == 2'h0;
  assign _010_ = a_sel == 2'h2;
  assign _011_ = a_sel == 2'h1;
  function [31:0] \866 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \866  = b[31:0];
      3'b?1?:
        \866  = b[63:32];
      3'b1??:
        \866  = b[95:64];
      default:
        \866  = a;
    endcase
  endfunction
  assign muxaval = \866 (32'hxxxxxxxx, { idpc, csrdata, rs1 }, { _011_, _010_, _009_ });
  assign _012_ = b_sel == 2'h0;
  assign _013_ = b_sel == 2'h2;
  assign _014_ = b_sel == 2'h1;
  function [31:0] \877 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \877  = b[31:0];
      3'b?1?:
        \877  = b[63:32];
      3'b1??:
        \877  = b[95:64];
      default:
        \877  = a;
    endcase
  endfunction
  assign muxbval = \877 (32'hxxxxxxxx, { imm, csrdata, rs2 }, { _014_, _013_, _012_ });
  assign _015_ = a_bypass_sel == 3'h1;
  assign _016_ = a_bypass_sel == 3'h0;
  assign _017_ = a_bypass_sel == 3'h2;
  assign _018_ = a_bypass_sel == 3'h3;
  assign _019_ = a_bypass_sel == 3'h4;
  assign _020_ = a_bypass_sel == 3'h5;
  assign _021_ = a_bypass_sel == 3'h6;
  function [31:0] \895 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \895  = b[31:0];
      7'b?????1?:
        \895  = b[63:32];
      7'b????1??:
        \895  = b[95:64];
      7'b???1???:
        \895  = b[127:96];
      7'b??1????:
        \895  = b[159:128];
      7'b?1?????:
        \895  = b[191:160];
      7'b1??????:
        \895  = b[223:192];
      default:
        \895  = a;
    endcase
  endfunction
  assign abypass = \895 (abypass, { mempc_4, alupc_4, memdataload, regcmem, aluresult, muxaval, rd }, { _021_, _020_, _019_, _018_, _017_, _016_, _015_ });
  assign _022_ = b_bypass_sel == 3'h1;
  assign _023_ = b_bypass_sel == 3'h0;
  assign _024_ = b_bypass_sel == 3'h2;
  assign _025_ = b_bypass_sel == 3'h3;
  assign _026_ = b_bypass_sel == 3'h4;
  assign _027_ = b_bypass_sel == 3'h5;
  assign _028_ = b_bypass_sel == 3'h6;
  function [31:0] \913 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \913  = b[31:0];
      7'b?????1?:
        \913  = b[63:32];
      7'b????1??:
        \913  = b[95:64];
      7'b???1???:
        \913  = b[127:96];
      7'b??1????:
        \913  = b[159:128];
      7'b?1?????:
        \913  = b[191:160];
      7'b1??????:
        \913  = b[223:192];
      default:
        \913  = a;
    endcase
  endfunction
  assign bbypass = \913 (bbypass, { mempc_4, alupc_4, memdataload, regcmem, aluresult, muxbval, rd }, { _028_, _027_, _026_, _025_, _024_, _023_, _022_ });
  assign _029_ = rs2_bypass_sel == 3'h1;
  assign _030_ = rs2_bypass_sel == 3'h0;
  assign _031_ = rs2_bypass_sel == 3'h2;
  assign _032_ = rs2_bypass_sel == 3'h3;
  assign _033_ = rs2_bypass_sel == 3'h4;
  assign _034_ = rs2_bypass_sel == 3'h5;
  assign _035_ = rs2_bypass_sel == 3'h6;
  function [31:0] \931 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \931  = b[31:0];
      7'b?????1?:
        \931  = b[63:32];
      7'b????1??:
        \931  = b[95:64];
      7'b???1???:
        \931  = b[127:96];
      7'b??1????:
        \931  = b[159:128];
      7'b?1?????:
        \931  = b[191:160];
      7'b1??????:
        \931  = b[223:192];
      default:
        \931  = a;
    endcase
  endfunction
  assign rs2bypass = \931 (rs2bypass, { mempc_4, alupc_4, memdataload, regcmem, aluresult, rs2, rd }, { _035_, _034_, _033_, _032_, _031_, _030_, _029_ });
  assign _036_ = flushalu ? 32'd19 : idinstr;
  assign _037_ = flushalu ? 3'h0 : { ecall, ebreak, ill_op };
  always @(posedge clk)
    alupc <= idpc;
  always @(posedge clk)
    alupc_4 <= idpc_4;
  always @(posedge clk)
    aluinstr <= _036_;
  always @(posedge clk)
    aluexecptions <= _037_;
  always @(posedge clk)
    regalusel <= alu_sel;
  always @(posedge clk)
    rega <= abypass;
  always @(posedge clk)
    regb <= bbypass;
  always @(posedge clk)
    regrs2alu <= rs2bypass;
  always @(posedge clk)
    regcsralu <= csrdata;
  always @(posedge clk)
    regimmalu <= imm;
  always @(posedge clk)
    alumatch <= idmatch;
  always @(posedge clk)
    aluprediction <= idprediction;
  assign jumptarget = alupc + regimmalu;
  assign _038_ = aluinstr[6:0] == 7'h6f;
  assign aluisjal = _038_ ? 1'h1 : 1'h0;
  assign _039_ = aluinstr[6:0] == 7'h63;
  assign aluisbranch = _039_ ? 1'h1 : 1'h0;
  assign _040_ = flushmem ? 32'd19 : aluinstr;
  assign _041_ = flushmem ? 3'h0 : aluexecptions;
  assign _042_ = flushmem ? 2'h0 : pc_sel;
  assign _043_ = flushmem ? 1'h0 : aluisjal;
  assign _044_ = flushmem ? 1'h0 : aluisbranch;
  alu_32 alu (
    .a(rega),
    .b(regb),
    .c(aluresult),
    .condtrue(condt),
    .funsel(regalusel),
    .z(zero)
  );
  branchpredictor_8_32 branchpredictor (
    .clk(clk),
    .isjal(memisjal),
    .match(match),
    .pcr(currentpc),
    .pcw(mempc),
    .prediction(prediction),
    .rtarget(rtarget),
    .takenjmp(tkbranch),
    .wasmatch(memmatch),
    .wen(bpwen),
    .wtarget(regjmpalign[31:2])
  );
  csrfile_32 csr (
    .clk(clk),
    .csr_data(csrdata),
    .csr_irq(irq),
    .csr_mcause(regcause),
    .csr_mepc(wbpc),
    .csr_pcaddr(csrpc),
    .csr_raddr(idinstr[31:20]),
    .csr_ret(regmret),
    .csr_waddr(meminstr[31:20]),
    .csr_wdata(regcmem),
    .csr_wen(allowcsrwrite),
    .csr_wen_traps(regcsrtrap),
    .extern_irq(extern_irq)
  );
  immdecoder_32 immediatedecoder (
    .imm_sel(imm_sel),
    .immediate(imm),
    .instruction(idinstr[31:7])
  );
  meminterface_32 memoryinterface (
    .data_load(memdataload),
    .data_store(regrs2mem),
    .extern_data_load(dmem_dataload),
    .extern_data_store(_000_),
    .extern_mem_addr(_001_),
    .mem_addr(regcmem),
    .mem_size(meminstr[14:12])
  );
  programcounter_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa programcounter (
    .clk(clk),
    .current_addr(currentpc),
    .except_addr(csrpc),
    .jalr({ regcmem[31:1], 1'h0 }),
    .jumps(realjmp),
    .next_addr(nextpc),
    .pc_sel({ _068_, _066_ }),
    .stall(pcstall)
  );
  registerfile_32 registers (
    .clk(clk),
    .rega_addr(idinstr[19:15]),
    .rega_data(rs1),
    .regb_addr(idinstr[24:20]),
    .regb_data(rs2),
    .w_addr(wbinstr[11:7]),
    .w_data(rd),
    .w_en(regfile_wen)
  );
  assign imem_addr = currentpc;
  assign dmem_addr = _001_;
  assign dmem_datastore = _000_;
  assign trap = trap_wrap;
  assign wbtrap = regwbtrap;
  assign wbmret = regmret;
  assign branch = correctjmp;
  assign id_opcode = idinstr[6:0];
  assign id_funct3 = idinstr[14:12];
  assign id_funct7 = { idinstr[30:29], idinstr[21:20] };
  assign alu_opcode = aluinstr[6:0];
  assign alu_funct3 = aluinstr[14:12];
  assign alu_funct7 = { aluinstr[30:29], aluinstr[21:20] };
  assign mem_opcode = meminstr[6:0];
  assign mem_funct3 = meminstr[14:12];
  assign mem_funct7 = { meminstr[30:29], meminstr[21:20] };
  assign wb_opcode = wbinstr[6:0];
  assign wb_funct3 = wbinstr[14:12];
  assign ra_id = idinstr[19:15];
  assign rb_id = idinstr[24:20];
  assign rd_alu = aluinstr[11:7];
  assign rd_mem = meminstr[11:7];
  assign rd_wb = wbinstr[11:7];
endmodule

module immdecoder_32(instruction, imm_sel, immediate);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [3:0] _07_;
  wire [5:0] _08_;
  wire _09_;
  wire [7:0] _10_;
  wire [10:0] _11_;
  wire _12_;
  input [2:0] imm_sel;
  output [31:0] immediate;
  input [24:0] instruction;
  assign _00_ = imm_sel == 3'h0;
  assign _01_ = imm_sel == 3'h1;
  assign _02_ = imm_sel == 3'h2;
  assign _03_ = imm_sel == 3'h3;
  assign _04_ = imm_sel == 3'h4;
  assign _05_ = imm_sel == 3'h5;
  function [0:0] \1590 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1590  = b[0:0];
      6'b????1?:
        \1590  = b[1:1];
      6'b???1??:
        \1590  = b[2:2];
      6'b??1???:
        \1590  = b[3:3];
      6'b?1????:
        \1590  = b[4:4];
      6'b1?????:
        \1590  = b[5:5];
      default:
        \1590  = a;
    endcase
  endfunction
  assign _06_ = \1590 (1'hx, { instruction[8], 3'h0, instruction[0], instruction[13] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [3:0] \1597 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1597  = b[3:0];
      6'b????1?:
        \1597  = b[7:4];
      6'b???1??:
        \1597  = b[11:8];
      6'b??1???:
        \1597  = b[15:12];
      6'b?1????:
        \1597  = b[19:16];
      6'b1?????:
        \1597  = b[23:20];
      default:
        \1597  = a;
    endcase
  endfunction
  assign _07_ = \1597 (4'hx, { instruction[12:9], instruction[17:14], 4'h0, instruction[4:1], instruction[4:1], instruction[17:14] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [5:0] \1603 ;
    input [5:0] a;
    input [35:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1603  = b[5:0];
      6'b????1?:
        \1603  = b[11:6];
      6'b???1??:
        \1603  = b[17:12];
      6'b??1???:
        \1603  = b[23:18];
      6'b?1????:
        \1603  = b[29:24];
      6'b1?????:
        \1603  = b[35:30];
      default:
        \1603  = a;
    endcase
  endfunction
  assign _08_ = \1603 (6'hxx, { 6'h00, instruction[23:18], 6'h00, instruction[23:18], instruction[23:18], instruction[23:18] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [0:0] \1609 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1609  = b[0:0];
      6'b????1?:
        \1609  = b[1:1];
      6'b???1??:
        \1609  = b[2:2];
      6'b??1???:
        \1609  = b[3:3];
      6'b?1????:
        \1609  = b[4:4];
      6'b1?????:
        \1609  = b[5:5];
      default:
        \1609  = a;
    endcase
  endfunction
  assign _09_ = \1609 (1'hx, { 1'h0, instruction[13], 1'h0, instruction[0], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [7:0] \1616 ;
    input [7:0] a;
    input [47:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1616  = b[7:0];
      6'b????1?:
        \1616  = b[15:8];
      6'b???1??:
        \1616  = b[23:16];
      6'b??1???:
        \1616  = b[31:24];
      6'b?1????:
        \1616  = b[39:32];
      6'b1?????:
        \1616  = b[47:40];
      default:
        \1616  = a;
    endcase
  endfunction
  assign _10_ = \1616 (8'hxx, { 8'h00, instruction[12:5], instruction[12:5], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [10:0] \1624 ;
    input [10:0] a;
    input [65:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1624  = b[10:0];
      6'b????1?:
        \1624  = b[21:11];
      6'b???1??:
        \1624  = b[32:22];
      6'b??1???:
        \1624  = b[43:33];
      6'b?1????:
        \1624  = b[54:44];
      6'b1?????:
        \1624  = b[65:55];
      default:
        \1624  = a;
    endcase
  endfunction
  assign _11_ = \1624 (11'hxxx, { 11'h000, instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24:13], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [0:0] \1631 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \1631  = b[0:0];
      6'b????1?:
        \1631  = b[1:1];
      6'b???1??:
        \1631  = b[2:2];
      6'b??1???:
        \1631  = b[3:3];
      6'b?1????:
        \1631  = b[4:4];
      6'b1?????:
        \1631  = b[5:5];
      default:
        \1631  = a;
    endcase
  endfunction
  assign _12_ = \1631 (1'hx, { 1'h0, instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  assign immediate = { _12_, _11_, _10_, _09_, _08_, _07_, _06_ };
endmodule

module meminterface_32(extern_data_load, data_store, mem_addr, mem_size, extern_data_store, extern_mem_addr, data_load);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire [31:0] _23_;
  wire [7:0] \byte_size_load.byteval ;
  wire [23:0] \byte_size_load.extension ;
  wire [31:0] \byte_size_store.storebyte ;
  output [31:0] data_load;
  input [31:0] data_store;
  input [31:0] extern_data_load;
  output [31:0] extern_data_store;
  output [31:0] extern_mem_addr;
  wire [15:0] \halfword_size_load.extension ;
  wire [15:0] \halfword_size_load.halfwordval ;
  wire [31:0] \halfword_size_store.storehalfw ;
  input [31:0] mem_addr;
  input [2:0] mem_size;
  assign _00_ = mem_addr[1:0] == 2'h0;
  assign _01_ = mem_addr[1:0] == 2'h1;
  assign _02_ = mem_addr[1:0] == 2'h2;
  assign _03_ = mem_addr[1:0] == 2'h3;
  function [7:0] \1905 ;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1905  = b[7:0];
      4'b??1?:
        \1905  = b[15:8];
      4'b?1??:
        \1905  = b[23:16];
      4'b1???:
        \1905  = b[31:24];
      default:
        \1905  = a;
    endcase
  endfunction
  assign \byte_size_load.byteval  = \1905 (\byte_size_load.byteval , extern_data_load, { _03_, _02_, _01_, _00_ });
  assign _04_ = mem_size[2] == 1'h0;
  assign _05_ = mem_size[2] == 1'h1;
  function [23:0] \1946 ;
    input [23:0] a;
    input [47:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1946  = b[23:0];
      2'b1?:
        \1946  = b[47:24];
      default:
        \1946  = a;
    endcase
  endfunction
  assign \byte_size_load.extension  = \1946 (\byte_size_load.extension , { 24'h000000, \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7] }, { _05_, _04_ });
  assign _06_ = mem_addr[1] == 1'h0;
  assign _07_ = mem_addr[1] == 1'h1;
  function [15:0] \1960 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1960  = b[15:0];
      2'b1?:
        \1960  = b[31:16];
      default:
        \1960  = a;
    endcase
  endfunction
  assign \halfword_size_load.halfwordval  = \1960 (\halfword_size_load.halfwordval , extern_data_load, { _07_, _06_ });
  assign _08_ = mem_size[2] == 1'h0;
  assign _09_ = mem_size[2] == 1'h1;
  function [15:0] \1989 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1989  = b[15:0];
      2'b1?:
        \1989  = b[31:16];
      default:
        \1989  = a;
    endcase
  endfunction
  assign \halfword_size_load.extension  = \1989 (\halfword_size_load.extension , { 16'h0000, \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15] }, { _09_, _08_ });
  assign _10_ = mem_size[1:0] == 2'h0;
  assign _11_ = mem_size[1:0] == 2'h1;
  assign _12_ = mem_size[1:0] == 2'h2;
  function [31:0] \2002 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \2002  = b[31:0];
      3'b?1?:
        \2002  = b[63:32];
      3'b1??:
        \2002  = b[95:64];
      default:
        \2002  = a;
    endcase
  endfunction
  assign _13_ = \2002 (32'hxxxxxxxx, { extern_data_load, \halfword_size_load.extension , \halfword_size_load.halfwordval , \byte_size_load.extension , \byte_size_load.byteval  }, { _12_, _11_, _10_ });
  assign _14_ = mem_addr[1:0] == 2'h0;
  assign _15_ = mem_addr[1:0] == 2'h1;
  assign _16_ = mem_addr[1:0] == 2'h2;
  assign _17_ = mem_addr[1:0] == 2'h3;
  function [31:0] \2032 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \2032  = b[31:0];
      4'b??1?:
        \2032  = b[63:32];
      4'b?1??:
        \2032  = b[95:64];
      4'b1???:
        \2032  = b[127:96];
      default:
        \2032  = a;
    endcase
  endfunction
  assign \byte_size_store.storebyte  = \2032 (\byte_size_store.storebyte , { data_store[7:0], extern_data_load[23:0], extern_data_load[31:24], data_store[7:0], extern_data_load[15:0], extern_data_load[31:16], data_store[7:0], extern_data_load[7:0], extern_data_load[31:8], data_store[7:0] }, { _17_, _16_, _15_, _14_ });
  assign _18_ = mem_addr[1] == 1'h1;
  assign _19_ = mem_addr[1] == 1'h0;
  function [31:0] \2048 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2048  = b[31:0];
      2'b1?:
        \2048  = b[63:32];
      default:
        \2048  = a;
    endcase
  endfunction
  assign \halfword_size_store.storehalfw  = \2048 (\halfword_size_store.storehalfw , { extern_data_load[31:16], data_store[15:0], data_store[15:0], extern_data_load[15:0] }, { _19_, _18_ });
  assign _20_ = mem_size[1:0] == 2'h0;
  assign _21_ = mem_size[1:0] == 2'h1;
  assign _22_ = mem_size[1:0] == 2'h2;
  function [31:0] \2060 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \2060  = b[31:0];
      3'b?1?:
        \2060  = b[63:32];
      3'b1??:
        \2060  = b[95:64];
      default:
        \2060  = a;
    endcase
  endfunction
  assign _23_ = \2060 (32'hxxxxxxxx, { data_store, \halfword_size_store.storehalfw , \byte_size_store.storebyte  }, { _22_, _21_, _20_ });
  assign extern_data_store = _23_;
  assign extern_mem_addr = mem_addr;
  assign data_load = _13_;
endmodule

module programcounter_32_39d7544d97a008fb17fbddd8b87380f3cfa24caa(clk, jumps, except_addr, jalr, pc_sel, stall, current_addr, next_addr);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input clk;
  output [31:0] current_addr;
  input [31:0] except_addr;
  input [31:0] jalr;
  input [31:0] jumps;
  output [31:0] next_addr;
  wire [31:0] next_instruction;
  reg [31:0] pc = 32'd32;
  wire [31:0] pc_mux;
  input [1:0] pc_sel;
  input stall;
  assign _0_ = stall != 1'h1;
  assign _1_ = _0_ ? pc_mux : pc;
  always @(posedge clk)
    pc <= _1_;
  assign _2_ = pc_sel == 2'h1;
  assign _3_ = pc_sel == 2'h3;
  assign _4_ = pc_sel == 2'h0;
  assign _5_ = pc_sel == 2'h2;
  function [31:0] \1291 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1291  = b[31:0];
      4'b??1?:
        \1291  = b[63:32];
      4'b?1??:
        \1291  = b[95:64];
      4'b1???:
        \1291  = b[127:96];
      default:
        \1291  = a;
    endcase
  endfunction
  assign pc_mux = \1291 (pc_mux, { jalr, next_instruction, except_addr, jumps }, { _5_, _4_, _3_, _2_ });
  assign next_instruction = pc + 32'd4;
  assign current_addr = pc;
  assign next_addr = next_instruction;
endmodule

module registerfile_32(clk, rega_addr, regb_addr, w_data, w_addr, w_en, rega_data, regb_data);
  wire _0_;
  wire _1_;
  wire _2_;
  wire [31:0] _3_;
  wire _4_;
  wire [31:0] _5_;
  wire [1023:0] _6_;
  wire [31:0] _7_;
  wire [1023:0] _8_;
  wire [31:0] _9_;
  input clk;
  input [4:0] rega_addr;
  output [31:0] rega_data;
  input [4:0] regb_addr;
  output [31:0] regb_data;
  input [4:0] w_addr;
  input [31:0] w_data;
  input w_en;
  reg [31:0] \$mem$\1448  [31:0];
  assign _0_ = w_addr != 5'h00;
  assign _1_ = _0_ & w_en;
  assign _2_ = rega_addr == 5'h00;
  assign _3_ = _2_ ? 32'd0 : _9_;
  assign _4_ = regb_addr == 5'h00;
  assign _5_ = _4_ ? 32'd0 : _7_;
  reg [31:0] \1448  [31:0];
  always @(posedge clk) begin
    if (_1_) \1448 [w_addr] <= w_data;
  end
  assign _7_ = \1448 [regb_addr];
  assign _9_ = \1448 [rega_addr];
  assign rega_data = _3_;
  assign regb_data = _5_;
endmodule
