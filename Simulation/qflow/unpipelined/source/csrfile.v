/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module csr(clk, Extern_IRQ, CSR_mepc, CSR_Wdata, CSR_mcause, CSR_addr, CSR_Wen, CSR_Wen_traps, CSR_Ret, CSR_IRQ, CSR_PCaddr, CSR_data);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire [29:0] _20_;
  wire [29:0] _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire [31:0] _27_;
  wire [31:0] _28_;
  wire _29_;
  wire _30_;
  wire [1:0] _31_;
  wire [1:0] _32_;
  wire [1:0] _33_;
  wire _34_;
  wire [31:0] _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire [31:0] _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  output CSR_IRQ;
  output [31:0] CSR_PCaddr;
  input CSR_Ret;
  input [31:0] CSR_Wdata;
  input CSR_Wen;
  input CSR_Wen_traps;
  input [11:0] CSR_addr;
  output [31:0] CSR_data;
  input [3:0] CSR_mcause;
  input [31:0] CSR_mepc;
  input Extern_IRQ;
  input clk;
  wire irq;
  reg [31:0] mcause;
  reg [29:0] mepc;
  reg meta_irq = 1'h0;
  reg mie = 1'h0;
  reg mip = 1'h0;
  reg [1:0] mstatus = 2'h0;
  reg [31:0] mvect;
  wire [31:0] \trap_addr.mvect_out ;
  wire [31:0] \trap_addr.pcaddr ;
  assign irq = _00_ & mie;
  assign _23_ = CSR_Wen & _22_;
  assign _24_ = CSR_Ret != 1'h1;
  assign _25_ = _23_ & _24_;
  assign _27_ = _25_ ? { 1'h0, CSR_Wdata[30:0] } : mcause;
  assign _28_ = CSR_Wen_traps ? { irq, 27'h0000000, CSR_mcause } : _27_;
  always @(posedge clk)
    mcause <= _28_;
  assign _29_ = CSR_addr == 12'h300;
  assign _30_ = CSR_Wen & _29_;
  assign _31_ = _30_ ? { CSR_Wdata[7], CSR_Wdata[3] } : mstatus;
  assign _32_ = CSR_Ret ? { 1'h1, mstatus[1] } : _31_;
  assign _33_ = CSR_Wen_traps ? { mstatus[0], 1'h0 } : _32_;
  always @(posedge clk)
    mstatus <= _33_;
  assign _34_ = CSR_addr == 12'h342;
  assign _36_ = CSR_addr == 12'h300;
  assign _37_ = CSR_addr == 12'h305;
  assign _38_ = CSR_addr == 12'h301;
  assign _39_ = CSR_addr == 12'h341;
  assign _40_ = CSR_addr == 12'h304;
  assign _41_ = CSR_addr == 12'h344;
  function [31:0] \170 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \170  = b[31:0];
      7'b?????1?:
        \170  = b[63:32];
      7'b????1??:
        \170  = b[95:64];
      7'b???1???:
        \170  = b[127:96];
      7'b??1????:
        \170  = b[159:128];
      7'b?1?????:
        \170  = b[191:160];
      7'b1??????:
        \170  = b[223:192];
      default:
        \170  = a;
    endcase
  endfunction
  assign _42_ = \170 (32'd0, { 20'h00000, mip, 31'h00000000, mie, 11'h000, mepc, 34'h040000100, mvect, 24'h000018, mstatus[1], 3'h0, mstatus[0], 3'h0, mcause }, { _41_, _40_, _39_, _38_, _37_, _36_, _34_ });
  assign _16_ = irq & mvect[0];
  assign _26_ = _16_ == 1'h0;
  assign _35_ = { mvect[31:2], 2'h0 } + 32'd44;
  assign _43_ = _16_ == 1'h1;
  function [31:0] \28 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \28  = b[31:0];
      2'b1?:
        \28  = b[63:32];
      default:
        \28  = a;
    endcase
  endfunction
  assign \trap_addr.mvect_out  = \28 (\trap_addr.mvect_out , { _35_, mvect[31:2], 2'h0 }, { _43_, _26_ });
  assign _44_ = CSR_Ret == 1'h1;
  assign _45_ = CSR_Ret == 1'h0;
  function [31:0] \36 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \36  = b[31:0];
      2'b1?:
        \36  = b[63:32];
      default:
        \36  = a;
    endcase
  endfunction
  assign \trap_addr.pcaddr  = \36 (\trap_addr.pcaddr , { \trap_addr.mvect_out , mepc, 2'h0 }, { _45_, _44_ });
  assign _01_ = CSR_addr == 12'h305;
  assign _02_ = CSR_Wen & _01_;
  assign _03_ = CSR_Ret != 1'h1;
  assign _04_ = _02_ & _03_;
  assign _05_ = CSR_Wen_traps != 1'h1;
  assign _06_ = _04_ & _05_;
  assign _07_ = _06_ ? CSR_Wdata : mvect;
  always @(posedge clk)
    mvect <= _07_;
  assign _08_ = CSR_addr == 12'h304;
  assign _09_ = CSR_Wen & _08_;
  assign _10_ = CSR_Ret != 1'h1;
  assign _11_ = _09_ & _10_;
  assign _12_ = CSR_Wen_traps != 1'h1;
  assign _13_ = _11_ & _12_;
  assign _14_ = _13_ ? CSR_Wdata[11] : mie;
  always @(posedge clk)
    mie <= _14_;
  always @(posedge clk)
    mip <= meta_irq;
  always @(posedge clk)
    meta_irq <= Extern_IRQ;
  assign _15_ = CSR_addr == 12'h341;
  assign _17_ = CSR_Wen & _15_;
  assign _18_ = CSR_Ret != 1'h1;
  assign _19_ = _17_ & _18_;
  assign _20_ = _19_ ? CSR_Wdata[31:2] : mepc;
  assign _21_ = CSR_Wen_traps ? CSR_mepc[31:2] : _20_;
  assign _00_ = mstatus[0] & mip;
  always @(posedge clk)
    mepc <= _21_;
  assign _22_ = CSR_addr == 12'h342;
  assign CSR_IRQ = irq;
  assign CSR_PCaddr = \trap_addr.pcaddr ;
  assign CSR_data = _42_;
endmodule
