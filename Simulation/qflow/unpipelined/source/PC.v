/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module ProgramCounter(clk, Jumps, Except_addr, JALR, PC_sel, Stall, Current_addr, Next_addr);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  output [31:0] Current_addr;
  input [31:0] Except_addr;
  input [31:0] JALR;
  input [31:0] Jumps;
  output [31:0] Next_addr;
  input [1:0] PC_sel;
  input Stall;
  input clk;
  wire [31:0] next_instruction;
  reg [31:0] pc = 32'd64;
  wire [31:0] pc_mux;
  assign _1_ = _0_ ? pc_mux : pc;
  always @(posedge clk)
    pc <= _1_;
  assign _2_ = PC_sel == 2'h1;
  assign _3_ = PC_sel == 2'h3;
  assign _4_ = PC_sel == 2'h0;
  assign _5_ = PC_sel == 2'h2;
  function [31:0] \22 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \22  = b[31:0];
      4'b??1?:
        \22  = b[63:32];
      4'b?1??:
        \22  = b[95:64];
      4'b1???:
        \22  = b[127:96];
      default:
        \22  = a;
    endcase
  endfunction
  assign pc_mux = \22 (pc_mux, { JALR, next_instruction, Except_addr, Jumps }, { _5_, _4_, _3_, _2_ });
  assign next_instruction = pc + 32'd4;
  assign _0_ = Stall != 1'h1;
  assign Current_addr = pc;
  assign Next_addr = next_instruction;
endmodule
