/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module MemInterface(Extern_Data_Load, Data_Store, Mem_addr, Mem_size, Extern_Data_Store, Extern_Mem_addr, Data_Load);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire [31:0] _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  output [31:0] Data_Load;
  input [31:0] Data_Store;
  input [31:0] Extern_Data_Load;
  output [31:0] Extern_Data_Store;
  output [31:0] Extern_Mem_addr;
  input [31:0] Mem_addr;
  input [2:0] Mem_size;
  wire [7:0] \byte_size_load.byteval ;
  wire [23:0] \byte_size_load.extension ;
  wire [31:0] \byte_size_store.storebyte ;
  wire [15:0] \halfword_size_load.extension ;
  wire [15:0] \halfword_size_load.halfwordval ;
  wire [31:0] \halfword_size_store.storehalfw ;
  assign _03_ = Mem_size[2] == 1'h1;
  function [15:0] \104 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \104  = b[15:0];
      2'b1?:
        \104  = b[31:16];
      default:
        \104  = a;
    endcase
  endfunction
  assign \halfword_size_load.extension  = \104 (\halfword_size_load.extension , { 16'h0000, \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15] }, { _03_, _02_ });
  assign _04_ = Mem_size[1:0] == 2'h0;
  assign _05_ = Mem_size[1:0] == 2'h1;
  assign _06_ = Mem_size[1:0] == 2'h2;
  function [31:0] \117 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \117  = b[31:0];
      3'b?1?:
        \117  = b[63:32];
      3'b1??:
        \117  = b[95:64];
      default:
        \117  = a;
    endcase
  endfunction
  assign _07_ = \117 (32'hxxxxxxxx, { Extern_Data_Load, \halfword_size_load.extension , \halfword_size_load.halfwordval , \byte_size_load.extension , \byte_size_load.byteval  }, { _06_, _05_, _04_ });
  assign _09_ = Mem_addr[1:0] == 2'h1;
  assign _08_ = Mem_addr[1:0] == 2'h0;
  assign _10_ = Mem_addr[1:0] == 2'h1;
  assign _11_ = Mem_addr[1:0] == 2'h2;
  assign _12_ = Mem_addr[1:0] == 2'h3;
  function [31:0] \147 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \147  = b[31:0];
      4'b??1?:
        \147  = b[63:32];
      4'b?1??:
        \147  = b[95:64];
      4'b1???:
        \147  = b[127:96];
      default:
        \147  = a;
    endcase
  endfunction
  assign \byte_size_store.storebyte  = \147 (\byte_size_store.storebyte , { Data_Store[7:0], Extern_Data_Load[23:0], Extern_Data_Load[31:24], Data_Store[7:0], Extern_Data_Load[15:0], Extern_Data_Load[31:16], Data_Store[7:0], Extern_Data_Load[7:0], Extern_Data_Load[31:8], Data_Store[7:0] }, { _12_, _11_, _10_, _08_ });
  assign _18_ = Mem_addr[1:0] == 2'h2;
  assign _13_ = Mem_addr[1] == 1'h1;
  assign _14_ = Mem_addr[1] == 1'h0;
  function [31:0] \163 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \163  = b[31:0];
      2'b1?:
        \163  = b[63:32];
      default:
        \163  = a;
    endcase
  endfunction
  assign \halfword_size_store.storehalfw  = \163 (\halfword_size_store.storehalfw , { Extern_Data_Load[31:16], Data_Store[15:0], Data_Store[15:0], Extern_Data_Load[15:0] }, { _14_, _13_ });
  assign _15_ = Mem_size[1:0] == 2'h0;
  assign _16_ = Mem_size[1:0] == 2'h1;
  assign _17_ = Mem_size[1:0] == 2'h2;
  function [31:0] \175 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \175  = b[31:0];
      3'b?1?:
        \175  = b[63:32];
      3'b1??:
        \175  = b[95:64];
      default:
        \175  = a;
    endcase
  endfunction
  assign _19_ = \175 (32'hxxxxxxxx, { Data_Store, \halfword_size_store.storehalfw , \byte_size_store.storebyte  }, { _17_, _16_, _15_ });
  assign _20_ = Mem_addr[1:0] == 2'h3;
  function [7:0] \20 ;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \20  = b[7:0];
      4'b??1?:
        \20  = b[15:8];
      4'b?1??:
        \20  = b[23:16];
      4'b1???:
        \20  = b[31:24];
      default:
        \20  = a;
    endcase
  endfunction
  assign \byte_size_load.byteval  = \20 (\byte_size_load.byteval , Extern_Data_Load, { _20_, _18_, _09_, _00_ });
  assign _21_ = Mem_size[2] == 1'h0;
  assign _22_ = Mem_size[2] == 1'h1;
  function [23:0] \61 ;
    input [23:0] a;
    input [47:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \61  = b[23:0];
      2'b1?:
        \61  = b[47:24];
      default:
        \61  = a;
    endcase
  endfunction
  assign \byte_size_load.extension  = \61 (\byte_size_load.extension , { 24'h000000, \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7] }, { _22_, _21_ });
  assign _23_ = Mem_addr[1] == 1'h0;
  assign _01_ = Mem_addr[1] == 1'h1;
  function [15:0] \75 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \75  = b[15:0];
      2'b1?:
        \75  = b[31:16];
      default:
        \75  = a;
    endcase
  endfunction
  assign \halfword_size_load.halfwordval  = \75 (\halfword_size_load.halfwordval , Extern_Data_Load, { _01_, _23_ });
  assign _00_ = Mem_addr[1:0] == 2'h0;
  assign _02_ = Mem_size[2] == 1'h0;
  assign Extern_Data_Store = _19_;
  assign Extern_Mem_addr = Mem_addr;
  assign Data_Load = _07_;
endmodule
