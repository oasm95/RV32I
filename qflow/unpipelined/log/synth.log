Qflow synthesis logfile created on mi√© 11 nov 2020 19:07:18 CST
Running yosys for verilog parsing and synthesis
yosys  -s csr.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, gcc 10.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)


-- Executing script file `csr.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v
Parsing Verilog input from `/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v' to AST representation.
Generating RTLIL representation for module `\csr'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \csr

3.1.2. Analyzing design hierarchy..
Top module:  \csr
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74 in module csr.
Marked 1 switch rules as full_case in process $proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67 in module csr.
Marked 1 switch rules as full_case in process $proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60 in module csr.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:68$84'.
  Set init value: \mstatus = 2'00
Found init rule in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:67$83'.
  Set init value: \mip = 1'0
Found init rule in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:66$82'.
  Set init value: \mie = 1'0
Found init rule in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:65$81'.
  Set init value: \meta_irq = 1'0

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:68$84'.
     1/1: $1\mstatus[1:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:67$83'.
     1/1: $1\mip[0:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:66$82'.
     1/1: $1\mie[0:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:65$81'.
     1/1: $1\meta_irq[0:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
     1/6: $1$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\36[31:0]$80
     2/6: $0$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$3$\36[31:0]$75
     3/6: $0$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\36[31:0]$76
     4/6: $0$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\s[1:0]$79
     5/6: $0$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\b[63:0]$78
     6/6: $0$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\a[31:0]$77
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
     1/6: $1$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\28[31:0]$73
     2/6: $0$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$2$\28[31:0]$68
     3/6: $0$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\28[31:0]$69
     4/6: $0$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\s[1:0]$72
     5/6: $0$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\b[63:0]$71
     6/6: $0$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\a[31:0]$70
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
     1/6: $1$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\170[31:0]$66
     2/6: $0$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$1$\170[31:0]$61
     3/6: $0$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\170[31:0]$62
     4/6: $0$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\s[6:0]$65
     5/6: $0$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\b[223:0]$64
     6/6: $0$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\a[31:0]$63
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:184$58'.
     1/1: $0\mepc[29:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:175$50'.
     1/1: $0\meta_irq[0:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:173$49'.
     1/1: $0\mip[0:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:171$48'.
     1/1: $0\mie[0:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:162$40'.
     1/1: $0\mvect[31:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:85$19'.
     1/1: $0\mstatus[1:0]
Creating decoders for process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:78$13'.
     1/1: $0\mcause[31:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\csr.$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\36' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
No latch inferred for signal `\csr.$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\a' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
No latch inferred for signal `\csr.$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\b' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
No latch inferred for signal `\csr.$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$6$\s' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
Latch inferred for signal `\csr.$func$\36$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:154$3$\36' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74': $auto$proc_dlatch.cc:409:proc_dlatch$118
No latch inferred for signal `\csr.$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\28' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
No latch inferred for signal `\csr.$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\a' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
No latch inferred for signal `\csr.$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\b' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
No latch inferred for signal `\csr.$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$5$\s' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
Latch inferred for signal `\csr.$func$\28$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:137$2$\28' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67': $auto$proc_dlatch.cc:409:proc_dlatch$135
No latch inferred for signal `\csr.$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$1$\170' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
No latch inferred for signal `\csr.$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\170' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
No latch inferred for signal `\csr.$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\a' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
No latch inferred for signal `\csr.$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\b' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
No latch inferred for signal `\csr.$func$\170$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:118$4$\s' from process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\csr.\mepc' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:184$58'.
  created $dff cell `$procdff$136' with positive edge clock.
Creating register for signal `\csr.\meta_irq' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:175$50'.
  created $dff cell `$procdff$137' with positive edge clock.
Creating register for signal `\csr.\mip' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:173$49'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\csr.\mie' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:171$48'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\csr.\mvect' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:162$40'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\csr.\mstatus' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:85$19'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\csr.\mcause' using process `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:78$13'.
  created $dff cell `$procdff$142' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:68$84'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:67$83'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:66$82'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:65$81'.
Found and cleaned up 1 empty switch in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:140$74'.
Found and cleaned up 1 empty switch in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:123$67'.
Found and cleaned up 1 empty switch in `\csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:94$60'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:184$58'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:175$50'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:173$49'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:171$48'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:162$40'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:85$19'.
Removing empty process `csr.$proc$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:78$13'.
Cleaned up 3 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.
<suppressed ~24 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..
Removed 2 unused cells and 121 unused wires.
<suppressed ~3 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module csr..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \csr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \csr.
    New ctrl vector for $pmux cell $procmux$86: \_45_
    New ctrl vector for $pmux cell $procmux$90: \_16_
  Optimizing cells in module \csr.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$proc_dlatch.cc:409:proc_dlatch$118 ($dlatch) from module csr.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$135 ($dlatch) from module csr.
Replaced 2 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..
Removed 1 unused cells and 13 unused wires.
<suppressed ~2 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.
<suppressed ~1 debug messages>

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \csr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \csr.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:80$14 ($eq).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:90$23 ($eq).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:93$26 ($eq).
Removed top 26 bits (of 32) from port B of cell csr.$add$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:121$29 ($add).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:155$33 ($eq).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:164$41 ($eq).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:177$51 ($eq).
Removed top 2 bits (of 12) from port B of cell csr.$eq$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:186$59 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~116 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module csr:
  creating $macc model for $add$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:121$29 ($add).
  creating $alu model for $macc $add$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:121$29.
  creating $alu cell for $add$/home/dadmin/Documents/tesis/dev/qflow/unpipelined/source/csrfile.v:121$29: $auto$alumacc.cc:474:replace_alu$143
  created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \csr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \csr.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \csr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \csr.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~441 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.
<suppressed ~494 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
<suppressed ~189 debug messages>
Removed a total of 63 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..
Removed 36 unused cells and 234 unused wires.
<suppressed ~37 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\csr' to `<abc-temp-dir>/input.blif'..
Extracted 575 gates and 756 wires to a netlist network with 179 inputs and 160 outputs.

3.23.1.1. Executing ABC.
Running ABC command: abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        6
ABC RESULTS:            ANDNOT cells:       48
ABC RESULTS:              AOI3 cells:       38
ABC RESULTS:              AOI4 cells:       29
ABC RESULTS:               MUX cells:      192
ABC RESULTS:              NAND cells:       22
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:       43
ABC RESULTS:             ORNOT cells:       37
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:               XOR cells:       17
ABC RESULTS:        internal signals:      417
ABC RESULTS:           input signals:      179
ABC RESULTS:          output signals:      160
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.
<suppressed ~25 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..
Removed 1 unused cells and 490 unused wires.
<suppressed ~2 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \csr

3.25.2. Analyzing design hierarchy..
Top module:  \csr
Removed 0 unused modules.

3.26. Printing statistics.

=== csr ===

   Number of wires:                329
   Number of wire bits:            713
   Number of public wires:          27
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                561
     $_ANDNOT_                      48
     $_AND_                          6
     $_AOI3_                        38
     $_AOI4_                        29
     $_DFF_P_                       99
     $_MUX_                        192
     $_NAND_                        22
     $_NOR_                          8
     $_NOT_                          6
     $_OAI3_                         2
     $_OAI4_                         1
     $_ORNOT_                       37
     $_OR_                          43
     $_XNOR_                        13
     $_XOR_                         17

3.27. Executing CHECK pass (checking for obvious problems).
checking module csr..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\csr':
  mapped 99 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \csr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \csr.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\csr' to `<abc-temp-dir>/input.blif'..
Extracted 462 gates and 641 wires to a netlist network with 179 inputs and 160 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       14
ABC RESULTS:           AOI21X1 cells:       71
ABC RESULTS:           AOI22X1 cells:       33
ABC RESULTS:             INVX1 cells:       89
ABC RESULTS:            MUX2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:      108
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:            NOR2X1 cells:      107
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI21X1 cells:      183
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        7
ABC RESULTS:           XNOR2X1 cells:        4
ABC RESULTS:        internal signals:      302
ABC RESULTS:           input signals:      179
ABC RESULTS:          output signals:      160
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 644 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port csr.CSR_IRQ using BUFX2.
Mapping port csr.CSR_PCaddr using BUFX2.
Don't map input port csr.CSR_Ret: Missing option -inpad.
Don't map input port csr.CSR_Wdata: Missing option -inpad.
Don't map input port csr.CSR_Wen: Missing option -inpad.
Don't map input port csr.CSR_Wen_traps: Missing option -inpad.
Don't map input port csr.CSR_addr: Missing option -inpad.
Mapping port csr.CSR_data using BUFX2.
Don't map input port csr.CSR_mcause: Missing option -inpad.
Don't map input port csr.CSR_mepc: Missing option -inpad.
Don't map input port csr.Extern_IRQ: Missing option -inpad.
Don't map input port csr.clk: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \csr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \csr.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\csr'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \csr..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module csr.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing Verilog backend.
Dumping module `\csr'.

12. Printing statistics.

=== csr ===

   Number of wires:                508
   Number of wire bits:            892
   Number of public wires:         508
   Number of public wire bits:     892
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                805
     AND2X2                         14
     AOI21X1                        71
     AOI22X1                        33
     BUFX2                          65
     DFFPOSX1                       99
     INVX1                          89
     MUX2X1                          3
     NAND2X1                       108
     NAND3X1                        14
     NOR2X1                        107
     NOR3X1                          7
     OAI21X1                       183
     OAI22X1                         1
     OR2X2                           7
     XNOR2X1                         4

End of script. Logfile hash: 954a38906d
CPU: user 0.55s system 0.01s, MEM: 40.25 MB total, 25.86 MB resident
Yosys 0.9 (git sha1 UNKNOWN, gcc 10.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)
Time spent: 25% 2x write_verilog (0 sec), 13% 17x opt_clean (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Running vlogFanout
vlogFanout -l 100 -c 20 -I csr_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y csr_mapped.v csr_sized.v

vlogFanout for qflow 1.4.87
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 63 (load 1053.7) from node _112_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 18.043 (latency = 1804.3 ps)
Top input node fanout is 99 (load 2764.43) from node clk.
0 gates exceed specified minimum load.
72 buffers were added.
Warning 1: load of 111.999 is 1.91782 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 10: load of 123.963 is 2.15144 times greater than strongest gate NAND3X1
Warning 14: load of 128.024 is 2.17913 times greater than strongest gate NOR3X1
Warning 95: load of 510.369 is 8.73931 times greater than strongest gate NAND2X1
Warning 105: load of 964.881 is 16.5222 times greater than strongest gate NAND2X1
Warning 109: load of 1063.7 is 18.2142 times greater than strongest gate NAND2X1
14 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 728    	Out: 714    	-14
	"2" gates	In: 149    	Out: 160    	+11

129 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 728    	Out: 714    	-14
	"2" gates	In: 149    	Out: 160    	+11

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/share/qflow/tech/osu018/osu018_stdcells.lef 
   -o csr.v csr_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/dadmin/Documents/tesis/dev/qflow/unpipelined/synthesis
Files:
   Verilog: /home/dadmin/Documents/tesis/dev/qflow/unpipelined/synthesis/csr.rtl.v
   Verilog: /home/dadmin/Documents/tesis/dev/qflow/unpipelined/synthesis/csr.rtlnopwr.v
   Verilog: /home/dadmin/Documents/tesis/dev/qflow/unpipelined/synthesis/csr.rtlbb.v
   Spice:   /home/dadmin/Documents/tesis/dev/qflow/unpipelined/synthesis/csr.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/share/qflow/tech/osu018/osu018_stdcells.lef 
	-o csr.rtl.v
   csr.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/share/qflow/tech/osu018/osu018_stdcells.lef 
	-o csr.rtlnopwr.v
   csr.v
/usr/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/share/qflow/tech/osu018/osu018_stdcells.lef
   -o csr.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/share/qflow/tech/osu018/osu018_stdcells.sp -o csr.spc csr.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f csr.spc csr.xspice

Synthesis script ended on mi√© 11 nov 2020 19:07:19 CST
