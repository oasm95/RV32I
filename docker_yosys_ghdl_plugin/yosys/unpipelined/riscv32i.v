/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module RISCV32I(CLK, IRQ, IMEM_DATA, DMEM_DATA_L, IMEM_ADDR, DMEM_ADDR, DMEM_DATA_S, DMEM_WEN);
  wire [31:0] _0_;
  wire [31:0] _1_;
  wire [31:0] _2_;
  input CLK;
  output [31:0] DMEM_ADDR;
  input [31:0] DMEM_DATA_L;
  output [31:0] DMEM_DATA_S;
  output DMEM_WEN;
  output [31:0] IMEM_ADDR;
  input [31:0] IMEM_DATA;
  input IRQ;
  wire [3:0] alusel;
  wire [1:0] asel;
  wire [1:0] bsel;
  wire condtrue;
  wire csrwen;
  wire ebreak;
  wire ecall;
  wire [2:0] funct3;
  wire [3:0] funct7;
  wire illop;
  wire [2:0] immsel;
  wire memwen;
  wire mret;
  wire [6:0] opcode;
  wire [1:0] pcsel;
  wire regfilewen;
  wire trap;
  wire trapwen;
  wire [1:0] wbsel;
  wire z;
  controlunit controlunit (
    .a_sel(asel),
    .alu_sel(alusel),
    .b_sel(bsel),
    .condtrue(condtrue),
    .csrfile_trap_wen(trapwen),
    .csrfile_wen(csrwen),
    .dmem_wen(memwen),
    .ebreak(ebreak),
    .ecall(ecall),
    .funct3(funct3),
    .funct7(funct7),
    .ill_op(illop),
    .imm_sel(immsel),
    .mret(mret),
    .opcode(opcode),
    .pc_sel(pcsel),
    .regfile_wen(regfilewen),
    .trap(trap),
    .wb_sel(wbsel),
    .z(z)
  );
  datapath_32_b14a227a3c694ac3d0ad8c71b4ce4306403987f6 datapath (
    .a_sel(asel),
    .alu_sel(alusel),
    .b_sel(bsel),
    .clk(CLK),
    .condtrue(condtrue),
    .csrfile_trap_wen(trapwen),
    .csrfile_wen(csrwen),
    .dmem_addr(_1_),
    .dmem_dataload(DMEM_DATA_L),
    .dmem_datastore(_2_),
    .ebreak(ebreak),
    .ecall(ecall),
    .extern_irq(IRQ),
    .funct3(funct3),
    .funct7(funct7),
    .ill_op(illop),
    .imem_addr(_0_),
    .imem_instruction(IMEM_DATA),
    .imm_sel(immsel),
    .mret(mret),
    .opcode(opcode),
    .pc_sel(pcsel),
    .regfile_wen(regfilewen),
    .trap(trap),
    .wb_sel(wbsel),
    .z(z)
  );
  assign IMEM_ADDR = _0_;
  assign DMEM_ADDR = _1_;
  assign DMEM_DATA_S = _2_;
  assign DMEM_WEN = memwen;
endmodule

module alu_32(a, b, funsel, c, z, condtrue, misalignedw, misalignedhw);
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  wire [31:0] _03_;
  wire _04_;
  wire [31:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire [31:0] _17_;
  wire _18_;
  wire [31:0] _19_;
  wire _20_;
  wire [31:0] _21_;
  wire _22_;
  wire [31:0] _23_;
  wire _24_;
  wire [31:0] _25_;
  wire _26_;
  wire [31:0] _27_;
  wire [31:0] _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire [31:0] _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  input [31:0] a;
  input [31:0] b;
  output [31:0] c;
  output condtrue;
  input [3:0] funsel;
  output misalignedhw;
  output misalignedw;
  output z;
  assign _00_ = a + b;
  assign _01_ = _00_[0] | _00_[1];
  assign _02_ = funsel == 4'h0;
  assign _03_ = a - b;
  assign _04_ = funsel == 4'h8;
  assign _05_ = a << { 26'h0000000, b[4:0] };
  assign _06_ = funsel == 4'h1;
  assign _07_ = $signed(a) < $signed(b);
  assign _08_ = _07_ ? 1'h1 : 1'h0;
  assign _09_ = funsel == 4'h2;
  assign _10_ = funsel == 4'ha;
  assign _11_ = _09_ | _10_;
  assign _12_ = a < b;
  assign _13_ = _12_ ? 1'h1 : 1'h0;
  assign _14_ = funsel == 4'h3;
  assign _15_ = funsel == 4'hb;
  assign _16_ = _14_ | _15_;
  assign _17_ = a ^ b;
  assign _18_ = funsel == 4'h4;
  assign _19_ = a >> { 26'h0000000, b[4:0] };
  assign _20_ = funsel == 4'h5;
  assign _21_ = $signed(a) >>> { 26'h0000000, b[4:0] };
  assign _22_ = funsel == 4'hd;
  assign _23_ = a | b;
  assign _24_ = funsel == 4'h6;
  assign _25_ = a & b;
  assign _26_ = funsel == 4'h7;
  assign _27_ = ~ a;
  assign _28_ = _27_ & b;
  assign _29_ = funsel == 4'hf;
  assign _30_ = funsel == 4'he;
  assign _31_ = funsel == 4'hc;
  function [31:0] \1089 ;
    input [31:0] a;
    input [415:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \1089  = b[31:0];
      13'b???????????1?:
        \1089  = b[63:32];
      13'b??????????1??:
        \1089  = b[95:64];
      13'b?????????1???:
        \1089  = b[127:96];
      13'b????????1????:
        \1089  = b[159:128];
      13'b???????1?????:
        \1089  = b[191:160];
      13'b??????1??????:
        \1089  = b[223:192];
      13'b?????1???????:
        \1089  = b[255:224];
      13'b????1????????:
        \1089  = b[287:256];
      13'b???1?????????:
        \1089  = b[319:288];
      13'b??1??????????:
        \1089  = b[351:320];
      13'b?1???????????:
        \1089  = b[383:352];
      13'b1????????????:
        \1089  = b[415:384];
      default:
        \1089  = a;
    endcase
  endfunction
  assign _32_ = \1089 (32'hxxxxxxxx, { a, b, _28_, _25_, _23_, _21_, _19_, _17_, 31'h00000000, _13_, 31'h00000000, _08_, _05_, _03_, _00_ }, { _31_, _30_, _29_, _26_, _24_, _22_, _20_, _18_, _16_, _11_, _06_, _04_, _02_ });
  function [0:0] \1091 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \1091  = b[0:0];
      13'b???????????1?:
        \1091  = b[1:1];
      13'b??????????1??:
        \1091  = b[2:2];
      13'b?????????1???:
        \1091  = b[3:3];
      13'b????????1????:
        \1091  = b[4:4];
      13'b???????1?????:
        \1091  = b[5:5];
      13'b??????1??????:
        \1091  = b[6:6];
      13'b?????1???????:
        \1091  = b[7:7];
      13'b????1????????:
        \1091  = b[8:8];
      13'b???1?????????:
        \1091  = b[9:9];
      13'b??1??????????:
        \1091  = b[10:10];
      13'b?1???????????:
        \1091  = b[11:11];
      13'b1????????????:
        \1091  = b[12:12];
      default:
        \1091  = a;
    endcase
  endfunction
  assign _33_ = \1091 (1'h0, { 8'h00, _13_, _08_, 3'h0 }, { _31_, _30_, _29_, _26_, _24_, _22_, _20_, _18_, _16_, _11_, _06_, _04_, _02_ });
  function [0:0] \1094 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \1094  = b[0:0];
      13'b???????????1?:
        \1094  = b[1:1];
      13'b??????????1??:
        \1094  = b[2:2];
      13'b?????????1???:
        \1094  = b[3:3];
      13'b????????1????:
        \1094  = b[4:4];
      13'b???????1?????:
        \1094  = b[5:5];
      13'b??????1??????:
        \1094  = b[6:6];
      13'b?????1???????:
        \1094  = b[7:7];
      13'b????1????????:
        \1094  = b[8:8];
      13'b???1?????????:
        \1094  = b[9:9];
      13'b??1??????????:
        \1094  = b[10:10];
      13'b?1???????????:
        \1094  = b[11:11];
      13'b1????????????:
        \1094  = b[12:12];
      default:
        \1094  = a;
    endcase
  endfunction
  assign _34_ = \1094 (1'h0, { 12'h000, _01_ }, { _31_, _30_, _29_, _26_, _24_, _22_, _20_, _18_, _16_, _11_, _06_, _04_, _02_ });
  function [0:0] \1097 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \1097  = b[0:0];
      13'b???????????1?:
        \1097  = b[1:1];
      13'b??????????1??:
        \1097  = b[2:2];
      13'b?????????1???:
        \1097  = b[3:3];
      13'b????????1????:
        \1097  = b[4:4];
      13'b???????1?????:
        \1097  = b[5:5];
      13'b??????1??????:
        \1097  = b[6:6];
      13'b?????1???????:
        \1097  = b[7:7];
      13'b????1????????:
        \1097  = b[8:8];
      13'b???1?????????:
        \1097  = b[9:9];
      13'b??1??????????:
        \1097  = b[10:10];
      13'b?1???????????:
        \1097  = b[11:11];
      13'b1????????????:
        \1097  = b[12:12];
      default:
        \1097  = a;
    endcase
  endfunction
  assign _35_ = \1097 (1'h0, { 12'h000, _00_[0] }, { _31_, _30_, _29_, _26_, _24_, _22_, _20_, _18_, _16_, _11_, _06_, _04_, _02_ });
  assign _36_ = _32_ == 32'd0;
  assign _37_ = _36_ ? 1'h1 : 1'h0;
  assign c = _32_;
  assign z = _37_;
  assign condtrue = _33_;
  assign misalignedw = _34_;
  assign misalignedhw = _35_;
endmodule

module controlunit(z, trap, condtrue, opcode, funct3, funct7, pc_sel, a_sel, b_sel, wb_sel, imm_sel, alu_sel, regfile_wen, dmem_wen, csrfile_wen, csrfile_trap_wen, mret, ecall, ebreak, ill_op);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [1:0] _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire [3:0] _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [1:0] _25_;
  wire [1:0] _26_;
  wire [3:0] _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [3:0] _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire [1:0] _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire [1:0] _51_;
  wire [1:0] _52_;
  wire [1:0] _53_;
  wire [1:0] _54_;
  wire [2:0] _55_;
  wire [3:0] _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire [1:0] _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  output [1:0] a_sel;
  output [3:0] alu_sel;
  output [1:0] b_sel;
  input condtrue;
  wire \control.takebranch ;
  output csrfile_trap_wen;
  output csrfile_wen;
  output dmem_wen;
  output ebreak;
  output ecall;
  input [2:0] funct3;
  input [3:0] funct7;
  output ill_op;
  output [2:0] imm_sel;
  output mret;
  input [6:0] opcode;
  output [1:0] pc_sel;
  output regfile_wen;
  input trap;
  output [1:0] wb_sel;
  input z;
  assign _20_ = funct3 == 3'h5;
  assign _21_ = _20_ ? { funct7[3], funct3 } : { 1'h0, funct3 };
  assign _22_ = opcode == 7'h13;
  assign _23_ = opcode == 7'h33;
  assign _24_ = opcode == 7'h0f;
  assign _25_ = funct3[2] ? 2'h2 : 2'h0;
  assign _26_ = funct3[2] ? 2'h1 : 2'h2;
  assign _27_ = 4'hc | { 2'h0, funct3[2], 1'h0 };
  assign _28_ = funct3[1:0] == 2'h1;
  assign _29_ = funct3[1:0] == 2'h2;
  assign _30_ = funct3[1:0] == 2'h3;
  function [3:0] \139 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \139  = b[3:0];
      3'b?1?:
        \139  = b[7:4];
      3'b1??:
        \139  = b[11:8];
      default:
        \139  = a;
    endcase
  endfunction
  assign _31_ = \139 (4'hx, { 8'hf6, _27_ }, { _30_, _29_, _28_ });
  assign _32_ = _02_ == 1'h1;
  assign _33_ = funct7[2:0] == 3'h0;
  assign _34_ = funct7[2:0] == 3'h1;
  assign _35_ = funct7[2:0] == 3'h6;
  function [0:0] \152 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \152  = b[0:0];
      3'b?1?:
        \152  = b[1:1];
      3'b1??:
        \152  = b[2:2];
      default:
        \152  = a;
    endcase
  endfunction
  assign _36_ = \152 (1'h1, 3'h3, { _35_, _34_, _33_ });
  function [0:0] \156 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \156  = b[0:0];
      3'b?1?:
        \156  = b[1:1];
      3'b1??:
        \156  = b[2:2];
      default:
        \156  = a;
    endcase
  endfunction
  assign _37_ = \156 (1'h0, 3'h4, { _35_, _34_, _33_ });
  function [0:0] \160 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \160  = b[0:0];
      3'b?1?:
        \160  = b[1:1];
      3'b1??:
        \160  = b[2:2];
      default:
        \160  = a;
    endcase
  endfunction
  assign _38_ = \160 (1'h0, 3'h1, { _35_, _34_, _33_ });
  function [0:0] \164 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \164  = b[0:0];
      3'b?1?:
        \164  = b[1:1];
      3'b1??:
        \164  = b[2:2];
      default:
        \164  = a;
    endcase
  endfunction
  assign _39_ = \164 (1'h0, 3'h2, { _35_, _34_, _33_ });
  function [0:0] \168 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \168  = b[0:0];
      3'b?1?:
        \168  = b[1:1];
      3'b1??:
        \168  = b[2:2];
      default:
        \168  = a;
    endcase
  endfunction
  assign _40_ = \168 (1'h1, 3'h0, { _35_, _34_, _33_ });
  assign _41_ = _02_ == 1'h0;
  function [1:0] \175 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \175  = b[1:0];
      2'b1?:
        \175  = b[3:2];
      default:
        \175  = a;
    endcase
  endfunction
  assign _42_ = \175 (_65_, 4'hc, { _41_, _32_ });
  function [0:0] \178 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \178  = b[0:0];
      2'b1?:
        \178  = b[1:1];
      default:
        \178  = a;
    endcase
  endfunction
  assign _43_ = \178 (_66_, 2'h1, { _41_, _32_ });
  function [0:0] \181 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \181  = b[0:0];
      2'b1?:
        \181  = b[1:1];
      default:
        \181  = a;
    endcase
  endfunction
  assign _44_ = \181 (_68_, 2'h1, { _41_, _32_ });
  function [0:0] \183 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \183  = b[0:0];
      2'b1?:
        \183  = b[1:1];
      default:
        \183  = a;
    endcase
  endfunction
  assign _45_ = \183 (_69_, { _36_, 1'h0 }, { _41_, _32_ });
  function [0:0] \185 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \185  = b[0:0];
      2'b1?:
        \185  = b[1:1];
      default:
        \185  = a;
    endcase
  endfunction
  assign _46_ = \185 (_70_, { _37_, 1'h0 }, { _41_, _32_ });
  function [0:0] \187 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \187  = b[0:0];
      2'b1?:
        \187  = b[1:1];
      default:
        \187  = a;
    endcase
  endfunction
  assign _47_ = \187 (_71_, { _38_, 1'hx }, { _41_, _32_ });
  function [0:0] \189 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \189  = b[0:0];
      2'b1?:
        \189  = b[1:1];
      default:
        \189  = a;
    endcase
  endfunction
  assign _48_ = \189 (_72_, { _39_, 1'hx }, { _41_, _32_ });
  function [0:0] \191 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \191  = b[0:0];
      2'b1?:
        \191  = b[1:1];
      default:
        \191  = a;
    endcase
  endfunction
  assign _49_ = \191 (_73_, { _40_, 1'hx }, { _41_, _32_ });
  assign _50_ = opcode == 7'h73;
  function [1:0] \205 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \205  = b[1:0];
      11'b?????????1?:
        \205  = b[3:2];
      11'b????????1??:
        \205  = b[5:4];
      11'b???????1???:
        \205  = b[7:6];
      11'b??????1????:
        \205  = b[9:8];
      11'b?????1?????:
        \205  = b[11:10];
      11'b????1??????:
        \205  = b[13:12];
      11'b???1???????:
        \205  = b[15:14];
      11'b??1????????:
        \205  = b[17:16];
      11'b?1?????????:
        \205  = b[19:18];
      11'b1??????????:
        \205  = b[21:20];
      default:
        \205  = a;
    endcase
  endfunction
  assign _51_ = \205 (2'h3, { _42_, 10'h000, _16_, 8'h90 }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [1:0] \217 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \217  = b[1:0];
      11'b?????????1?:
        \217  = b[3:2];
      11'b????????1??:
        \217  = b[5:4];
      11'b???????1???:
        \217  = b[7:6];
      11'b??????1????:
        \217  = b[9:8];
      11'b?????1?????:
        \217  = b[11:10];
      11'b????1??????:
        \217  = b[13:12];
      11'b???1???????:
        \217  = b[15:14];
      11'b??1????????:
        \217  = b[17:16];
      11'b?1?????????:
        \217  = b[19:18];
      11'b1??????????:
        \217  = b[21:20];
      default:
        \217  = a;
    endcase
  endfunction
  assign _52_ = \217 (2'hx, { _25_, 20'bxx000000000000xx01xx }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [1:0] \229 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \229  = b[1:0];
      11'b?????????1?:
        \229  = b[3:2];
      11'b????????1??:
        \229  = b[5:4];
      11'b???????1???:
        \229  = b[7:6];
      11'b??????1????:
        \229  = b[9:8];
      11'b?????1?????:
        \229  = b[11:10];
      11'b????1??????:
        \229  = b[13:12];
      11'b???1???????:
        \229  = b[15:14];
      11'b??1????????:
        \229  = b[17:16];
      11'b?1?????????:
        \229  = b[19:18];
      11'b1??????????:
        \229  = b[21:20];
      default:
        \229  = a;
    endcase
  endfunction
  assign _53_ = \229 (2'hx, { _26_, 20'bxx000101010001xx0101 }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [1:0] \242 ;
    input [1:0] a;
    input [21:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \242  = b[1:0];
      11'b?????????1?:
        \242  = b[3:2];
      11'b????????1??:
        \242  = b[5:4];
      11'b???????1???:
        \242  = b[7:6];
      11'b??????1????:
        \242  = b[9:8];
      11'b?????1?????:
        \242  = b[11:10];
      11'b????1??????:
        \242  = b[13:12];
      11'b???1???????:
        \242  = b[15:14];
      11'b??1????????:
        \242  = b[17:16];
      11'b?1?????????:
        \242  = b[19:18];
      11'b1??????????:
        \242  = b[21:20];
      default:
        \242  = a;
    endcase
  endfunction
  assign _54_ = \242 (2'hx, 22'b11xx0000xx01xx10100000, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [2:0] \255 ;
    input [2:0] a;
    input [32:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \255  = b[2:0];
      11'b?????????1?:
        \255  = b[5:3];
      11'b????????1??:
        \255  = b[8:6];
      11'b???????1???:
        \255  = b[11:9];
      11'b??????1????:
        \255  = b[14:12];
      11'b?????1?????:
        \255  = b[17:15];
      11'b????1??????:
        \255  = b[20:18];
      11'b???1???????:
        \255  = b[23:21];
      11'b??1????????:
        \255  = b[26:24];
      11'b?1?????????:
        \255  = b[29:27];
      11'b1??????????:
        \255  = b[32:30];
      default:
        \255  = a;
    endcase
  endfunction
  assign _55_ = \255 (3'hx, 33'b101xxxxxx000001000010000100011011, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [3:0] \264 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \264  = b[3:0];
      11'b?????????1?:
        \264  = b[7:4];
      11'b????????1??:
        \264  = b[11:8];
      11'b???????1???:
        \264  = b[15:12];
      11'b??????1????:
        \264  = b[19:16];
      11'b?????1?????:
        \264  = b[23:20];
      11'b????1??????:
        \264  = b[27:24];
      11'b???1???????:
        \264  = b[31:28];
      11'b??1????????:
        \264  = b[35:32];
      11'b?1?????????:
        \264  = b[39:36];
      11'b1??????????:
        \264  = b[43:40];
      default:
        \264  = a;
    endcase
  endfunction
  assign _56_ = \264 (4'hx, { _31_, 4'hx, funct7[3], funct3, _21_, 10'h002, funct3[2:1], 16'h0x0e }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \276 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \276  = b[0:0];
      11'b?????????1?:
        \276  = b[1:1];
      11'b????????1??:
        \276  = b[2:2];
      11'b???????1???:
        \276  = b[3:3];
      11'b??????1????:
        \276  = b[4:4];
      11'b?????1?????:
        \276  = b[5:5];
      11'b????1??????:
        \276  = b[6:6];
      11'b???1???????:
        \276  = b[7:7];
      11'b??1????????:
        \276  = b[8:8];
      11'b?1?????????:
        \276  = b[9:9];
      11'b1??????????:
        \276  = b[10:10];
      default:
        \276  = a;
    endcase
  endfunction
  assign _57_ = \276 (1'h0, { _43_, 10'h1af }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \289 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \289  = b[0:0];
      11'b?????????1?:
        \289  = b[1:1];
      11'b????????1??:
        \289  = b[2:2];
      11'b???????1???:
        \289  = b[3:3];
      11'b??????1????:
        \289  = b[4:4];
      11'b?????1?????:
        \289  = b[5:5];
      11'b????1??????:
        \289  = b[6:6];
      11'b???1???????:
        \289  = b[7:7];
      11'b??1????????:
        \289  = b[8:8];
      11'b?1?????????:
        \289  = b[9:9];
      11'b1??????????:
        \289  = b[10:10];
      default:
        \289  = a;
    endcase
  endfunction
  assign _58_ = \289 (1'h0, 11'h040, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \301 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \301  = b[0:0];
      11'b?????????1?:
        \301  = b[1:1];
      11'b????????1??:
        \301  = b[2:2];
      11'b???????1???:
        \301  = b[3:3];
      11'b??????1????:
        \301  = b[4:4];
      11'b?????1?????:
        \301  = b[5:5];
      11'b????1??????:
        \301  = b[6:6];
      11'b???1???????:
        \301  = b[7:7];
      11'b??1????????:
        \301  = b[8:8];
      11'b?1?????????:
        \301  = b[9:9];
      11'b1??????????:
        \301  = b[10:10];
      default:
        \301  = a;
    endcase
  endfunction
  assign _59_ = \301 (1'h0, { _44_, 10'h000 }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \313 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \313  = b[0:0];
      11'b?????????1?:
        \313  = b[1:1];
      11'b????????1??:
        \313  = b[2:2];
      11'b???????1???:
        \313  = b[3:3];
      11'b??????1????:
        \313  = b[4:4];
      11'b?????1?????:
        \313  = b[5:5];
      11'b????1??????:
        \313  = b[6:6];
      11'b???1???????:
        \313  = b[7:7];
      11'b??1????????:
        \313  = b[8:8];
      11'b?1?????????:
        \313  = b[9:9];
      11'b1??????????:
        \313  = b[10:10];
      default:
        \313  = a;
    endcase
  endfunction
  assign _60_ = \313 (1'h1, { _45_, 10'h000 }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \325 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \325  = b[0:0];
      11'b?????????1?:
        \325  = b[1:1];
      11'b????????1??:
        \325  = b[2:2];
      11'b???????1???:
        \325  = b[3:3];
      11'b??????1????:
        \325  = b[4:4];
      11'b?????1?????:
        \325  = b[5:5];
      11'b????1??????:
        \325  = b[6:6];
      11'b???1???????:
        \325  = b[7:7];
      11'b??1????????:
        \325  = b[8:8];
      11'b?1?????????:
        \325  = b[9:9];
      11'b1??????????:
        \325  = b[10:10];
      default:
        \325  = a;
    endcase
  endfunction
  assign _61_ = \325 (1'h0, { _46_, 10'h000 }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \337 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \337  = b[0:0];
      11'b?????????1?:
        \337  = b[1:1];
      11'b????????1??:
        \337  = b[2:2];
      11'b???????1???:
        \337  = b[3:3];
      11'b??????1????:
        \337  = b[4:4];
      11'b?????1?????:
        \337  = b[5:5];
      11'b????1??????:
        \337  = b[6:6];
      11'b???1???????:
        \337  = b[7:7];
      11'b??1????????:
        \337  = b[8:8];
      11'b?1?????????:
        \337  = b[9:9];
      11'b1??????????:
        \337  = b[10:10];
      default:
        \337  = a;
    endcase
  endfunction
  assign _62_ = \337 (1'h0, { _47_, 10'hxxx }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \349 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \349  = b[0:0];
      11'b?????????1?:
        \349  = b[1:1];
      11'b????????1??:
        \349  = b[2:2];
      11'b???????1???:
        \349  = b[3:3];
      11'b??????1????:
        \349  = b[4:4];
      11'b?????1?????:
        \349  = b[5:5];
      11'b????1??????:
        \349  = b[6:6];
      11'b???1???????:
        \349  = b[7:7];
      11'b??1????????:
        \349  = b[8:8];
      11'b?1?????????:
        \349  = b[9:9];
      11'b1??????????:
        \349  = b[10:10];
      default:
        \349  = a;
    endcase
  endfunction
  assign _63_ = \349 (1'h0, { _48_, 10'hxxx }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \361 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \361  = b[0:0];
      11'b?????????1?:
        \361  = b[1:1];
      11'b????????1??:
        \361  = b[2:2];
      11'b???????1???:
        \361  = b[3:3];
      11'b??????1????:
        \361  = b[4:4];
      11'b?????1?????:
        \361  = b[5:5];
      11'b????1??????:
        \361  = b[6:6];
      11'b???1???????:
        \361  = b[7:7];
      11'b??1????????:
        \361  = b[8:8];
      11'b?1?????????:
        \361  = b[9:9];
      11'b1??????????:
        \361  = b[10:10];
      default:
        \361  = a;
    endcase
  endfunction
  assign _64_ = \361 (1'h1, { _49_, 10'hxxx }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  function [0:0] \362 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \362  = b[0:0];
      11'b?????????1?:
        \362  = b[1:1];
      11'b????????1??:
        \362  = b[2:2];
      11'b???????1???:
        \362  = b[3:3];
      11'b??????1????:
        \362  = b[4:4];
      11'b?????1?????:
        \362  = b[5:5];
      11'b????1??????:
        \362  = b[6:6];
      11'b???1???????:
        \362  = b[7:7];
      11'b??1????????:
        \362  = b[8:8];
      11'b?1?????????:
        \362  = b[9:9];
      11'b1??????????:
        \362  = b[10:10];
      default:
        \362  = a;
    endcase
  endfunction
  assign \control.takebranch  = \362 (\control.takebranch , { \control.takebranch , \control.takebranch , \control.takebranch , \control.takebranch , \control.takebranch , \control.takebranch , _13_, \control.takebranch , \control.takebranch , \control.takebranch , \control.takebranch  }, { _50_, _24_, _23_, _22_, _19_, _18_, _17_, _06_, _05_, _04_, _03_ });
  assign _65_ = trap ? 2'h3 : _51_;
  assign _66_ = trap ? 1'h0 : _57_;
  assign _67_ = trap ? 1'h0 : _58_;
  assign _68_ = trap ? 1'h0 : _59_;
  assign _69_ = trap ? 1'h1 : _60_;
  assign _70_ = trap ? 1'h0 : _61_;
  assign _71_ = trap ? 1'h0 : _62_;
  assign _72_ = trap ? 1'h0 : _63_;
  assign _73_ = trap ? 1'h0 : _64_;
  assign _00_ = 1'h0 | funct3[2];
  assign _01_ = _00_ | funct3[1];
  assign _02_ = _01_ | funct3[0];
  assign _03_ = opcode == 7'h37;
  assign _04_ = opcode == 7'h17;
  assign _05_ = opcode == 7'h6f;
  assign _06_ = opcode == 7'h67;
  assign _07_ = { funct3[2], funct3[0] } == 2'h0;
  assign _08_ = ~ z;
  assign _09_ = { funct3[2], funct3[0] } == 2'h1;
  assign _10_ = { funct3[2], funct3[0] } == 2'h2;
  assign _11_ = ~ condtrue;
  assign _12_ = { funct3[2], funct3[0] } == 2'h3;
  function [0:0] \84 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \84  = b[0:0];
      4'b??1?:
        \84  = b[1:1];
      4'b?1??:
        \84  = b[2:2];
      4'b1???:
        \84  = b[3:3];
      default:
        \84  = a;
    endcase
  endfunction
  assign _13_ = \84 (\control.takebranch , { _11_, condtrue, _08_, z }, { _12_, _10_, _09_, _07_ });
  assign _14_ = _13_ == 1'h1;
  assign _15_ = _13_ == 1'h0;
  function [1:0] \92 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \92  = b[1:0];
      2'b1?:
        \92  = b[3:2];
      default:
        \92  = a;
    endcase
  endfunction
  assign _16_ = \92 (_65_, 4'h1, { _15_, _14_ });
  assign _17_ = opcode == 7'h63;
  assign _18_ = opcode == 7'h03;
  assign _19_ = opcode == 7'h23;
  assign pc_sel = _65_;
  assign a_sel = _52_;
  assign b_sel = _53_;
  assign wb_sel = _54_;
  assign imm_sel = _55_;
  assign alu_sel = _56_;
  assign regfile_wen = _66_;
  assign dmem_wen = _67_;
  assign csrfile_wen = _68_;
  assign csrfile_trap_wen = _69_;
  assign mret = _70_;
  assign ecall = _71_;
  assign ebreak = _72_;
  assign ill_op = _73_;
endmodule

module csrfile_32(clk, extern_irq, csr_mepc, csr_wdata, csr_mcause, csr_addr, csr_wen, csr_wen_traps, csr_ret, csr_irq, csr_pcaddr, csr_data);
  wire _00_;
  wire _01_;
  wire _02_;
  wire [31:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [29:0] _25_;
  wire [29:0] _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [31:0] _31_;
  wire [31:0] _32_;
  wire _33_;
  wire _34_;
  wire [1:0] _35_;
  wire [1:0] _36_;
  wire [1:0] _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire [31:0] _45_;
  input clk;
  input [11:0] csr_addr;
  output [31:0] csr_data;
  output csr_irq;
  input [3:0] csr_mcause;
  input [31:0] csr_mepc;
  output [31:0] csr_pcaddr;
  input csr_ret;
  input [31:0] csr_wdata;
  input csr_wen;
  input csr_wen_traps;
  input extern_irq;
  wire irq;
  reg [31:0] mcause;
  reg [29:0] mepc;
  reg meta_irq = 1'h0;
  reg mie = 1'h0;
  reg mip = 1'h0;
  reg [1:0] mstatus = 2'h0;
  reg [31:0] mvect;
  wire [31:0] \trap_addr.mvect_out ;
  wire [31:0] \trap_addr.pcaddr ;
  assign _43_ = csr_addr == 12'h304;
  assign _44_ = csr_addr == 12'h344;
  function [31:0] \1010 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \1010  = b[31:0];
      7'b?????1?:
        \1010  = b[63:32];
      7'b????1??:
        \1010  = b[95:64];
      7'b???1???:
        \1010  = b[127:96];
      7'b??1????:
        \1010  = b[159:128];
      7'b?1?????:
        \1010  = b[191:160];
      7'b1??????:
        \1010  = b[223:192];
      default:
        \1010  = a;
    endcase
  endfunction
  assign _45_ = \1010 (32'd0, { 20'h00000, mip, 31'h00000000, mie, 11'h000, mepc, 34'h040000100, mvect, 24'h000018, mstatus[1], 3'h0, mstatus[0], 3'h0, mcause }, { _44_, _43_, _42_, _41_, _40_, _39_, _38_ });
  assign _00_ = mstatus[0] & mip;
  assign irq = _00_ & mie;
  assign _01_ = irq & mvect[0];
  assign _02_ = _01_ == 1'h0;
  assign _03_ = { mvect[31:2], 2'h0 } + 32'd44;
  assign _04_ = _01_ == 1'h1;
  function [31:0] \868 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \868  = b[31:0];
      2'b1?:
        \868  = b[63:32];
      default:
        \868  = a;
    endcase
  endfunction
  assign \trap_addr.mvect_out  = \868 (\trap_addr.mvect_out , { _03_, mvect[31:2], 2'h0 }, { _04_, _02_ });
  assign _05_ = csr_ret == 1'h1;
  assign _06_ = csr_ret == 1'h0;
  function [31:0] \876 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \876  = b[31:0];
      2'b1?:
        \876  = b[63:32];
      default:
        \876  = a;
    endcase
  endfunction
  assign \trap_addr.pcaddr  = \876 (\trap_addr.pcaddr , { \trap_addr.mvect_out , mepc, 2'h0 }, { _06_, _05_ });
  assign _07_ = csr_addr == 12'h305;
  assign _08_ = csr_wen & _07_;
  assign _09_ = csr_ret != 1'h1;
  assign _10_ = _08_ & _09_;
  assign _11_ = csr_wen_traps != 1'h1;
  assign _12_ = _10_ & _11_;
  assign _13_ = _12_ ? csr_wdata : mvect;
  always @(posedge clk)
    mvect <= _13_;
  assign _14_ = csr_addr == 12'h304;
  assign _15_ = csr_wen & _14_;
  assign _16_ = csr_ret != 1'h1;
  assign _17_ = _15_ & _16_;
  assign _18_ = csr_wen_traps != 1'h1;
  assign _19_ = _17_ & _18_;
  assign _20_ = _19_ ? csr_wdata[11] : mie;
  always @(posedge clk)
    mie <= _20_;
  always @(posedge clk)
    mip <= meta_irq;
  always @(posedge clk)
    meta_irq <= extern_irq;
  assign _21_ = csr_addr == 12'h341;
  assign _22_ = csr_wen & _21_;
  assign _23_ = csr_ret != 1'h1;
  assign _24_ = _22_ & _23_;
  assign _25_ = _24_ ? csr_wdata[31:2] : mepc;
  assign _26_ = csr_wen_traps ? csr_mepc[31:2] : _25_;
  always @(posedge clk)
    mepc <= _26_;
  assign _27_ = csr_addr == 12'h342;
  assign _28_ = csr_wen & _27_;
  assign _29_ = csr_ret != 1'h1;
  assign _30_ = _28_ & _29_;
  assign _31_ = _30_ ? { 1'h0, csr_wdata[30:0] } : mcause;
  assign _32_ = csr_wen_traps ? { irq, 27'h0000000, csr_mcause } : _31_;
  always @(posedge clk)
    mcause <= _32_;
  assign _33_ = csr_addr == 12'h300;
  assign _34_ = csr_wen & _33_;
  assign _35_ = _34_ ? { csr_wdata[7], csr_wdata[3] } : mstatus;
  assign _36_ = csr_ret ? { 1'h1, mstatus[1] } : _35_;
  assign _37_ = csr_wen_traps ? { mstatus[0], 1'h0 } : _36_;
  always @(posedge clk)
    mstatus <= _37_;
  assign _38_ = csr_addr == 12'h342;
  assign _39_ = csr_addr == 12'h300;
  assign _40_ = csr_addr == 12'h305;
  assign _41_ = csr_addr == 12'h301;
  assign _42_ = csr_addr == 12'h341;
  assign csr_irq = irq;
  assign csr_pcaddr = \trap_addr.pcaddr ;
  assign csr_data = _45_;
endmodule

module datapath_32_b14a227a3c694ac3d0ad8c71b4ce4306403987f6(clk, extern_irq, imem_instruction, dmem_dataload, pc_sel, a_sel, b_sel, wb_sel, imm_sel, alu_sel, regfile_wen, csrfile_wen, csrfile_trap_wen, mret, ecall, ebreak, ill_op, imem_addr, dmem_addr, dmem_datastore, z, trap, condtrue, opcode, funct3, funct7);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire [3:0] _49_;
  wire [3:0] _50_;
  wire [3:0] _51_;
  wire [3:0] _52_;
  wire [3:0] _53_;
  wire [3:0] _54_;
  input [1:0] a_sel;
  wire allowcsrwrite;
  input [3:0] alu_sel;
  wire [31:0] aluresult;
  wire any_except;
  input [1:0] b_sel;
  input clk;
  wire condt;
  output condtrue;
  wire [31:0] csrdata;
  input csrfile_trap_wen;
  input csrfile_wen;
  wire [31:0] csrpc;
  wire [31:0] currentpc;
  output [31:0] dmem_addr;
  input [31:0] dmem_dataload;
  output [31:0] dmem_datastore;
  input ebreak;
  input ecall;
  wire [3:0] excpt_cause;
  input extern_irq;
  output [2:0] funct3;
  output [3:0] funct7;
  input ill_op;
  output [31:0] imem_addr;
  input [31:0] imem_instruction;
  wire [31:0] imm;
  input [2:0] imm_sel;
  wire instrmisalig;
  wire \instructionaddressmisaligned.tkbranch ;
  wire irq;
  wire [31:0] jumptarget;
  wire loadmisalig;
  wire [31:0] memdataload;
  wire misalhw;
  wire misalw;
  input mret;
  wire [31:0] muxaval;
  wire [31:0] muxbval;
  wire [31:0] nextpc;
  output [6:0] opcode;
  input [1:0] pc_sel;
  wire [31:0] rd;
  input regfile_wen;
  wire [31:0] rs1;
  wire [31:0] rs2;
  wire storemisalig;
  output trap;
  input [1:0] wb_sel;
  output z;
  wire zero;
  assign _02_ = a_sel == 2'h0;
  assign _03_ = a_sel == 2'h2;
  assign _04_ = a_sel == 2'h1;
  function [31:0] \435 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \435  = b[31:0];
      3'b?1?:
        \435  = b[63:32];
      3'b1??:
        \435  = b[95:64];
      default:
        \435  = a;
    endcase
  endfunction
  assign muxaval = \435 (32'hxxxxxxxx, { currentpc, csrdata, rs1 }, { _04_, _03_, _02_ });
  assign _05_ = b_sel == 2'h0;
  assign _06_ = b_sel == 2'h2;
  assign _07_ = b_sel == 2'h1;
  function [31:0] \446 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \446  = b[31:0];
      3'b?1?:
        \446  = b[63:32];
      3'b1??:
        \446  = b[95:64];
      default:
        \446  = a;
    endcase
  endfunction
  assign muxbval = \446 (32'hxxxxxxxx, { imm, csrdata, rs2 }, { _07_, _06_, _05_ });
  assign _08_ = wb_sel == 2'h0;
  assign _09_ = wb_sel == 2'h1;
  assign _10_ = wb_sel == 2'h2;
  assign _11_ = wb_sel == 2'h3;
  function [31:0] \458 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \458  = b[31:0];
      4'b??1?:
        \458  = b[63:32];
      4'b?1??:
        \458  = b[95:64];
      4'b1???:
        \458  = b[127:96];
      default:
        \458  = a;
    endcase
  endfunction
  assign rd = \458 (rd, { csrdata, nextpc, memdataload, aluresult }, { _11_, _10_, _09_, _08_ });
  assign _12_ = 1'h0 | imem_instruction[19];
  assign _13_ = _12_ | imem_instruction[18];
  assign _14_ = _13_ | imem_instruction[17];
  assign _15_ = _14_ | imem_instruction[16];
  assign _16_ = _15_ | imem_instruction[15];
  assign _17_ = ~ _16_;
  assign _18_ = _17_ & imem_instruction[13];
  assign _19_ = ~ _18_;
  assign allowcsrwrite = csrfile_wen & _19_;
  assign jumptarget = currentpc + imm;
  assign _20_ = loadmisalig | storemisalig;
  assign any_except = _20_ | instrmisalig;
  assign _21_ = irq | any_except;
  assign _22_ = imem_instruction[6:0] == 7'h63;
  assign _23_ = _22_ ? 1'h1 : 1'h0;
  assign _24_ = imem_instruction[6:0] == 7'h6f;
  assign _25_ = _24_ ? 1'h1 : 1'h0;
  assign _26_ = imem_instruction[6:0] == 7'h67;
  assign _27_ = _26_ ? 1'h1 : 1'h0;
  assign _28_ = { imem_instruction[14], imem_instruction[12] } == 2'h0;
  assign _29_ = ~ zero;
  assign _30_ = { imem_instruction[14], imem_instruction[12] } == 2'h1;
  assign _31_ = { imem_instruction[14], imem_instruction[12] } == 2'h2;
  assign _32_ = ~ condt;
  assign _33_ = { imem_instruction[14], imem_instruction[12] } == 2'h3;
  function [0:0] \525 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \525  = b[0:0];
      4'b??1?:
        \525  = b[1:1];
      4'b?1??:
        \525  = b[2:2];
      4'b1???:
        \525  = b[3:3];
      default:
        \525  = a;
    endcase
  endfunction
  assign \instructionaddressmisaligned.tkbranch  = \525 (\instructionaddressmisaligned.tkbranch , { _32_, condt, _29_, zero }, { _33_, _31_, _30_, _28_ });
  assign _34_ = jumptarget[0] | jumptarget[1];
  assign _35_ = _27_ & aluresult[1];
  assign _36_ = _23_ & \instructionaddressmisaligned.tkbranch ;
  assign _37_ = _36_ | _25_;
  assign _38_ = _34_ & _37_;
  assign instrmisalig = _35_ | _38_;
  assign _39_ = imem_instruction[6:0] == 7'h23;
  assign _40_ = _39_ ? 1'h1 : 1'h0;
  assign _41_ = imem_instruction[13] & misalw;
  assign _42_ = imem_instruction[12] & misalhw;
  assign _43_ = _41_ | _42_;
  assign storemisalig = _40_ & _43_;
  assign _44_ = imem_instruction[6:0] == 7'h03;
  assign _45_ = _44_ ? 1'h1 : 1'h0;
  assign _46_ = imem_instruction[13] & misalw;
  assign _47_ = imem_instruction[12] & misalhw;
  assign _48_ = _46_ | _47_;
  assign loadmisalig = _45_ & _48_;
  assign _49_ = loadmisalig ? 4'h4 : 4'hx;
  assign _50_ = storemisalig ? 4'h6 : _49_;
  assign _51_ = ecall ? 4'hb : _50_;
  assign _52_ = ill_op ? 4'h2 : _51_;
  assign _53_ = instrmisalig ? 4'h0 : _52_;
  assign _54_ = ebreak ? 4'h3 : _53_;
  assign excpt_cause = irq ? 4'hb : _54_;
  alu_32 alu (
    .a(muxaval),
    .b(muxbval),
    .c(aluresult),
    .condtrue(condt),
    .funsel(alu_sel),
    .misalignedhw(misalhw),
    .misalignedw(misalw),
    .z(zero)
  );
  csrfile_32 csr (
    .clk(clk),
    .csr_addr(imem_instruction[31:20]),
    .csr_data(csrdata),
    .csr_irq(irq),
    .csr_mcause(excpt_cause),
    .csr_mepc(currentpc),
    .csr_pcaddr(csrpc),
    .csr_ret(mret),
    .csr_wdata(aluresult),
    .csr_wen(allowcsrwrite),
    .csr_wen_traps(csrfile_trap_wen),
    .extern_irq(extern_irq)
  );
  immdecoder_32 immediatedecoder (
    .imm_sel(imm_sel),
    .immediate(imm),
    .instruction(imem_instruction[31:7])
  );
  meminterface_32 memoryinterface (
    .data_load(memdataload),
    .data_store(rs2),
    .extern_data_load(dmem_dataload),
    .extern_data_store(_00_),
    .extern_mem_addr(_01_),
    .mem_addr(aluresult),
    .mem_size(imem_instruction[14:12])
  );
  programcounter_32_b14a227a3c694ac3d0ad8c71b4ce4306403987f6 programcounter (
    .clk(clk),
    .current_addr(currentpc),
    .except_addr(csrpc),
    .jalr({ aluresult[31:1], 1'h0 }),
    .jumps(jumptarget),
    .next_addr(nextpc),
    .pc_sel(pc_sel),
    .stall(1'h0)
  );
  registerfile_32 registers (
    .clk(clk),
    .rega_addr(imem_instruction[19:15]),
    .rega_data(rs1),
    .regb_addr(imem_instruction[24:20]),
    .regb_data(rs2),
    .w_addr(imem_instruction[11:7]),
    .w_data(rd),
    .w_en(regfile_wen)
  );
  assign imem_addr = currentpc;
  assign dmem_addr = _01_;
  assign dmem_datastore = _00_;
  assign z = zero;
  assign trap = _21_;
  assign condtrue = condt;
  assign opcode = imem_instruction[6:0];
  assign funct3 = imem_instruction[14:12];
  assign funct7 = { imem_instruction[30:29], imem_instruction[21:20] };
endmodule

module immdecoder_32(instruction, imm_sel, immediate);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [3:0] _07_;
  wire [5:0] _08_;
  wire _09_;
  wire [7:0] _10_;
  wire [10:0] _11_;
  wire _12_;
  input [2:0] imm_sel;
  output [31:0] immediate;
  input [24:0] instruction;
  assign _00_ = imm_sel == 3'h0;
  assign _01_ = imm_sel == 3'h1;
  assign _02_ = imm_sel == 3'h2;
  assign _03_ = imm_sel == 3'h3;
  assign _04_ = imm_sel == 3'h4;
  assign _05_ = imm_sel == 3'h5;
  function [0:0] \796 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \796  = b[0:0];
      6'b????1?:
        \796  = b[1:1];
      6'b???1??:
        \796  = b[2:2];
      6'b??1???:
        \796  = b[3:3];
      6'b?1????:
        \796  = b[4:4];
      6'b1?????:
        \796  = b[5:5];
      default:
        \796  = a;
    endcase
  endfunction
  assign _06_ = \796 (1'hx, { instruction[8], 3'h0, instruction[0], instruction[13] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [3:0] \803 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \803  = b[3:0];
      6'b????1?:
        \803  = b[7:4];
      6'b???1??:
        \803  = b[11:8];
      6'b??1???:
        \803  = b[15:12];
      6'b?1????:
        \803  = b[19:16];
      6'b1?????:
        \803  = b[23:20];
      default:
        \803  = a;
    endcase
  endfunction
  assign _07_ = \803 (4'hx, { instruction[12:9], instruction[17:14], 4'h0, instruction[4:1], instruction[4:1], instruction[17:14] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [5:0] \809 ;
    input [5:0] a;
    input [35:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \809  = b[5:0];
      6'b????1?:
        \809  = b[11:6];
      6'b???1??:
        \809  = b[17:12];
      6'b??1???:
        \809  = b[23:18];
      6'b?1????:
        \809  = b[29:24];
      6'b1?????:
        \809  = b[35:30];
      default:
        \809  = a;
    endcase
  endfunction
  assign _08_ = \809 (6'hxx, { 6'h00, instruction[23:18], 6'h00, instruction[23:18], instruction[23:18], instruction[23:18] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [0:0] \815 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \815  = b[0:0];
      6'b????1?:
        \815  = b[1:1];
      6'b???1??:
        \815  = b[2:2];
      6'b??1???:
        \815  = b[3:3];
      6'b?1????:
        \815  = b[4:4];
      6'b1?????:
        \815  = b[5:5];
      default:
        \815  = a;
    endcase
  endfunction
  assign _09_ = \815 (1'hx, { 1'h0, instruction[13], 1'h0, instruction[0], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [7:0] \822 ;
    input [7:0] a;
    input [47:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \822  = b[7:0];
      6'b????1?:
        \822  = b[15:8];
      6'b???1??:
        \822  = b[23:16];
      6'b??1???:
        \822  = b[31:24];
      6'b?1????:
        \822  = b[39:32];
      6'b1?????:
        \822  = b[47:40];
      default:
        \822  = a;
    endcase
  endfunction
  assign _10_ = \822 (8'hxx, { 8'h00, instruction[12:5], instruction[12:5], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [10:0] \830 ;
    input [10:0] a;
    input [65:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \830  = b[10:0];
      6'b????1?:
        \830  = b[21:11];
      6'b???1??:
        \830  = b[32:22];
      6'b??1???:
        \830  = b[43:33];
      6'b?1????:
        \830  = b[54:44];
      6'b1?????:
        \830  = b[65:55];
      default:
        \830  = a;
    endcase
  endfunction
  assign _11_ = \830 (11'hxxx, { 11'h000, instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24:13], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  function [0:0] \837 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \837  = b[0:0];
      6'b????1?:
        \837  = b[1:1];
      6'b???1??:
        \837  = b[2:2];
      6'b??1???:
        \837  = b[3:3];
      6'b?1????:
        \837  = b[4:4];
      6'b1?????:
        \837  = b[5:5];
      default:
        \837  = a;
    endcase
  endfunction
  assign _12_ = \837 (1'hx, { 1'h0, instruction[24], instruction[24], instruction[24], instruction[24], instruction[24] }, { _05_, _04_, _03_, _02_, _01_, _00_ });
  assign immediate = { _12_, _11_, _10_, _09_, _08_, _07_, _06_ };
endmodule

module meminterface_32(extern_data_load, data_store, mem_addr, mem_size, extern_data_store, extern_mem_addr, data_load);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire [31:0] _23_;
  wire [7:0] \byte_size_load.byteval ;
  wire [23:0] \byte_size_load.extension ;
  wire [31:0] \byte_size_store.storebyte ;
  output [31:0] data_load;
  input [31:0] data_store;
  input [31:0] extern_data_load;
  output [31:0] extern_data_store;
  output [31:0] extern_mem_addr;
  wire [15:0] \halfword_size_load.extension ;
  wire [15:0] \halfword_size_load.halfwordval ;
  wire [31:0] \halfword_size_store.storehalfw ;
  input [31:0] mem_addr;
  input [2:0] mem_size;
  assign _00_ = mem_addr[1:0] == 2'h0;
  assign _01_ = mem_addr[1:0] == 2'h1;
  assign _02_ = mem_addr[1:0] == 2'h2;
  assign _03_ = mem_addr[1:0] == 2'h3;
  function [7:0] \1126 ;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1126  = b[7:0];
      4'b??1?:
        \1126  = b[15:8];
      4'b?1??:
        \1126  = b[23:16];
      4'b1???:
        \1126  = b[31:24];
      default:
        \1126  = a;
    endcase
  endfunction
  assign \byte_size_load.byteval  = \1126 (\byte_size_load.byteval , extern_data_load, { _03_, _02_, _01_, _00_ });
  assign _04_ = mem_size[2] == 1'h0;
  assign _05_ = mem_size[2] == 1'h1;
  function [23:0] \1167 ;
    input [23:0] a;
    input [47:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1167  = b[23:0];
      2'b1?:
        \1167  = b[47:24];
      default:
        \1167  = a;
    endcase
  endfunction
  assign \byte_size_load.extension  = \1167 (\byte_size_load.extension , { 24'h000000, \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7], \byte_size_load.byteval [7] }, { _05_, _04_ });
  assign _06_ = mem_addr[1] == 1'h0;
  assign _07_ = mem_addr[1] == 1'h1;
  function [15:0] \1181 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1181  = b[15:0];
      2'b1?:
        \1181  = b[31:16];
      default:
        \1181  = a;
    endcase
  endfunction
  assign \halfword_size_load.halfwordval  = \1181 (\halfword_size_load.halfwordval , extern_data_load, { _07_, _06_ });
  assign _08_ = mem_size[2] == 1'h0;
  assign _09_ = mem_size[2] == 1'h1;
  function [15:0] \1210 ;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1210  = b[15:0];
      2'b1?:
        \1210  = b[31:16];
      default:
        \1210  = a;
    endcase
  endfunction
  assign \halfword_size_load.extension  = \1210 (\halfword_size_load.extension , { 16'h0000, \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15], \halfword_size_load.halfwordval [15] }, { _09_, _08_ });
  assign _10_ = mem_size[1:0] == 2'h0;
  assign _11_ = mem_size[1:0] == 2'h1;
  assign _12_ = mem_size[1:0] == 2'h2;
  function [31:0] \1223 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \1223  = b[31:0];
      3'b?1?:
        \1223  = b[63:32];
      3'b1??:
        \1223  = b[95:64];
      default:
        \1223  = a;
    endcase
  endfunction
  assign _13_ = \1223 (32'hxxxxxxxx, { extern_data_load, \halfword_size_load.extension , \halfword_size_load.halfwordval , \byte_size_load.extension , \byte_size_load.byteval  }, { _12_, _11_, _10_ });
  assign _14_ = mem_addr[1:0] == 2'h0;
  assign _15_ = mem_addr[1:0] == 2'h1;
  assign _16_ = mem_addr[1:0] == 2'h2;
  assign _17_ = mem_addr[1:0] == 2'h3;
  function [31:0] \1253 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1253  = b[31:0];
      4'b??1?:
        \1253  = b[63:32];
      4'b?1??:
        \1253  = b[95:64];
      4'b1???:
        \1253  = b[127:96];
      default:
        \1253  = a;
    endcase
  endfunction
  assign \byte_size_store.storebyte  = \1253 (\byte_size_store.storebyte , { data_store[7:0], extern_data_load[23:0], extern_data_load[31:24], data_store[7:0], extern_data_load[15:0], extern_data_load[31:16], data_store[7:0], extern_data_load[7:0], extern_data_load[31:8], data_store[7:0] }, { _17_, _16_, _15_, _14_ });
  assign _18_ = mem_addr[1] == 1'h1;
  assign _19_ = mem_addr[1] == 1'h0;
  function [31:0] \1269 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1269  = b[31:0];
      2'b1?:
        \1269  = b[63:32];
      default:
        \1269  = a;
    endcase
  endfunction
  assign \halfword_size_store.storehalfw  = \1269 (\halfword_size_store.storehalfw , { extern_data_load[31:16], data_store[15:0], data_store[15:0], extern_data_load[15:0] }, { _19_, _18_ });
  assign _20_ = mem_size[1:0] == 2'h0;
  assign _21_ = mem_size[1:0] == 2'h1;
  assign _22_ = mem_size[1:0] == 2'h2;
  function [31:0] \1281 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \1281  = b[31:0];
      3'b?1?:
        \1281  = b[63:32];
      3'b1??:
        \1281  = b[95:64];
      default:
        \1281  = a;
    endcase
  endfunction
  assign _23_ = \1281 (32'hxxxxxxxx, { data_store, \halfword_size_store.storehalfw , \byte_size_store.storebyte  }, { _22_, _21_, _20_ });
  assign extern_data_store = _23_;
  assign extern_mem_addr = mem_addr;
  assign data_load = _13_;
endmodule

module programcounter_32_b14a227a3c694ac3d0ad8c71b4ce4306403987f6(clk, jumps, except_addr, jalr, pc_sel, stall, current_addr, next_addr);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input clk;
  output [31:0] current_addr;
  input [31:0] except_addr;
  input [31:0] jalr;
  input [31:0] jumps;
  output [31:0] next_addr;
  wire [31:0] next_instruction;
  reg [31:0] pc = 32'd0;
  wire [31:0] pc_mux;
  input [1:0] pc_sel;
  input stall;
  assign _0_ = stall != 1'h1;
  assign _1_ = _0_ ? pc_mux : pc;
  always @(posedge clk)
    pc <= _1_;
  assign _2_ = pc_sel == 2'h1;
  assign _3_ = pc_sel == 2'h3;
  assign _4_ = pc_sel == 2'h0;
  assign _5_ = pc_sel == 2'h2;
  function [31:0] \609 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \609  = b[31:0];
      4'b??1?:
        \609  = b[63:32];
      4'b?1??:
        \609  = b[95:64];
      4'b1???:
        \609  = b[127:96];
      default:
        \609  = a;
    endcase
  endfunction
  assign pc_mux = \609 (pc_mux, { jalr, next_instruction, except_addr, jumps }, { _5_, _4_, _3_, _2_ });
  assign next_instruction = pc + 32'd4;
  assign current_addr = pc;
  assign next_addr = next_instruction;
endmodule

module registerfile_32(clk, rega_addr, regb_addr, w_data, w_addr, w_en, rega_data, regb_data);
  wire _0_;
  wire _1_;
  wire _2_;
  wire [31:0] _3_;
  wire _4_;
  wire [31:0] _5_;
  wire [1023:0] _6_;
  wire [31:0] _7_;
  wire [1023:0] _8_;
  wire [31:0] _9_;
  input clk;
  input [4:0] rega_addr;
  output [31:0] rega_data;
  input [4:0] regb_addr;
  output [31:0] regb_data;
  input [4:0] w_addr;
  input [31:0] w_data;
  input w_en;
  reg [31:0] \$mem$\654  [31:0];
  assign _0_ = w_addr != 5'h00;
  assign _1_ = _0_ & w_en;
  assign _2_ = rega_addr == 5'h00;
  assign _3_ = _2_ ? 32'd0 : _9_;
  assign _4_ = regb_addr == 5'h00;
  assign _5_ = _4_ ? 32'd0 : _7_;
  reg [31:0] \654  [31:0];
  always @(posedge clk) begin
    if (_1_) \654 [w_addr] <= w_data;
  end
  assign _7_ = \654 [regb_addr];
  assign _9_ = \654 [rega_addr];
  assign rega_data = _3_;
  assign regb_data = _5_;
endmodule
