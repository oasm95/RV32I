/* Generated by Yosys 0.9+3624 (git sha1 UNKNOWN, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module RegisterFile(clk, RegA_addr, RegB_addr, W_data, W_addr, W_en, RegA_data, RegB_data);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire _3_;
  wire [31:0] _4_;
  wire _5_;
  wire [31:0] _6_;
  wire [1023:0] _7_;
  wire [31:0] _8_;
  wire [1023:0] _9_;
  input [4:0] RegA_addr;
  output [31:0] RegA_data;
  input [4:0] RegB_addr;
  output [31:0] RegB_data;
  input [4:0] W_addr;
  input [31:0] W_data;
  input W_en;
  input clk;
  reg [31:0] \$mem$\39  [31:0];
  assign _3_ = RegA_addr == 5'h00;
  assign _4_ = _3_ ? 32'd0 : _1_;
  assign _5_ = RegB_addr == 5'h00;
  assign _6_ = _5_ ? 32'd0 : _8_;
  reg [31:0] \39  [31:0];
  always @(posedge clk) begin
    if (_2_) \39 [W_addr] <= W_data;
  end
  assign _8_ = \39 [RegB_addr];
  assign _1_ = \39 [RegA_addr];
  assign _0_ = W_addr != 5'h00;
  assign _2_ = _0_ & W_en;
  assign RegA_data = _4_;
  assign RegB_data = _6_;
endmodule
